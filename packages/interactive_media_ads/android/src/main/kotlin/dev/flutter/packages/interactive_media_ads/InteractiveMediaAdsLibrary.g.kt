// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass", "SyntheticAccessor")

package dev.flutter.packages.interactive_media_ads

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(exception.code, exception.message, exception.details)
  } else {
    listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception))
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError(
      "channel-error", "Unable to establish connection on channel: '$channelName'.", "")
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()
/**
 * Maintains instances used to communicate with the corresponding objects in Dart.
 *
 * Objects stored in this container are represented by an object in Dart that is also stored in an
 * InstanceManager with the same identifier.
 *
 * When an instance is added with an identifier, either can be used to retrieve the other.
 *
 * Added instances are added as a weak reference and a strong reference. When the strong reference
 * is removed with [remove] and the weak reference is deallocated, the
 * `finalizationListener.onFinalize` is called with the instance's identifier. However, if the
 * strong reference is removed and then the identifier is retrieved with the intention to pass the
 * identifier to Dart (e.g. calling [getIdentifierForStrongReference]), the strong reference to the
 * instance is recreated. The strong reference will then need to be removed manually again.
 */
@Suppress("UNCHECKED_CAST", "MemberVisibilityCanBePrivate")
class InteractiveMediaAdsLibraryPigeonInstanceManager(
    private val finalizationListener: PigeonFinalizationListener
) {
  /** Interface for listening when a weak reference of an instance is removed from the manager. */
  interface PigeonFinalizationListener {
    fun onFinalize(identifier: Long)
  }

  private val identifiers = java.util.WeakHashMap<Any, Long>()
  private val weakInstances = HashMap<Long, java.lang.ref.WeakReference<Any>>()
  private val strongInstances = HashMap<Long, Any>()
  private val referenceQueue = java.lang.ref.ReferenceQueue<Any>()
  private val weakReferencesToIdentifiers = HashMap<java.lang.ref.WeakReference<Any>, Long>()
  private val handler = android.os.Handler(android.os.Looper.getMainLooper())
  private var nextIdentifier: Long = minHostCreatedIdentifier
  private var hasFinalizationListenerStopped = false

  /**
   * Modifies the time interval used to define how often this instance removes garbage collected
   * weak references to native Android objects that this instance was managing.
   */
  var clearFinalizedWeakReferencesInterval: Long = 3000
    set(value) {
      handler.removeCallbacks { this.releaseAllFinalizedInstances() }
      field = value
      releaseAllFinalizedInstances()
    }

  init {
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  companion object {
    // Identifiers are locked to a specific range to avoid collisions with objects
    // created simultaneously from Dart.
    // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
    // 0 <= n < 2^16.
    private const val minHostCreatedIdentifier: Long = 65536
    private const val tag = "PigeonInstanceManager"

    /**
     * Instantiate a new manager with a listener for garbage collected weak references.
     *
     * When the manager is no longer needed, [stopFinalizationListener] must be called.
     */
    fun create(
        finalizationListener: PigeonFinalizationListener
    ): InteractiveMediaAdsLibraryPigeonInstanceManager {
      return InteractiveMediaAdsLibraryPigeonInstanceManager(finalizationListener)
    }
  }

  /**
   * Removes `identifier` and return its associated strongly referenced instance, if present, from
   * the manager.
   */
  fun <T> remove(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    return strongInstances.remove(identifier) as T?
  }

  /**
   * Retrieves the identifier paired with an instance, if present, otherwise `null`.
   *
   * If the manager contains a strong reference to `instance`, it will return the identifier
   * associated with `instance`. If the manager contains only a weak reference to `instance`, a new
   * strong reference to `instance` will be added and will need to be removed again with [remove].
   *
   * If this method returns a nonnull identifier, this method also expects the Dart
   * `InteractiveMediaAdsLibraryPigeonInstanceManager` to have, or recreate, a weak reference to the
   * Dart instance the identifier is associated with.
   */
  fun getIdentifierForStrongReference(instance: Any?): Long? {
    logWarningIfFinalizationListenerHasStopped()
    val identifier = identifiers[instance]
    if (identifier != null) {
      strongInstances[identifier] = instance!!
    }
    return identifier
  }

  /**
   * Adds a new instance that was instantiated from Dart.
   *
   * The same instance can be added multiple times, but each identifier must be unique. This allows
   * two objects that are equivalent (e.g. the `equals` method returns true and their hashcodes are
   * equal) to both be added.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addDartCreatedInstance(instance: Any, identifier: Long) {
    logWarningIfFinalizationListenerHasStopped()
    addInstance(instance, identifier)
  }

  /**
   * Adds a new unique instance that was instantiated from the host platform.
   *
   * [identifier] must be >= 0 and unique.
   */
  fun addHostCreatedInstance(instance: Any): Long {
    logWarningIfFinalizationListenerHasStopped()
    require(!containsInstance(instance)) {
      "Instance of ${instance.javaClass} has already been added."
    }
    val identifier = nextIdentifier++
    addInstance(instance, identifier)
    return identifier
  }

  /** Retrieves the instance associated with identifier, if present, otherwise `null`. */
  fun <T> getInstance(identifier: Long): T? {
    logWarningIfFinalizationListenerHasStopped()
    val instance = weakInstances[identifier] as java.lang.ref.WeakReference<T>?
    return instance?.get()
  }

  /** Returns whether this manager contains the given `instance`. */
  fun containsInstance(instance: Any?): Boolean {
    logWarningIfFinalizationListenerHasStopped()
    return identifiers.containsKey(instance)
  }

  /**
   * Stops the periodic run of the [PigeonFinalizationListener] for instances that have been garbage
   * collected.
   *
   * The InstanceManager can continue to be used, but the [PigeonFinalizationListener] will no
   * longer be called and methods will log a warning.
   */
  fun stopFinalizationListener() {
    handler.removeCallbacks { this.releaseAllFinalizedInstances() }
    hasFinalizationListenerStopped = true
  }

  /**
   * Removes all of the instances from this manager.
   *
   * The manager will be empty after this call returns.
   */
  fun clear() {
    identifiers.clear()
    weakInstances.clear()
    strongInstances.clear()
    weakReferencesToIdentifiers.clear()
  }

  /**
   * Whether the [PigeonFinalizationListener] is still being called for instances that are garbage
   * collected.
   *
   * See [stopFinalizationListener].
   */
  fun hasFinalizationListenerStopped(): Boolean {
    return hasFinalizationListenerStopped
  }

  private fun releaseAllFinalizedInstances() {
    if (hasFinalizationListenerStopped()) {
      return
    }
    var reference: java.lang.ref.WeakReference<Any>?
    while ((referenceQueue.poll() as java.lang.ref.WeakReference<Any>?).also { reference = it } !=
        null) {
      val identifier = weakReferencesToIdentifiers.remove(reference)
      if (identifier != null) {
        weakInstances.remove(identifier)
        strongInstances.remove(identifier)
        finalizationListener.onFinalize(identifier)
      }
    }
    handler.postDelayed({ releaseAllFinalizedInstances() }, clearFinalizedWeakReferencesInterval)
  }

  private fun addInstance(instance: Any, identifier: Long) {
    require(identifier >= 0) { "Identifier must be >= 0: $identifier" }
    require(!weakInstances.containsKey(identifier)) {
      "Identifier has already been added: $identifier"
    }
    val weakReference = java.lang.ref.WeakReference(instance, referenceQueue)
    identifiers[instance] = identifier
    weakInstances[identifier] = weakReference
    weakReferencesToIdentifiers[weakReference] = identifier
    strongInstances[identifier] = instance
  }

  private fun logWarningIfFinalizationListenerHasStopped() {
    if (hasFinalizationListenerStopped()) {
      Log.w(
          tag,
          "The manager was used after calls to the PigeonFinalizationListener has been stopped.")
    }
  }
}

/** Generated API for managing the Dart and native `InstanceManager`s. */
private class InteractiveMediaAdsLibraryPigeonInstanceManagerApi(
    val binaryMessenger: BinaryMessenger
) {
  companion object {
    /** The codec used by InteractiveMediaAdsLibraryPigeonInstanceManagerApi. */
    val codec: MessageCodec<Any?> by lazy { InteractiveMediaAdsLibraryPigeonCodec() }

    /**
     * Sets up an instance of `InteractiveMediaAdsLibraryPigeonInstanceManagerApi` to handle
     * messages from the `binaryMessenger`.
     */
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        instanceManager: InteractiveMediaAdsLibraryPigeonInstanceManager?
    ) {
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.PigeonInternalInstanceManager.removeStrongReference",
                codec)
        if (instanceManager != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  instanceManager.remove<Any?>(identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.PigeonInternalInstanceManager.clear",
                codec)
        if (instanceManager != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> =
                try {
                  instanceManager.clear()
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  fun removeStrongReference(identifierArg: Long, callback: (Result<Unit>) -> Unit) {
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.PigeonInternalInstanceManager.removeStrongReference"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Provides implementations for each ProxyApi implementation and provides access to resources needed
 * by any implementation.
 */
abstract class InteractiveMediaAdsLibraryPigeonProxyApiRegistrar(
    val binaryMessenger: BinaryMessenger
) {
  /** Whether APIs should ignore calling to Dart. */
  public var ignoreCallsToDart = false
  val instanceManager: InteractiveMediaAdsLibraryPigeonInstanceManager
  private var _codec: MessageCodec<Any?>? = null
  val codec: MessageCodec<Any?>
    get() {
      if (_codec == null) {
        _codec = InteractiveMediaAdsLibraryPigeonProxyApiBaseCodec(this)
      }
      return _codec!!
    }

  init {
    val api = InteractiveMediaAdsLibraryPigeonInstanceManagerApi(binaryMessenger)
    instanceManager =
        InteractiveMediaAdsLibraryPigeonInstanceManager.create(
            object : InteractiveMediaAdsLibraryPigeonInstanceManager.PigeonFinalizationListener {
              override fun onFinalize(identifier: Long) {
                api.removeStrongReference(identifier) {
                  if (it.isFailure) {
                    Log.e(
                        "PigeonProxyApiRegistrar",
                        "Failed to remove Dart strong reference with identifier: $identifier")
                  }
                }
              }
            })
  }
  /**
   * An implementation of [PigeonApiBaseDisplayContainer] used to add a new Dart instance of
   * `BaseDisplayContainer` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiBaseDisplayContainer(): PigeonApiBaseDisplayContainer {
    return PigeonApiBaseDisplayContainer(this)
  }

  /**
   * An implementation of [PigeonApiAdDisplayContainer] used to add a new Dart instance of
   * `AdDisplayContainer` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiAdDisplayContainer(): PigeonApiAdDisplayContainer {
    return PigeonApiAdDisplayContainer(this)
  }

  /**
   * An implementation of [PigeonApiAdsLoader] used to add a new Dart instance of `AdsLoader` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsLoader(): PigeonApiAdsLoader

  /**
   * An implementation of [PigeonApiAdsManagerLoadedEvent] used to add a new Dart instance of
   * `AdsManagerLoadedEvent` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsManagerLoadedEvent(): PigeonApiAdsManagerLoadedEvent

  /**
   * An implementation of [PigeonApiAdErrorEvent] used to add a new Dart instance of `AdErrorEvent`
   * to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdErrorEvent(): PigeonApiAdErrorEvent

  /**
   * An implementation of [PigeonApiAdError] used to add a new Dart instance of `AdError` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdError(): PigeonApiAdError

  /**
   * An implementation of [PigeonApiAdsRequest] used to add a new Dart instance of `AdsRequest` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsRequest(): PigeonApiAdsRequest

  /**
   * An implementation of [PigeonApiContentProgressProvider] used to add a new Dart instance of
   * `ContentProgressProvider` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiContentProgressProvider(): PigeonApiContentProgressProvider

  /**
   * An implementation of [PigeonApiAdsManager] used to add a new Dart instance of `AdsManager` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsManager(): PigeonApiAdsManager

  /**
   * An implementation of [PigeonApiBaseManager] used to add a new Dart instance of `BaseManager` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiBaseManager(): PigeonApiBaseManager

  /**
   * An implementation of [PigeonApiAdEvent] used to add a new Dart instance of `AdEvent` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdEvent(): PigeonApiAdEvent

  /**
   * An implementation of [PigeonApiImaSdkFactory] used to add a new Dart instance of
   * `ImaSdkFactory` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiImaSdkFactory(): PigeonApiImaSdkFactory

  /**
   * An implementation of [PigeonApiImaSdkSettings] used to add a new Dart instance of
   * `ImaSdkSettings` to the Dart `InstanceManager`.
   */
  open fun getPigeonApiImaSdkSettings(): PigeonApiImaSdkSettings {
    return PigeonApiImaSdkSettings(this)
  }

  /**
   * An implementation of [PigeonApiVideoProgressUpdate] used to add a new Dart instance of
   * `VideoProgressUpdate` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoProgressUpdate(): PigeonApiVideoProgressUpdate

  /**
   * An implementation of [PigeonApiAdMediaInfo] used to add a new Dart instance of `AdMediaInfo` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdMediaInfo(): PigeonApiAdMediaInfo

  /**
   * An implementation of [PigeonApiAdPodInfo] used to add a new Dart instance of `AdPodInfo` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdPodInfo(): PigeonApiAdPodInfo

  /**
   * An implementation of [PigeonApiFrameLayout] used to add a new Dart instance of `FrameLayout` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiFrameLayout(): PigeonApiFrameLayout

  /**
   * An implementation of [PigeonApiViewGroup] used to add a new Dart instance of `ViewGroup` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiViewGroup(): PigeonApiViewGroup

  /**
   * An implementation of [PigeonApiVideoView] used to add a new Dart instance of `VideoView` to the
   * Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoView(): PigeonApiVideoView

  /**
   * An implementation of [PigeonApiView] used to add a new Dart instance of `View` to the Dart
   * `InstanceManager`.
   */
  open fun getPigeonApiView(): PigeonApiView {
    return PigeonApiView(this)
  }

  /**
   * An implementation of [PigeonApiMediaPlayer] used to add a new Dart instance of `MediaPlayer` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiMediaPlayer(): PigeonApiMediaPlayer

  /**
   * An implementation of [PigeonApiVideoAdPlayerCallback] used to add a new Dart instance of
   * `VideoAdPlayerCallback` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoAdPlayerCallback(): PigeonApiVideoAdPlayerCallback

  /**
   * An implementation of [PigeonApiVideoAdPlayer] used to add a new Dart instance of
   * `VideoAdPlayer` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiVideoAdPlayer(): PigeonApiVideoAdPlayer

  /**
   * An implementation of [PigeonApiAdsLoadedListener] used to add a new Dart instance of
   * `AdsLoadedListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsLoadedListener(): PigeonApiAdsLoadedListener

  /**
   * An implementation of [PigeonApiAdErrorListener] used to add a new Dart instance of
   * `AdErrorListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdErrorListener(): PigeonApiAdErrorListener

  /**
   * An implementation of [PigeonApiAdEventListener] used to add a new Dart instance of
   * `AdEventListener` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdEventListener(): PigeonApiAdEventListener

  /**
   * An implementation of [PigeonApiAdsRenderingSettings] used to add a new Dart instance of
   * `AdsRenderingSettings` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdsRenderingSettings(): PigeonApiAdsRenderingSettings

  /**
   * An implementation of [PigeonApiAdProgressInfo] used to add a new Dart instance of
   * `AdProgressInfo` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiAdProgressInfo(): PigeonApiAdProgressInfo

  /**
   * An implementation of [PigeonApiCompanionAd] used to add a new Dart instance of `CompanionAd` to
   * the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiCompanionAd(): PigeonApiCompanionAd

  /**
   * An implementation of [PigeonApiUniversalAdId] used to add a new Dart instance of
   * `UniversalAdId` to the Dart `InstanceManager`.
   */
  abstract fun getPigeonApiUniversalAdId(): PigeonApiUniversalAdId

  /**
   * An implementation of [PigeonApiAd] used to add a new Dart instance of `Ad` to the Dart
   * `InstanceManager`.
   */
  abstract fun getPigeonApiAd(): PigeonApiAd

  fun setUp() {
    InteractiveMediaAdsLibraryPigeonInstanceManagerApi.setUpMessageHandlers(
        binaryMessenger, instanceManager)
    PigeonApiAdsLoader.setUpMessageHandlers(binaryMessenger, getPigeonApiAdsLoader())
    PigeonApiAdsRequest.setUpMessageHandlers(binaryMessenger, getPigeonApiAdsRequest())
    PigeonApiContentProgressProvider.setUpMessageHandlers(
        binaryMessenger, getPigeonApiContentProgressProvider())
    PigeonApiAdsManager.setUpMessageHandlers(binaryMessenger, getPigeonApiAdsManager())
    PigeonApiBaseManager.setUpMessageHandlers(binaryMessenger, getPigeonApiBaseManager())
    PigeonApiImaSdkFactory.setUpMessageHandlers(binaryMessenger, getPigeonApiImaSdkFactory())
    PigeonApiVideoProgressUpdate.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoProgressUpdate())
    PigeonApiFrameLayout.setUpMessageHandlers(binaryMessenger, getPigeonApiFrameLayout())
    PigeonApiViewGroup.setUpMessageHandlers(binaryMessenger, getPigeonApiViewGroup())
    PigeonApiVideoView.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoView())
    PigeonApiMediaPlayer.setUpMessageHandlers(binaryMessenger, getPigeonApiMediaPlayer())
    PigeonApiVideoAdPlayerCallback.setUpMessageHandlers(
        binaryMessenger, getPigeonApiVideoAdPlayerCallback())
    PigeonApiVideoAdPlayer.setUpMessageHandlers(binaryMessenger, getPigeonApiVideoAdPlayer())
    PigeonApiAdsLoadedListener.setUpMessageHandlers(
        binaryMessenger, getPigeonApiAdsLoadedListener())
    PigeonApiAdErrorListener.setUpMessageHandlers(binaryMessenger, getPigeonApiAdErrorListener())
    PigeonApiAdEventListener.setUpMessageHandlers(binaryMessenger, getPigeonApiAdEventListener())
    PigeonApiAdsRenderingSettings.setUpMessageHandlers(
        binaryMessenger, getPigeonApiAdsRenderingSettings())
  }

  fun tearDown() {
    InteractiveMediaAdsLibraryPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsLoader.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsRequest.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiContentProgressProvider.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsManager.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiBaseManager.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiImaSdkFactory.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoProgressUpdate.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiFrameLayout.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiViewGroup.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoView.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiMediaPlayer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoAdPlayerCallback.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiVideoAdPlayer.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsLoadedListener.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdErrorListener.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdEventListener.setUpMessageHandlers(binaryMessenger, null)
    PigeonApiAdsRenderingSettings.setUpMessageHandlers(binaryMessenger, null)
  }
}

private class InteractiveMediaAdsLibraryPigeonProxyApiBaseCodec(
    val registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) : InteractiveMediaAdsLibraryPigeonCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return registrar.instanceManager.getInstance(readValue(buffer) as Long)
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    if (value is Boolean ||
        value is ByteArray ||
        value is Double ||
        value is DoubleArray ||
        value is FloatArray ||
        value is Int ||
        value is IntArray ||
        value is List<*> ||
        value is Long ||
        value is LongArray ||
        value is Map<*, *> ||
        value is String ||
        value is AdErrorCode ||
        value is AdErrorType ||
        value is AdEventType ||
        value is UiElement ||
        value == null) {
      super.writeValue(stream, value)
      return
    }

    if (value is com.google.ads.interactivemedia.v3.api.AdDisplayContainer) {
      registrar.getPigeonApiAdDisplayContainer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.BaseDisplayContainer) {
      registrar.getPigeonApiBaseDisplayContainer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsLoader) {
      registrar.getPigeonApiAdsLoader().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent) {
      registrar.getPigeonApiAdsManagerLoadedEvent().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdErrorEvent) {
      registrar.getPigeonApiAdErrorEvent().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdError) {
      registrar.getPigeonApiAdError().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsRequest) {
      registrar.getPigeonApiAdsRequest().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider) {
      registrar.getPigeonApiContentProgressProvider().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsManager) {
      registrar.getPigeonApiAdsManager().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.BaseManager) {
      registrar.getPigeonApiBaseManager().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdEvent) {
      registrar.getPigeonApiAdEvent().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.ImaSdkFactory) {
      registrar.getPigeonApiImaSdkFactory().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.ImaSdkSettings) {
      registrar.getPigeonApiImaSdkSettings().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate) {
      registrar.getPigeonApiVideoProgressUpdate().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.AdMediaInfo) {
      registrar.getPigeonApiAdMediaInfo().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdPodInfo) {
      registrar.getPigeonApiAdPodInfo().pigeon_newInstance(value) {}
    } else if (value is android.widget.FrameLayout) {
      registrar.getPigeonApiFrameLayout().pigeon_newInstance(value) {}
    } else if (value is android.view.ViewGroup) {
      registrar.getPigeonApiViewGroup().pigeon_newInstance(value) {}
    } else if (value is android.widget.VideoView) {
      registrar.getPigeonApiVideoView().pigeon_newInstance(value) {}
    } else if (value is android.view.View) {
      registrar.getPigeonApiView().pigeon_newInstance(value) {}
    } else if (value is android.media.MediaPlayer) {
      registrar.getPigeonApiMediaPlayer().pigeon_newInstance(value) {}
    } else if (value
        is com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback) {
      registrar.getPigeonApiVideoAdPlayerCallback().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer) {
      registrar.getPigeonApiVideoAdPlayer().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener) {
      registrar.getPigeonApiAdsLoadedListener().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener) {
      registrar.getPigeonApiAdErrorListener().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener) {
      registrar.getPigeonApiAdEventListener().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdsRenderingSettings) {
      registrar.getPigeonApiAdsRenderingSettings().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.AdProgressInfo) {
      registrar.getPigeonApiAdProgressInfo().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.CompanionAd) {
      registrar.getPigeonApiCompanionAd().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.UniversalAdId) {
      registrar.getPigeonApiUniversalAdId().pigeon_newInstance(value) {}
    } else if (value is com.google.ads.interactivemedia.v3.api.Ad) {
      registrar.getPigeonApiAd().pigeon_newInstance(value) {}
    }

    when {
      registrar.instanceManager.containsInstance(value) -> {
        stream.write(128)
        writeValue(stream, registrar.instanceManager.getIdentifierForStrongReference(value))
      }
      else ->
          throw IllegalArgumentException(
              "Unsupported value: '$value' of type '${value.javaClass.name}'")
    }
  }
}

/**
 * The types of error that can be encountered.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.AdErrorCode.html.
 */
enum class AdErrorCode(val raw: Int) {
  /** Ads player was not provided. */
  ADS_PLAYER_WAS_NOT_PROVIDED(0),
  /** There was a problem requesting ads from the server. */
  ADS_REQUEST_NETWORK_ERROR(1),
  /** A companion ad failed to load or render. */
  COMPANION_AD_LOADING_FAILED(2),
  /** There was a problem requesting ads from the server. */
  FAILED_TO_REQUEST_ADS(3),
  /** An error internal to the SDK occurred. */
  INTERNAL_ERROR(4),
  /** Invalid arguments were provided to SDK methods. */
  INVALID_ARGUMENTS(5),
  /** An overlay ad failed to load. */
  OVERLAY_AD_LOADING_FAILED(6),
  /** An overlay ad failed to render. */
  OVERLAY_AD_PLAYING_FAILED(7),
  /** Ads list was returned but ContentProgressProvider was not configured. */
  PLAYLIST_NO_CONTENT_TRACKING(8),
  /** Ads loader sent ads loaded event when it was not expected. */
  UNEXPECTED_ADS_LOADED_EVENT(9),
  /** The ad response was not understood and cannot be parsed. */
  UNKNOWN_AD_RESPONSE(10),
  /** An unexpected error occurred and the cause is not known. */
  UNKNOWN_ERROR(11),
  /** No assets were found in the VAST ad response. */
  VAST_ASSET_NOT_FOUND(12),
  /** A VAST response containing a single `<VAST>` tag with no child tags. */
  VAST_EMPTY_RESPONSE(13),
  /**
   * Assets were found in the VAST ad response for a linear ad, but none of them matched the video
   * player's capabilities.
   */
  VAST_LINEAR_ASSET_MISMATCH(14),
  /**
   * At least one VAST wrapper ad loaded successfully and a subsequent wrapper or inline ad load has
   * timed out.
   */
  VAST_LOAD_TIMEOUT(15),
  /** The ad response was not recognized as a valid VAST ad. */
  VAST_MALFORMED_RESPONSE(16),
  /** Failed to load media assets from a VAST response. */
  VAST_MEDIA_LOAD_TIMEOUT(17),
  /**
   * Assets were found in the VAST ad response for a nonlinear ad, but none of them matched the
   * video player's capabilities.
   */
  VAST_NONLINEAR_ASSET_MISMATCH(18),
  /** No Ads VAST response after one or more wrappers. */
  VAST_NO_ADS_AFTER_WRAPPER(19),
  /** The maximum number of VAST wrapper redirects has been reached. */
  VAST_TOO_MANY_REDIRECTS(20),
  /**
   * Trafficking error.
   *
   * Video player received an ad type that it was not expecting and/or cannot display.
   */
  VAST_TRAFFICKING_ERROR(21),
  /** There was an error playing the video ad. */
  VIDEO_PLAY_ERROR(22),
  /** The error code is not recognized by this wrapper. */
  UNKNOWN(23);

  companion object {
    fun ofRaw(raw: Int): AdErrorCode? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Specifies when the error was encountered, during either ad loading or playback.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.AdErrorType.html.
 */
enum class AdErrorType(val raw: Int) {
  /** Indicates that the error was encountered when the ad was being loaded. */
  LOAD(0),
  /** Indicates that the error was encountered after the ad loaded, during ad play. */
  PLAY(1),
  /** The error is not recognized by this wrapper. */
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): AdErrorType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Types of events that can occur during ad playback.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.AdEventType.html.
 */
enum class AdEventType(val raw: Int) {
  /** Fired when an ad break in a stream ends. */
  AD_BREAK_ENDED(0),
  /** Fired when an ad break will not play back any ads. */
  AD_BREAK_FETCH_ERROR(1),
  /** Fired when an ad break is ready from VMAP or ad rule ads. */
  AD_BREAK_READY(2),
  /** Fired when an ad break in a stream starts. */
  AD_BREAK_STARTED(3),
  /** Fired when playback stalls while the ad buffers. */
  AD_BUFFERING(4),
  /** Fired when an ad period in a stream ends. */
  AD_PERIOD_ENDED(5),
  /** Fired when an ad period in a stream starts. */
  AD_PERIOD_STARTED(6),
  /** Fired to inform of ad progress and can be used by publisher to display a countdown timer. */
  AD_PROGRESS(7),
  /**
   * Fired when the ads manager is done playing all the valid ads in the ads response, or when the
   * response doesn't return any valid ads.
   */
  ALL_ADS_COMPLETED(8),
  /** Fired when an ad is clicked. */
  CLICKED(9),
  /** Fired when an ad completes playing. */
  COMPLETED(10),
  /** Fired when content should be paused. */
  CONTENT_PAUSE_REQUESTED(11),
  /** Fired when content should be resumed. */
  CONTENT_RESUME_REQUESTED(12),
  /** Fired when VOD stream cuepoints have changed. */
  CUEPOINTS_CHANGED(13),
  /** Fired when the ad playhead crosses first quartile. */
  FIRST_QUARTILE(14),
  /** The user has closed the icon fallback image dialog. */
  ICON_FALLBACK_IMAGE_CLOSED(15),
  /** The user has tapped an ad icon. */
  ICON_TAPPED(16),
  /** Fired when the VAST response has been received. */
  LOADED(17),
  /** Fired to enable the SDK to communicate a message to be logged, which is stored in adData. */
  LOG(18),
  /** Fired when the ad playhead crosses midpoint. */
  MIDPOINT(19),
  /** Fired when an ad is paused. */
  PAUSED(20),
  /** Fired when an ad is resumed. */
  RESUMED(21),
  /** Fired when an ad changes its skippable state. */
  SKIPPABLE_STATE_CHANGED(22),
  /** Fired when an ad was skipped. */
  SKIPPED(23),
  /** Fired when an ad starts playing. */
  STARTED(24),
  /** Fired when a non-clickthrough portion of a video ad is clicked. */
  TAPPED(25),
  /** Fired when the ad playhead crosses third quartile. */
  THIRD_QUARTILE(26),
  /** The event type is not recognized by this wrapper. */
  UNKNOWN(27);

  companion object {
    fun ofRaw(raw: Int): AdEventType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/**
 * Describes an element of the ad UI, to be requested or rendered by the SDK.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/UiElement.html.
 */
enum class UiElement(val raw: Int) {
  /** The ad attribution UI element, for example, "Ad". */
  AD_ATTRIBUTION(0),
  /** Ad attribution is required for a countdown timer to be displayed. */
  COUNTDOWN(1),
  /** The element is not recognized by this wrapper. */
  UNKNOWN(2);

  companion object {
    fun ofRaw(raw: Int): UiElement? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

private open class InteractiveMediaAdsLibraryPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let { AdErrorCode.ofRaw(it.toInt()) }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let { AdErrorType.ofRaw(it.toInt()) }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let { AdEventType.ofRaw(it.toInt()) }
      }
      132.toByte() -> {
        return (readValue(buffer) as Long?)?.let { UiElement.ofRaw(it.toInt()) }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    when (value) {
      is AdErrorCode -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is AdErrorType -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is AdEventType -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is UiElement -> {
        stream.write(132)
        writeValue(stream, value.raw)
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/**
 * A base class for more specialized container interfaces.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseDisplayContainer.html.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiBaseDisplayContainer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BaseDisplayContainer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.BaseDisplayContainer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.BaseDisplayContainer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * A container in which to display the ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdDisplayContainer.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiAdDisplayContainer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdDisplayContainer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdDisplayContainer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdDisplayContainer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseDisplayContainer] used to access callback methods */
  fun pigeon_getPigeonApiBaseDisplayContainer(): PigeonApiBaseDisplayContainer {
    return pigeonRegistrar.getPigeonApiBaseDisplayContainer()
  }
}
/**
 * An object which allows publishers to request ads from ad servers or a dynamic ad insertion
 * stream.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsLoader.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsLoader(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Registers a listener for errors that occur during the ads request. */
  abstract fun addAdErrorListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      listener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
  )

  /** Registers a listener for the ads manager loaded event. */
  abstract fun addAdsLoadedListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      listener: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
  )

  /** Requests ads from a server. */
  abstract fun requestAds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsLoader,
      request: com.google.ads.interactivemedia.v3.api.AdsRequest
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsLoader?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.addAdErrorListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val listenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
            val wrapped: List<Any?> =
                try {
                  api.addAdErrorListener(pigeon_instanceArg, listenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.addAdsLoadedListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val listenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener
            val wrapped: List<Any?> =
                try {
                  api.addAdsLoadedListener(pigeon_instanceArg, listenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoader.requestAds",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsLoader
            val requestArg = args[1] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val wrapped: List<Any?> =
                try {
                  api.requestAds(pigeon_instanceArg, requestArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsLoader and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsLoader.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * An event raised when ads are successfully loaded from the ad server through an AdsLoader.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsManagerLoadedEvent.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsManagerLoadedEvent(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * The ads manager that will control playback of the loaded ads, or null when using dynamic ad
   * insertion.
   */
  abstract fun manager(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent
  ): com.google.ads.interactivemedia.v3.api.AdsManager

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsManagerLoadedEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val managerArg = manager(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdsManagerLoadedEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, managerArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * An event raised when there is an error loading or playing ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdErrorEvent.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdErrorEvent(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The AdError that caused this event. */
  abstract fun error(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdErrorEvent
  ): com.google.ads.interactivemedia.v3.api.AdError

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdErrorEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val errorArg = error(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdErrorEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, errorArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * An error that occurred in the SDK.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdError.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdError(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The error's code. */
  abstract fun errorCode(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError
  ): AdErrorCode

  /** The error code's number. */
  abstract fun errorCodeNumber(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError
  ): Long

  /** The error's type. */
  abstract fun errorType(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError
  ): AdErrorType

  /** A human-readable summary of the error. */
  abstract fun message(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdError): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdError and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdError,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val errorCodeArg = errorCode(pigeon_instanceArg)
    val errorCodeNumberArg = errorCodeNumber(pigeon_instanceArg)
    val errorTypeArg = errorType(pigeon_instanceArg)
    val messageArg = message(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdError.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(pigeon_identifierArg, errorCodeArg, errorCodeNumberArg, errorTypeArg, messageArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}
/**
 * An object containing the data used to request ads from the server.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsRequest.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsRequest(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Sets the URL from which ads will be requested. */
  abstract fun setAdTagUrl(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      adTagUrl: String
  )

  /**
   * Attaches a ContentProgressProvider instance to allow scheduling ad breaks based on content
   * progress (cue points).
   */
  abstract fun setContentProgressProvider(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRequest,
      provider: com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsRequest?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setAdTagUrl",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val adTagUrlArg = args[1] as String
            val wrapped: List<Any?> =
                try {
                  api.setAdTagUrl(pigeon_instanceArg, adTagUrlArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRequest.setContentProgressProvider",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsRequest
            val providerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
            val wrapped: List<Any?> =
                try {
                  api.setContentProgressProvider(pigeon_instanceArg, providerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsRequest and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsRequest,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsRequest.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Defines an interface to allow SDK to track progress of the content video.
 *
 * See
 * https://developers.google.com/ad-manager/dynamic-ad-insertion/sdk/android/api/reference/com/google/ads/interactivemedia/v3/api/player/ContentProgressProvider.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiContentProgressProvider(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider

  /**
   * Sets an update on the progress of the video.
   *
   * This is a custom method added to the native class because the native method
   * `getContentProgress` requires a synchronous return value.
   */
  abstract fun setContentProgress(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider,
      update: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiContentProgressProvider?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ContentProgressProvider.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ContentProgressProvider.setContentProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider
            val updateArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            val wrapped: List<Any?> =
                try {
                  api.setContentProgress(pigeon_instanceArg, updateArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ContentProgressProvider and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.ContentProgressProvider,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.ContentProgressProvider.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * An object which handles playing ads after they've been received from the server.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsManager.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsManager(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Discards current ad break and resumes content. */
  abstract fun discardAdBreak(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /** Pauses the current ad. */
  abstract fun pause(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /** Starts playing the ads. */
  abstract fun start(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /**
   * List of content time offsets in seconds at which ad breaks are scheduled.
   *
   * The list will be empty if no ad breaks are scheduled.
   */
  abstract fun getAdCuePoints(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager
  ): List<Double>

  /** Resumes the current ad. */
  abstract fun resume(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  /**
   * Skips the current ad.
   *
   * `AdsManager.skip()` only skips ads if IMA does not render the 'Skip ad' button.
   */
  abstract fun skip(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsManager)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsManager?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsManager.discardAdBreak",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.discardAdBreak(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.AdsManager.pause", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.pause(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.AdsManager.start", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.start(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsManager.getAdCuePoints",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  listOf(api.getAdCuePoints(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsManager.resume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.resume(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.AdsManager.skip", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.AdsManager
            val wrapped: List<Any?> =
                try {
                  api.skip(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsManager and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsManager,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdsManager.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiBaseManager] used to access callback methods */
  fun pigeon_getPigeonApiBaseManager(): PigeonApiBaseManager {
    return pigeonRegistrar.getPigeonApiBaseManager()
  }
}
/**
 * Base interface for managing ads..
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/BaseManager.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiBaseManager(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * Registers a listener for errors that occur during the ad or stream initialization and playback.
   */
  abstract fun addAdErrorListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager,
      errorListener: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
  )

  /**
   * Registers a listener for ad events that occur during ad or stream initialization and playback.
   */
  abstract fun addAdEventListener(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager,
      adEventListener: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
  )

  /** Stops the ad and all tracking, then releases all assets that were loaded to play the ad. */
  abstract fun destroy(pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager)

  /** Initializes the ad experience using default rendering settings */
  abstract fun init(pigeon_instance: com.google.ads.interactivemedia.v3.api.BaseManager)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiBaseManager?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.addAdErrorListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val errorListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener
            val wrapped: List<Any?> =
                try {
                  api.addAdErrorListener(pigeon_instanceArg, errorListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.addAdEventListener",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val adEventListenerArg =
                args[1] as com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener
            val wrapped: List<Any?> =
                try {
                  api.addAdEventListener(pigeon_instanceArg, adEventListenerArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.BaseManager.destroy",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val wrapped: List<Any?> =
                try {
                  api.destroy(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.BaseManager.init", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.BaseManager
            val wrapped: List<Any?> =
                try {
                  api.init(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of BaseManager and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.BaseManager,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.BaseManager.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Event to notify publisher that an event occurred with an Ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdEvent(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The type of event that occurred. */
  abstract fun type(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdEvent): AdEventType

  /** A map containing any extra ad data for the event, if needed. */
  abstract fun adData(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdEvent
  ): Map<String, String>?

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdEvent and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val typeArg = type(pigeon_instanceArg)
    val adDataArg = adData(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdEvent.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, typeArg, adDataArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Factory class for creating SDK objects.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkFactory.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiImaSdkFactory(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun instance(): com.google.ads.interactivemedia.v3.api.ImaSdkFactory

  abstract fun createAdDisplayContainer(
      container: android.view.ViewGroup,
      player: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
  ): com.google.ads.interactivemedia.v3.api.AdDisplayContainer

  /** Creates an `ImaSdkSettings` object for configuring the IMA SDK. */
  abstract fun createImaSdkSettings(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory
  ): com.google.ads.interactivemedia.v3.api.ImaSdkSettings

  /** Creates an `AdsLoader` for requesting ads using the specified settings object. */
  abstract fun createAdsLoader(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      settings: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      container: com.google.ads.interactivemedia.v3.api.AdDisplayContainer
  ): com.google.ads.interactivemedia.v3.api.AdsLoader

  /** Creates an AdsRequest object to contain the data used to request ads. */
  abstract fun createAdsRequest(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.ImaSdkFactory
  ): com.google.ads.interactivemedia.v3.api.AdsRequest

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiImaSdkFactory?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.instance",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.instance(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdDisplayContainer",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val containerArg = args[0] as android.view.ViewGroup
            val playerArg = args[1] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdDisplayContainer(containerArg, playerArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createImaSdkSettings",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val wrapped: List<Any?> =
                try {
                  listOf(api.createImaSdkSettings(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdsLoader",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val settingsArg = args[1] as com.google.ads.interactivemedia.v3.api.ImaSdkSettings
            val containerArg = args[2] as com.google.ads.interactivemedia.v3.api.AdDisplayContainer
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdsLoader(pigeon_instanceArg, settingsArg, containerArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.createAdsRequest",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as com.google.ads.interactivemedia.v3.api.ImaSdkFactory
            val wrapped: List<Any?> =
                try {
                  listOf(api.createAdsRequest(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImaSdkFactory and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.ImaSdkFactory,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ImaSdkFactory.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Defines general SDK settings that are used when creating an `AdsLoader`.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/ImaSdkSettings.html.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiImaSdkSettings(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ImaSdkSettings and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.ImaSdkSettings,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ImaSdkSettings.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Defines an update to the video's progress.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoProgressUpdate.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoProgressUpdate(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor(
      currentTimeMs: Long,
      durationMs: Long
  ): com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

  /** Value to use for cases when progress is not yet defined, such as video initialization. */
  abstract fun videoTimeNotReady():
      com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoProgressUpdate?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val currentTimeMsArg = args[1] as Long
            val durationMsArg = args[2] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(currentTimeMsArg, durationMsArg),
                      pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.videoTimeNotReady",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.videoTimeNotReady(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoProgressUpdate and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.VideoProgressUpdate.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * The minimal information required to play an ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/AdMediaInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdMediaInfo(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun url(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  ): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdMediaInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val urlArg = url(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdMediaInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, urlArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * An ad may be part of a pod of ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdPodInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdPodInfo(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * The position of the ad within the pod.
   *
   * The value returned is one-based, for example, 1 of 2, 2 of 2, etc. If the ad is not part of a
   * pod, this will return 1.
   */
  abstract fun adPosition(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /**
   * The maximum duration of the pod in seconds.
   *
   * For unknown duration, -1 is returned.
   */
  abstract fun maxDuration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo
  ): Double

  /** Client side and DAI VOD: Returns the index of the ad pod. */
  abstract fun podIndex(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /**
   * The content time offset at which the current ad pod was scheduled.
   *
   * For preroll pod, 0 is returned. For midrolls, the scheduled time is returned in seconds. For
   * postroll, -1 is returned. Defaults to 0 if this ad is not part of a pod, or the pod is not part
   * of an ad playlist.
   */
  abstract fun timeOffset(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Double

  /** The total number of ads contained within this pod, including bumpers. */
  abstract fun totalAds(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Long

  /** Returns true if the ad is a bumper ad. */
  abstract fun isBumper(pigeon_instance: com.google.ads.interactivemedia.v3.api.AdPodInfo): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdPodInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdPodInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adPositionArg = adPosition(pigeon_instanceArg)
    val maxDurationArg = maxDuration(pigeon_instanceArg)
    val podIndexArg = podIndex(pigeon_instanceArg)
    val timeOffsetArg = timeOffset(pigeon_instanceArg)
    val totalAdsArg = totalAds(pigeon_instanceArg)
    val isBumperArg = isBumper(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdPodInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(
            pigeon_identifierArg,
            adPositionArg,
            maxDurationArg,
            podIndexArg,
            timeOffsetArg,
            totalAdsArg,
            isBumperArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}
/**
 * FrameLayout is designed to block out an area on the screen to display a single item.
 *
 * See https://developer.android.com/reference/android/widget/FrameLayout.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiFrameLayout(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor(): android.widget.FrameLayout

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiFrameLayout?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of FrameLayout and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.widget.FrameLayout,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.FrameLayout.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiViewGroup] used to access callback methods */
  fun pigeon_getPigeonApiViewGroup(): PigeonApiViewGroup {
    return pigeonRegistrar.getPigeonApiViewGroup()
  }
}
/**
 * A special view that can contain other views (called children.)
 *
 * See https://developer.android.com/reference/android/view/ViewGroup.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiViewGroup(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Adds a child view. */
  abstract fun addView(pigeon_instance: android.view.ViewGroup, view: android.view.View)

  /**
   * Called by a ViewGroup subclass to remove child views from itself, when it must first know its
   * size on screen before it can calculate how many child views it will render.
   */
  abstract fun removeView(pigeon_instance: android.view.ViewGroup, view: android.view.View)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiViewGroup?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ViewGroup.addView",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.view.ViewGroup
            val viewArg = args[1] as android.view.View
            val wrapped: List<Any?> =
                try {
                  api.addView(pigeon_instanceArg, viewArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.ViewGroup.removeView",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.view.ViewGroup
            val viewArg = args[1] as android.view.View
            val wrapped: List<Any?> =
                try {
                  api.removeView(pigeon_instanceArg, viewArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of ViewGroup and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.view.ViewGroup,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.ViewGroup.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiView] used to access callback methods */
  fun pigeon_getPigeonApiView(): PigeonApiView {
    return pigeonRegistrar.getPigeonApiView()
  }
}
/**
 * Displays a video file.
 *
 * See https://developer.android.com/reference/android/widget/VideoView.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoView(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor(): android.widget.VideoView

  /** Sets the URI of the video. */
  abstract fun setVideoUri(pigeon_instance: android.widget.VideoView, uri: String?)

  /**
   * The current position of the playing video.
   *
   * In milliseconds.
   */
  abstract fun getCurrentPosition(pigeon_instance: android.widget.VideoView): Long

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoView?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoView.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoView.setVideoUri",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.widget.VideoView
            val uriArg = args[1] as String?
            val wrapped: List<Any?> =
                try {
                  api.setVideoUri(pigeon_instanceArg, uriArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoView.getCurrentPosition",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.widget.VideoView
            val wrapped: List<Any?> =
                try {
                  listOf(api.getCurrentPosition(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoView and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.widget.VideoView,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of VideoView, but the class has a nonnull callback method.")
  }

  /** Callback to be invoked when the media source is ready for playback. */
  fun onPrepared(
      pigeon_instanceArg: android.widget.VideoView,
      playerArg: android.media.MediaPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.onPrepared"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, playerArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Callback to be invoked when playback of a media source has completed. */
  fun onCompletion(
      pigeon_instanceArg: android.widget.VideoView,
      playerArg: android.media.MediaPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.onCompletion"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, playerArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Callback to be invoked when there has been an error during an asynchronous operation. */
  fun onError(
      pigeon_instanceArg: android.widget.VideoView,
      playerArg: android.media.MediaPlayer,
      whatArg: Long,
      extraArg: Long,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoView.onError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, playerArg, whatArg, extraArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  @Suppress("FunctionName")
  /** An implementation of [PigeonApiView] used to access callback methods */
  fun pigeon_getPigeonApiView(): PigeonApiView {
    return pigeonRegistrar.getPigeonApiView()
  }
}
/**
 * This class represents the basic building block for user interface components.
 *
 * See https://developer.android.com/reference/android/view/View.
 */
@Suppress("UNCHECKED_CAST")
open class PigeonApiView(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of View and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(pigeon_instanceArg: android.view.View, callback: (Result<Unit>) -> Unit) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.View.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * MediaPlayer class can be used to control playback of audio/video files and streams.
 *
 * See https://developer.android.com/reference/android/media/MediaPlayer.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiMediaPlayer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Gets the duration of the file. */
  abstract fun getDuration(pigeon_instance: android.media.MediaPlayer): Long

  /** Seeks to specified time position. */
  abstract fun seekTo(pigeon_instance: android.media.MediaPlayer, mSec: Long)

  /** Starts or resumes playback. */
  abstract fun start(pigeon_instance: android.media.MediaPlayer)

  /** Pauses playback. */
  abstract fun pause(pigeon_instance: android.media.MediaPlayer)

  /** Stops playback after playback has been started or paused. */
  abstract fun stop(pigeon_instance: android.media.MediaPlayer)

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiMediaPlayer?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.getDuration",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  listOf(api.getDuration(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.seekTo",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val mSecArg = args[1] as Long
            val wrapped: List<Any?> =
                try {
                  api.seekTo(pigeon_instanceArg, mSecArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.start",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  api.start(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pause",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  api.pause(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger, "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.stop", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg = args[0] as android.media.MediaPlayer
            val wrapped: List<Any?> =
                try {
                  api.stop(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of MediaPlayer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: android.media.MediaPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.MediaPlayer.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Callbacks that the player must fire.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.VideoAdPlayerCallback.html
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoAdPlayerCallback(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Fire this callback periodically as ad playback occurs. */
  abstract fun onAdProgress(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      videoProgressUpdate: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  /** Fire this callback when video playback stalls waiting for data. */
  abstract fun onBuffering(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when all content has finished playing. */
  abstract fun onContentComplete(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
  )

  /** Fire this callback when the video finishes playing. */
  abstract fun onEnded(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video has encountered an error. */
  abstract fun onError(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is ready to begin playback. */
  abstract fun onLoaded(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is paused. */
  abstract fun onPause(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the player begins playing a video. */
  abstract fun onPlay(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the video is unpaused. */
  abstract fun onResume(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
  )

  /** Fire this callback when the playback volume changes. */
  abstract fun onVolumeChanged(
      pigeon_instance:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      adMediaInfo: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      percentage: Long
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiVideoAdPlayerCallback?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onAdProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val videoProgressUpdateArg =
                args[2] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            val wrapped: List<Any?> =
                try {
                  api.onAdProgress(pigeon_instanceArg, adMediaInfoArg, videoProgressUpdateArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onBuffering",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onBuffering(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onContentComplete",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val wrapped: List<Any?> =
                try {
                  api.onContentComplete(pigeon_instanceArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onEnded",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onEnded(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onError",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onError(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onLoaded",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onLoaded(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPause",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onPause(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onPlay",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onPlay(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onResume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val wrapped: List<Any?> =
                try {
                  api.onResume(pigeon_instanceArg, adMediaInfoArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.onVolumeChanged",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0]
                    as
                    com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback
            val adMediaInfoArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.AdMediaInfo
            val percentageArg = args[2] as Long
            val wrapped: List<Any?> =
                try {
                  api.onVolumeChanged(pigeon_instanceArg, adMediaInfoArg, percentageArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoAdPlayerCallback and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayerCallback.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Defines the set of methods that a video player must implement to be used by the IMA SDK, as well
 * as a set of callbacks that it must fire.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/player/VideoAdPlayer.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiVideoAdPlayer(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer

  /** The volume of the player as a percentage from 0 to 100. */
  abstract fun setVolume(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      value: Long
  )

  /** The `VideoProgressUpdate` describing playback progress of the current video. */
  abstract fun setAdProgress(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      progress: com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiVideoAdPlayer?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setVolume",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val valueArg = args[1] as Long
            val wrapped: List<Any?> =
                try {
                  api.setVolume(pigeon_instanceArg, valueArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.setAdProgress",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer
            val progressArg =
                args[1] as com.google.ads.interactivemedia.v3.api.player.VideoProgressUpdate
            val wrapped: List<Any?> =
                try {
                  api.setAdProgress(pigeon_instanceArg, progressArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of VideoAdPlayer and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of VideoAdPlayer, but the class has a nonnull callback method.")
  }

  /** Adds a callback. */
  fun addCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.addCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Loads a video ad hosted at AdMediaInfo. */
  fun loadAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      adPodInfoArg: com.google.ads.interactivemedia.v3.api.AdPodInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.loadAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg, adPodInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Pauses playing the current ad. */
  fun pauseAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.pauseAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /**
   * Starts or resumes playing the video ad referenced by the AdMediaInfo, provided loadAd has
   * already been called for it.
   */
  fun playAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.playAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Cleans up and releases all resources used by the `VideoAdPlayer`. */
  fun release(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.release"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Removes a callback. */
  fun removeCallback(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      callbackArg:
          com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer.VideoAdPlayerCallback,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.removeCallback"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, callbackArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }

  /** Stops playing the current ad. */
  fun stopAd(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.player.VideoAdPlayer,
      adMediaInfoArg: com.google.ads.interactivemedia.v3.api.player.AdMediaInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.VideoAdPlayer.stopAd"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, adMediaInfoArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Listener interface for notification of ad load or stream load completion.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsLoader.AdsLoadedListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsLoadedListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdsLoadedListener?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsLoadedListener and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of AdsLoadedListener, but the class has a nonnull callback method.")
  }

  /** Called once the AdsManager or StreamManager has been loaded. */
  fun onAdsManagerLoaded(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsLoader.AdsLoadedListener,
      eventArg: com.google.ads.interactivemedia.v3.api.AdsManagerLoadedEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdsLoadedListener.onAdsManagerLoaded"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Interface for classes that will listen to AdErrorEvents.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdErrorEvent.AdErrorListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdErrorListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdErrorListener?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdErrorListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdErrorListener and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of AdErrorListener, but the class has a nonnull callback method.")
  }

  /** Called when an error occurs. */
  fun onAdError(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent.AdErrorListener,
      eventArg: com.google.ads.interactivemedia.v3.api.AdErrorEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdErrorListener.onAdError"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Listener interface for ad events.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdEvent.AdEventListener.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdEventListener(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  abstract fun pigeon_defaultConstructor():
      com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(binaryMessenger: BinaryMessenger, api: PigeonApiAdEventListener?) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdEventListener.pigeon_defaultConstructor",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_identifierArg = args[0] as Long
            val wrapped: List<Any?> =
                try {
                  api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
                      api.pigeon_defaultConstructor(), pigeon_identifierArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdEventListener and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    throw IllegalStateException(
        "Attempting to create a new Dart instance of AdEventListener, but the class has a nonnull callback method.")
  }

  /** Respond to an occurrence of an AdEvent. */
  fun onAdEvent(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdEvent.AdEventListener,
      eventArg: com.google.ads.interactivemedia.v3.api.AdEvent,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdEventListener.onAdEvent"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_instanceArg, eventArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Defines parameters that control the rendering of ads.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdsRenderingSettings.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdsRenderingSettings(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Maximum recommended bitrate. */
  abstract fun getBitrateKbps(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): Long

  /** Returns whether the click-through URL will be opened using Custom Tabs feature. */
  abstract fun getEnableCustomTabs(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): Boolean

  /**
   * Whether the SDK will instruct the player to load the creative in response to
   * `BaseManager.init()`.
   */
  abstract fun getEnablePreloading(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): Boolean

  /**
   * Whether to focus on the skip button when the skippable ad can be skipped on Android TV.
   *
   * This is a no-op on non-Android TV devices.
   */
  abstract fun getFocusSkipButtonWhenAvailable(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): Boolean

  /** The SDK will prioritize the media with MIME type on the list. */
  abstract fun getMimeTypes(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
  ): List<String>

  /**
   * Maximum recommended bitrate.
   *
   * The value is in kbit/s. Default value, -1, means the bitrate will be selected by the SDK.
   */
  abstract fun setBitrateKbps(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      bitrate: Long
  )

  /**
   * Notifies the SDK whether to launch the click-through URL using Custom Tabs feature.
   *
   * Default is false.
   */
  abstract fun setEnableCustomTabs(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      enableCustomTabs: Boolean
  )

  /**
   * If set, the SDK will instruct the player to load the creative in response to
   * `BaseManager.init()`.
   *
   * This allows the player to preload the ad at any point before calling `AdsManager.start()`.
   */
  abstract fun setEnablePreloading(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      enablePreloading: Boolean
  )

  /**
   * Set whether to focus on the skip button when the skippable ad can be skipped on Android TV.
   *
   * This is a no-op on non-Android TV devices.
   *
   * Default is true.
   */
  abstract fun setFocusSkipButtonWhenAvailable(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      enableFocusSkipButton: Boolean
  )

  /**
   * Specifies a non-default amount of time to wait for media to load before timing out, in
   * milliseconds.
   *
   * This only applies to the IMA client-side SDK.
   *
   * Default time is 8000 ms.
   */
  abstract fun setLoadVideoTimeout(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      loadVideoTimeout: Long
  )

  /** If specified, the SDK will prioritize the media with MIME type on the list. */
  abstract fun setMimeTypes(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      mimeTypes: List<String>
  )

  /**
   * For VMAP and ad rules playlists, only play ad breaks scheduled after this time (in seconds).
   */
  abstract fun setPlayAdsAfterTime(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      time: Double
  )

  /** Sets the ad UI elements to be rendered by the IMA SDK. */
  abstract fun setUiElements(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      uiElements: List<UiElement>
  )

  companion object {
    @Suppress("LocalVariableName")
    fun setUpMessageHandlers(
        binaryMessenger: BinaryMessenger,
        api: PigeonApiAdsRenderingSettings?
    ) {
      val codec = api?.pigeonRegistrar?.codec ?: InteractiveMediaAdsLibraryPigeonCodec()
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getBitrateKbps",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getBitrateKbps(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getEnableCustomTabs",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getEnableCustomTabs(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getEnablePreloading",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getEnablePreloading(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getFocusSkipButtonWhenAvailable",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getFocusSkipButtonWhenAvailable(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.getMimeTypes",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val wrapped: List<Any?> =
                try {
                  listOf(api.getMimeTypes(pigeon_instanceArg))
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setBitrateKbps",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val bitrateArg = args[1] as Long
            val wrapped: List<Any?> =
                try {
                  api.setBitrateKbps(pigeon_instanceArg, bitrateArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setEnableCustomTabs",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val enableCustomTabsArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setEnableCustomTabs(pigeon_instanceArg, enableCustomTabsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setEnablePreloading",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val enablePreloadingArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setEnablePreloading(pigeon_instanceArg, enablePreloadingArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setFocusSkipButtonWhenAvailable",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val enableFocusSkipButtonArg = args[1] as Boolean
            val wrapped: List<Any?> =
                try {
                  api.setFocusSkipButtonWhenAvailable(pigeon_instanceArg, enableFocusSkipButtonArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setLoadVideoTimeout",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val loadVideoTimeoutArg = args[1] as Long
            val wrapped: List<Any?> =
                try {
                  api.setLoadVideoTimeout(pigeon_instanceArg, loadVideoTimeoutArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setMimeTypes",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val mimeTypesArg = args[1] as List<String>
            val wrapped: List<Any?> =
                try {
                  api.setMimeTypes(pigeon_instanceArg, mimeTypesArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setPlayAdsAfterTime",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val timeArg = args[1] as Double
            val wrapped: List<Any?> =
                try {
                  api.setPlayAdsAfterTime(pigeon_instanceArg, timeArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel =
            BasicMessageChannel<Any?>(
                binaryMessenger,
                "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.setUiElements",
                codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val pigeon_instanceArg =
                args[0] as com.google.ads.interactivemedia.v3.api.AdsRenderingSettings
            val uiElementsArg = args[1] as List<UiElement>
            val wrapped: List<Any?> =
                try {
                  api.setUiElements(pigeon_instanceArg, uiElementsArg)
                  listOf(null)
                } catch (exception: Throwable) {
                  wrapError(exception)
                }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdsRenderingSettings and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdsRenderingSettings,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName =
        "dev.flutter.pigeon.interactive_media_ads.AdsRenderingSettings.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * Represents the progress within this ad break.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/AdProgressInfo.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAdProgressInfo(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** Total ad break duration (in seconds). */
  abstract fun adBreakDuration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Double

  /** Total ad period duration (in seconds). */
  abstract fun adPeriodDuration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Double

  /** The position of current ad within the ad break, starting with 1. */
  abstract fun adPosition(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Long

  /** Current time within the ad (in seconds). */
  abstract fun currentTime(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Double

  /** Duration of current ad (in seconds). */
  abstract fun duration(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Double

  /** The total number of ads in this ad break. */
  abstract fun totalAds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.AdProgressInfo
  ): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of AdProgressInfo and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.AdProgressInfo,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adBreakDurationArg = adBreakDuration(pigeon_instanceArg)
    val adPeriodDurationArg = adPeriodDuration(pigeon_instanceArg)
    val adPositionArg = adPosition(pigeon_instanceArg)
    val currentTimeArg = currentTime(pigeon_instanceArg)
    val durationArg = duration(pigeon_instanceArg)
    val totalAdsArg = totalAds(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.AdProgressInfo.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(
            pigeon_identifierArg,
            adBreakDurationArg,
            adPeriodDurationArg,
            adPositionArg,
            currentTimeArg,
            durationArg,
            totalAdsArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}
/**
 * An object that holds data corresponding to the companion Ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/CompanionAd.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiCompanionAd(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The API needed to execute this ad, or null if unavailable. */
  abstract fun apiFramework(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd
  ): String?

  /**
   * The height of the companion in pixels.
   *
   * 0 if unavailable.
   */
  abstract fun height(pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd): Long

  /** The URL for the static resource of this companion. */
  abstract fun resourceValue(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd
  ): String

  /**
   * The width of the companion in pixels.
   *
   * 0 if unavailable.
   */
  abstract fun width(pigeon_instance: com.google.ads.interactivemedia.v3.api.CompanionAd): Long

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of CompanionAd and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.CompanionAd,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val apiFrameworkArg = apiFramework(pigeon_instanceArg)
    val heightArg = height(pigeon_instanceArg)
    val resourceValueArg = resourceValue(pigeon_instanceArg)
    val widthArg = width(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.CompanionAd.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(pigeon_identifierArg, apiFrameworkArg, heightArg, resourceValueArg, widthArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}
/**
 * This object exposes information about the universal ad ID.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/UniversalAdId.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiUniversalAdId(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /**
   * Returns the ad ID registry associated with the ad ID value.
   *
   * Returns "unknown" if the registry is not known.
   */
  abstract fun adIdRegistry(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.UniversalAdId
  ): String

  /**
   * Returns the universal ad ID value.
   *
   * Returns "unknown" if the value is not known.
   */
  abstract fun adIdValue(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.UniversalAdId
  ): String

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of UniversalAdId and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.UniversalAdId,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adIdRegistryArg = adIdRegistry(pigeon_instanceArg)
    val adIdValueArg = adIdValue(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.UniversalAdId.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(pigeon_identifierArg, adIdRegistryArg, adIdValueArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      }
    }
  }
}
/**
 * An object that holds data corresponding to the main Ad.
 *
 * See
 * https://developers.google.com/interactive-media-ads/docs/sdks/android/client-side/api/reference/com/google/ads/interactivemedia/v3/api/Ad.html.
 */
@Suppress("UNCHECKED_CAST")
abstract class PigeonApiAd(
    open val pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
) {
  /** The ad ID as specified in the VAST response. */
  abstract fun adId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The pod metadata object. */
  abstract fun adPodInfo(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): com.google.ads.interactivemedia.v3.api.AdPodInfo

  /** The ad system as specified in the VAST response. */
  abstract fun adSystem(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The IDs of the ads' creatives, starting with the first wrapper ad. */
  abstract fun adWrapperCreativeIds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<String>

  /** The wrapper ad IDs as specified in the VAST response. */
  abstract fun adWrapperIds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<String>

  /** The wrapper ad systems as specified in the VAST response. */
  abstract fun adWrapperSystems(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<String>

  /** The advertiser name as defined by the serving party. */
  abstract fun advertiserName(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /**
   * The companions for the current ad while using DAI.
   *
   * Returns an empty list in any other scenario.
   */
  abstract fun companionAds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<com.google.ads.interactivemedia.v3.api.CompanionAd>

  /**
   * The content type of the currently selected creative, or null if no creative is selected or the
   * content type is unavailable.
   */
  abstract fun contentType(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** The ISCI (Industry Standard Commercial Identifier) code for an ad. */
  abstract fun creativeAdId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The ID of the selected creative for the ad, */
  abstract fun creativeId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The first deal ID present in the wrapper chain for the current ad, starting from the top. */
  abstract fun dealId(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String

  /** The description of this ad from the VAST response. */
  abstract fun description(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** The duration of the ad in seconds, -1 if not available. */
  abstract fun duration(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Double

  /** The height of the selected creative if non-linear, else returns 0. */
  abstract fun height(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** The number of seconds of playback before the ad becomes skippable. */
  abstract fun skipTimeOffset(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Double

  /** The URL associated with the survey for the given ad. */
  abstract fun surveyUrl(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** The title of this ad from the VAST response. */
  abstract fun title(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): String?

  /** The custom parameters associated with the ad at the time of ad trafficking. */
  abstract fun traffickingParameters(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): String

  /** Te set of ad UI elements rendered by the IMA SDK for this ad. */
  abstract fun uiElements(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<UiElement>

  /** The list of all universal ad IDs for this ad. */
  abstract fun universalAdIds(
      pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad
  ): List<com.google.ads.interactivemedia.v3.api.UniversalAdId>

  /** The VAST bitrate in Kbps of the selected creative. */
  abstract fun vastMediaBitrate(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** The VAST media height in pixels of the selected creative. */
  abstract fun vastMediaHeight(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** The VAST media width in pixels of the selected creative. */
  abstract fun vastMediaWidth(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** The width of the selected creative if non-linear, else returns 0. */
  abstract fun width(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Long

  /** Indicates whether the ad’s current mode of operation is linear or non-linear. */
  abstract fun isLinear(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Boolean

  /** Indicates whether the ad can be skipped by the user. */
  abstract fun isSkippable(pigeon_instance: com.google.ads.interactivemedia.v3.api.Ad): Boolean

  @Suppress("LocalVariableName", "FunctionName")
  /** Creates a Dart instance of Ad and attaches it to [pigeon_instanceArg]. */
  fun pigeon_newInstance(
      pigeon_instanceArg: com.google.ads.interactivemedia.v3.api.Ad,
      callback: (Result<Unit>) -> Unit
  ) {
    if (pigeonRegistrar.ignoreCallsToDart) {
      callback(
          Result.failure(
              FlutterError("ignore-calls-error", "Calls to Dart are being ignored.", "")))
      return
    }
    if (pigeonRegistrar.instanceManager.containsInstance(pigeon_instanceArg)) {
      Result.success(Unit)
      return
    }
    val pigeon_identifierArg =
        pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeon_instanceArg)
    val adIdArg = adId(pigeon_instanceArg)
    val adPodInfoArg = adPodInfo(pigeon_instanceArg)
    val adSystemArg = adSystem(pigeon_instanceArg)
    val adWrapperCreativeIdsArg = adWrapperCreativeIds(pigeon_instanceArg)
    val adWrapperIdsArg = adWrapperIds(pigeon_instanceArg)
    val adWrapperSystemsArg = adWrapperSystems(pigeon_instanceArg)
    val advertiserNameArg = advertiserName(pigeon_instanceArg)
    val companionAdsArg = companionAds(pigeon_instanceArg)
    val contentTypeArg = contentType(pigeon_instanceArg)
    val creativeAdIdArg = creativeAdId(pigeon_instanceArg)
    val creativeIdArg = creativeId(pigeon_instanceArg)
    val dealIdArg = dealId(pigeon_instanceArg)
    val descriptionArg = description(pigeon_instanceArg)
    val durationArg = duration(pigeon_instanceArg)
    val heightArg = height(pigeon_instanceArg)
    val skipTimeOffsetArg = skipTimeOffset(pigeon_instanceArg)
    val surveyUrlArg = surveyUrl(pigeon_instanceArg)
    val titleArg = title(pigeon_instanceArg)
    val traffickingParametersArg = traffickingParameters(pigeon_instanceArg)
    val uiElementsArg = uiElements(pigeon_instanceArg)
    val universalAdIdsArg = universalAdIds(pigeon_instanceArg)
    val vastMediaBitrateArg = vastMediaBitrate(pigeon_instanceArg)
    val vastMediaHeightArg = vastMediaHeight(pigeon_instanceArg)
    val vastMediaWidthArg = vastMediaWidth(pigeon_instanceArg)
    val widthArg = width(pigeon_instanceArg)
    val isLinearArg = isLinear(pigeon_instanceArg)
    val isSkippableArg = isSkippable(pigeon_instanceArg)
    val binaryMessenger = pigeonRegistrar.binaryMessenger
    val codec = pigeonRegistrar.codec
    val channelName = "dev.flutter.pigeon.interactive_media_ads.Ad.pigeon_newInstance"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(
        listOf(
            pigeon_identifierArg,
            adIdArg,
            adPodInfoArg,
            adSystemArg,
            adWrapperCreativeIdsArg,
            adWrapperIdsArg,
            adWrapperSystemsArg,
            advertiserNameArg,
            companionAdsArg,
            contentTypeArg,
            creativeAdIdArg,
            creativeIdArg,
            dealIdArg,
            descriptionArg,
            durationArg,
            heightArg,
            skipTimeOffsetArg,
            surveyUrlArg,
            titleArg,
            traffickingParametersArg,
            uiElementsArg,
            universalAdIdsArg,
            vastMediaBitrateArg,
            vastMediaHeightArg,
            vastMediaWidthArg,
            widthArg,
            isLinearArg,
            isSkippableArg)) {
          if (it is List<*>) {
            if (it.size > 1) {
              callback(
                  Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
            } else {
              callback(Result.success(Unit))
            }
          } else {
            callback(Result.failure(createConnectionError(channelName)))
          }
        }
  }
}
