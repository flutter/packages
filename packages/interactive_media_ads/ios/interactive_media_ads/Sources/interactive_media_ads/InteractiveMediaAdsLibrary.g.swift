// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v26.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
import GoogleInteractiveMediaAds
import UIKit

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Handles the callback when an object is deallocated.
protocol InteractiveMediaAdsLibraryPigeonInternalFinalizerDelegate: AnyObject {
  /// Invoked when the strong reference of an object is deallocated in an `InstanceManager`.
  func onDeinit(identifier: Int64)
}


// Attaches to an object to receive a callback when the object is deallocated.
internal final class InteractiveMediaAdsLibraryPigeonInternalFinalizer {
  internal static let associatedObjectKey = malloc(1)!

  private let identifier: Int64
  // Reference to the delegate is weak because the callback should be ignored if the
  // `InstanceManager` is deallocated.
  internal weak var delegate: InteractiveMediaAdsLibraryPigeonInternalFinalizerDelegate?

  private init(identifier: Int64, delegate: InteractiveMediaAdsLibraryPigeonInternalFinalizerDelegate) {
    self.identifier = identifier
    self.delegate = delegate
  }

  internal static func attach(
    to instance: AnyObject, identifier: Int64, delegate: InteractiveMediaAdsLibraryPigeonInternalFinalizerDelegate
  ) {
    let finalizer = InteractiveMediaAdsLibraryPigeonInternalFinalizer(identifier: identifier, delegate: delegate)
    objc_setAssociatedObject(instance, associatedObjectKey, finalizer, .OBJC_ASSOCIATION_RETAIN)
  }

  static func detach(from instance: AnyObject) {
    let finalizer = objc_getAssociatedObject(instance, associatedObjectKey) as? InteractiveMediaAdsLibraryPigeonInternalFinalizer
    if let finalizer = finalizer {
      finalizer.delegate = nil
      objc_setAssociatedObject(instance, associatedObjectKey, nil, .OBJC_ASSOCIATION_ASSIGN)
    }
  }

  deinit {
    delegate?.onDeinit(identifier: identifier)
  }
}


/// Maintains instances used to communicate with the corresponding objects in Dart.
///
/// Objects stored in this container are represented by an object in Dart that is also stored in
/// an InstanceManager with the same identifier.
///
/// When an instance is added with an identifier, either can be used to retrieve the other.
///
/// Added instances are added as a weak reference and a strong reference. When the strong
/// reference is removed and the weak reference is deallocated,`InteractiveMediaAdsLibraryPigeonInternalFinalizerDelegate.onDeinit`
/// is called with the instance's identifier. However, if the strong reference is removed and then the identifier is
/// retrieved with the intention to pass the identifier to Dart (e.g. by calling `identifierWithStrongReference`),
/// the strong reference to the instance is re-added. The strong reference will then need to be removed manually
/// again.
///
/// Accessing and inserting to an InstanceManager is thread safe.
final class InteractiveMediaAdsLibraryPigeonInstanceManager {
  // Identifiers are locked to a specific range to avoid collisions with objects
  // created simultaneously from Dart.
  // Host uses identifiers >= 2^16 and Dart is expected to use values n where,
  // 0 <= n < 2^16.
  private static let minHostCreatedIdentifier: Int64 = 65536

  private let lockQueue = DispatchQueue(label: "InteractiveMediaAdsLibraryPigeonInstanceManager")
  private let identifiers: NSMapTable<AnyObject, NSNumber> = NSMapTable(
    keyOptions: [.weakMemory, .objectPointerPersonality], valueOptions: .strongMemory)
  private let weakInstances: NSMapTable<NSNumber, AnyObject> = NSMapTable(
    keyOptions: .strongMemory, valueOptions: [.weakMemory, .objectPointerPersonality])
  private let strongInstances: NSMapTable<NSNumber, AnyObject> = NSMapTable(
    keyOptions: .strongMemory, valueOptions: [.strongMemory, .objectPointerPersonality])
  private let finalizerDelegate: InteractiveMediaAdsLibraryPigeonInternalFinalizerDelegate
  private var nextIdentifier: Int64 = minHostCreatedIdentifier

  public init(finalizerDelegate: InteractiveMediaAdsLibraryPigeonInternalFinalizerDelegate) {
    self.finalizerDelegate = finalizerDelegate
  }

  /// Adds a new instance that was instantiated from Dart.
  ///
  /// The same instance can be added multiple times, but each identifier must be unique. This allows
  /// two objects that are equivalent (e.g. conforms to `Equatable`)  to both be added.
  ///
  /// - Parameters:
  ///   - instance: the instance to be stored
  ///   - identifier: the identifier to be paired with instance. This value must be >= 0 and unique
  func addDartCreatedInstance(_ instance: AnyObject, withIdentifier identifier: Int64) {
    lockQueue.async {
      self.addInstance(instance, withIdentifier: identifier)
    }
  }

  /// Adds a new instance that was instantiated from the host platform.
  ///
  /// - Parameters:
  ///   - instance: the instance to be stored. This must be unique to all other added instances.
  /// - Returns: the unique identifier (>= 0) stored with instance
  func addHostCreatedInstance(_ instance: AnyObject) -> Int64 {
    assert(!containsInstance(instance), "Instance of \(instance) has already been added.")
    var identifier: Int64 = -1
    lockQueue.sync {
      identifier = nextIdentifier
      nextIdentifier += 1
      self.addInstance(instance, withIdentifier: identifier)
    }
    return identifier
  }

  /// Removes `instanceIdentifier` and its associated strongly referenced instance, if present, from the manager.
  ///
  /// - Parameters:
  ///   - instanceIdentifier: the identifier paired to an instance.
  /// - Returns: removed instance if the manager contains the given identifier, otherwise `nil` if
  ///   the manager doesn't contain the value
  func removeInstance<T: AnyObject>(withIdentifier instanceIdentifier: Int64) throws -> T? {
    var instance: AnyObject? = nil
    lockQueue.sync {
      instance = strongInstances.object(forKey: NSNumber(value: instanceIdentifier))
      strongInstances.removeObject(forKey: NSNumber(value: instanceIdentifier))
    }
    return instance as? T
  }

  /// Retrieves the instance associated with identifier.
  ///
  /// - Parameters:
  ///   - instanceIdentifier: the identifier associated with an instance
  /// - Returns: the instance associated with `instanceIdentifier` if the manager contains the value, otherwise
  ///   `nil` if the manager doesn't contain the value
  func instance<T: AnyObject>(forIdentifier instanceIdentifier: Int64) -> T? {
    var instance: AnyObject? = nil
    lockQueue.sync {
      instance = weakInstances.object(forKey: NSNumber(value: instanceIdentifier))
    }
    return instance as? T
  }

  private func addInstance(_ instance: AnyObject, withIdentifier identifier: Int64) {
    assert(identifier >= 0)
    assert(
      weakInstances.object(forKey: identifier as NSNumber) == nil,
      "Identifier has already been added: \(identifier)")
    identifiers.setObject(NSNumber(value: identifier), forKey: instance)
    weakInstances.setObject(instance, forKey: NSNumber(value: identifier))
    strongInstances.setObject(instance, forKey: NSNumber(value: identifier))
    InteractiveMediaAdsLibraryPigeonInternalFinalizer.attach(to: instance, identifier: identifier, delegate: finalizerDelegate)
  }

  /// Retrieves the identifier paired with an instance.
  ///
  /// If the manager contains a strong reference to `instance`, it will return the identifier
  /// associated with `instance`. If the manager contains only a weak reference to `instance`, a new
  /// strong reference to `instance` will be added and will need to be removed again with `removeInstance`.
  ///
  /// If this method returns a nonnull identifier, this method also expects the Dart
  /// `InteractiveMediaAdsLibraryPigeonInstanceManager` to have, or recreate, a weak reference to the Dart instance the
  /// identifier is associated with.
  ///
  /// - Parameters:
  ///   - instance: an instance that may be stored in the manager
  /// - Returns: the identifier associated with `instance` if the manager contains the value, otherwise
  ///   `nil` if the manager doesn't contain the value
  func identifierWithStrongReference(forInstance instance: AnyObject) -> Int64? {
    var identifier: Int64? = nil
    lockQueue.sync {
      if let existingIdentifier = identifiers.object(forKey: instance)?.int64Value {
        strongInstances.setObject(instance, forKey: NSNumber(value: existingIdentifier))
        identifier = existingIdentifier
      }
    }
    return identifier
  }

  /// Whether this manager contains the given `instance`.
  ///
  /// - Parameters:
  ///   - instance: the instance whose presence in this manager is to be tested
  /// - Returns: whether this manager contains the given `instance`
  func containsInstance(_ instance: AnyObject) -> Bool {
    var containsInstance = false
    lockQueue.sync {
      containsInstance = identifiers.object(forKey: instance) != nil
    }
    return containsInstance
  }

  /// Removes all of the instances from this manager.
  ///
  /// The manager will be empty after this call returns.
  func removeAllObjects() throws {
    lockQueue.sync {
      let weakInstancesEnumerator = weakInstances.objectEnumerator()!
      while let instance = weakInstancesEnumerator.nextObject() {
        InteractiveMediaAdsLibraryPigeonInternalFinalizer.detach(from: instance as AnyObject)
      }
      identifiers.removeAllObjects()
      weakInstances.removeAllObjects()
      strongInstances.removeAllObjects()
      nextIdentifier = InteractiveMediaAdsLibraryPigeonInstanceManager.minHostCreatedIdentifier
    }
  }

  /// The number of instances stored as a strong reference.
  ///
  /// For debugging and testing purposes.
  internal var strongInstanceCount: Int {
    var count: Int = 0
    lockQueue.sync {
      count = strongInstances.count
    }
    return count
  }

  /// The number of instances stored as a weak reference.
  ///
  /// For debugging and testing purposes. NSMapTables that store keys or objects as weak
  /// reference will be reclaimed non-deterministically.
  internal var weakInstanceCount: Int {
    var count: Int = 0
    lockQueue.sync {
      count = weakInstances.count
    }
    return count
  }
}


private class InteractiveMediaAdsLibraryPigeonInstanceManagerApi {
  /// The codec used for serializing messages.
  var codec: FlutterStandardMessageCodec { InteractiveMediaAdsLibraryPigeonCodec.shared }

  /// Handles sending and receiving messages with Dart.
  unowned let binaryMessenger: FlutterBinaryMessenger

  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }

  /// Sets up an instance of `InteractiveMediaAdsLibraryPigeonInstanceManagerApi` to handle messages through the `binaryMessenger`.
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, instanceManager: InteractiveMediaAdsLibraryPigeonInstanceManager?) {
    let codec = InteractiveMediaAdsLibraryPigeonCodec.shared
    let removeStrongReferenceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.PigeonInternalInstanceManager.removeStrongReference", binaryMessenger: binaryMessenger, codec: codec)
    if let instanceManager = instanceManager {
      removeStrongReferenceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let identifierArg = args[0] as! Int64
        do {
          let _: AnyObject? = try instanceManager.removeInstance(withIdentifier: identifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeStrongReferenceChannel.setMessageHandler(nil)
    }
    let clearChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.PigeonInternalInstanceManager.clear", binaryMessenger: binaryMessenger, codec: codec)
    if let instanceManager = instanceManager {
      clearChannel.setMessageHandler { _, reply in
        do {
          try instanceManager.removeAllObjects()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      clearChannel.setMessageHandler(nil)
    }
  }

  /// Sends a message to the Dart `InstanceManager` to remove the strong reference of the instance associated with `identifier`.
  func removeStrongReference(identifier identifierArg: Int64, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.PigeonInternalInstanceManager.removeStrongReference"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([identifierArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }
}
protocol InteractiveMediaAdsLibraryPigeonProxyApiDelegate {
  /// An implementation of [PigeonApiIMAAdDisplayContainer] used to add a new Dart instance of
  /// `IMAAdDisplayContainer` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdDisplayContainer(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdDisplayContainer
  /// An implementation of [PigeonApiUIView] used to add a new Dart instance of
  /// `UIView` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiUIView(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiUIView
  /// An implementation of [PigeonApiUIViewController] used to add a new Dart instance of
  /// `UIViewController` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiUIViewController(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiUIViewController
  /// An implementation of [PigeonApiIMAContentPlayhead] used to add a new Dart instance of
  /// `IMAContentPlayhead` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAContentPlayhead(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAContentPlayhead
  /// An implementation of [PigeonApiIMAAdsLoader] used to add a new Dart instance of
  /// `IMAAdsLoader` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdsLoader(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdsLoader
  /// An implementation of [PigeonApiIMASettings] used to add a new Dart instance of
  /// `IMASettings` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMASettings(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMASettings
  /// An implementation of [PigeonApiIMAAdsRequest] used to add a new Dart instance of
  /// `IMAAdsRequest` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdsRequest(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdsRequest
  /// An implementation of [PigeonApiIMAAdsLoaderDelegate] used to add a new Dart instance of
  /// `IMAAdsLoaderDelegate` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdsLoaderDelegate(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdsLoaderDelegate
  /// An implementation of [PigeonApiIMAAdsLoadedData] used to add a new Dart instance of
  /// `IMAAdsLoadedData` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdsLoadedData(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdsLoadedData
  /// An implementation of [PigeonApiIMAAdLoadingErrorData] used to add a new Dart instance of
  /// `IMAAdLoadingErrorData` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdLoadingErrorData(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdLoadingErrorData
  /// An implementation of [PigeonApiIMAAdError] used to add a new Dart instance of
  /// `IMAAdError` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdError(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdError
  /// An implementation of [PigeonApiIMAAdsManager] used to add a new Dart instance of
  /// `IMAAdsManager` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdsManager(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdsManager
  /// An implementation of [PigeonApiIMAAdsManagerDelegate] used to add a new Dart instance of
  /// `IMAAdsManagerDelegate` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdsManagerDelegate(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdsManagerDelegate
  /// An implementation of [PigeonApiIMAAdEvent] used to add a new Dart instance of
  /// `IMAAdEvent` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdEvent(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdEvent
  /// An implementation of [PigeonApiIMAAdsRenderingSettings] used to add a new Dart instance of
  /// `IMAAdsRenderingSettings` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdsRenderingSettings(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdsRenderingSettings
  /// An implementation of [PigeonApiNSObject] used to add a new Dart instance of
  /// `NSObject` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiNSObject(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiNSObject
  /// An implementation of [PigeonApiIMAFriendlyObstruction] used to add a new Dart instance of
  /// `IMAFriendlyObstruction` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAFriendlyObstruction(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAFriendlyObstruction
  /// An implementation of [PigeonApiIMACompanionAd] used to add a new Dart instance of
  /// `IMACompanionAd` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMACompanionAd(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMACompanionAd
  /// An implementation of [PigeonApiIMACompanionAdSlot] used to add a new Dart instance of
  /// `IMACompanionAdSlot` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMACompanionAdSlot(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMACompanionAdSlot
  /// An implementation of [PigeonApiIMACompanionDelegate] used to add a new Dart instance of
  /// `IMACompanionDelegate` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMACompanionDelegate(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMACompanionDelegate
  /// An implementation of [PigeonApiIMAAdPodInfo] used to add a new Dart instance of
  /// `IMAAdPodInfo` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAdPodInfo(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAdPodInfo
  /// An implementation of [PigeonApiIMAAd] used to add a new Dart instance of
  /// `IMAAd` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAAd(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAAd
  /// An implementation of [PigeonApiIMAUniversalAdID] used to add a new Dart instance of
  /// `IMAUniversalAdID` to the Dart `InstanceManager` and make calls to Dart.
  func pigeonApiIMAUniversalAdID(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiIMAUniversalAdID
}

extension InteractiveMediaAdsLibraryPigeonProxyApiDelegate {
  func pigeonApiNSObject(_ registrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) -> PigeonApiNSObject {
    return PigeonApiNSObject(pigeonRegistrar: registrar, delegate: PigeonApiDelegateNSObject())
  }
}

open class InteractiveMediaAdsLibraryPigeonProxyApiRegistrar {
  let binaryMessenger: FlutterBinaryMessenger
  let apiDelegate: InteractiveMediaAdsLibraryPigeonProxyApiDelegate
  let instanceManager: InteractiveMediaAdsLibraryPigeonInstanceManager
  /// Whether APIs should ignore calling to Dart.
  public var ignoreCallsToDart = false
  private var _codec: FlutterStandardMessageCodec?
  var codec: FlutterStandardMessageCodec {
    if _codec == nil {
      _codec = FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: self))
    }
    return _codec!
  }

  private class InstanceManagerApiFinalizerDelegate: InteractiveMediaAdsLibraryPigeonInternalFinalizerDelegate {
    let api: InteractiveMediaAdsLibraryPigeonInstanceManagerApi

    init(_ api: InteractiveMediaAdsLibraryPigeonInstanceManagerApi) {
      self.api = api
    }

    public func onDeinit(identifier: Int64) {
      api.removeStrongReference(identifier: identifier) {
        _ in
      }
    }
  }

  init(binaryMessenger: FlutterBinaryMessenger, apiDelegate: InteractiveMediaAdsLibraryPigeonProxyApiDelegate) {
    self.binaryMessenger = binaryMessenger
    self.apiDelegate = apiDelegate
    self.instanceManager = InteractiveMediaAdsLibraryPigeonInstanceManager(
      finalizerDelegate: InstanceManagerApiFinalizerDelegate(
        InteractiveMediaAdsLibraryPigeonInstanceManagerApi(binaryMessenger: binaryMessenger)))
  }

  func setUp() {
    InteractiveMediaAdsLibraryPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, instanceManager: instanceManager)
    PigeonApiIMAAdDisplayContainer.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMAAdDisplayContainer(self))
    PigeonApiUIView.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiUIView(self))
    PigeonApiUIViewController.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiUIViewController(self))
    PigeonApiIMAContentPlayhead.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMAContentPlayhead(self))
    PigeonApiIMAAdsLoader.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMAAdsLoader(self))
    PigeonApiIMASettings.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMASettings(self))
    PigeonApiIMAAdsRequest.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMAAdsRequest(self))
    PigeonApiIMAAdsLoaderDelegate.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMAAdsLoaderDelegate(self))
    PigeonApiIMAAdsManager.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMAAdsManager(self))
    PigeonApiIMAAdsManagerDelegate.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMAAdsManagerDelegate(self))
    PigeonApiIMAAdsRenderingSettings.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMAAdsRenderingSettings(self))
    PigeonApiIMAFriendlyObstruction.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMAFriendlyObstruction(self))
    PigeonApiIMACompanionAdSlot.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMACompanionAdSlot(self))
    PigeonApiIMACompanionDelegate.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: apiDelegate.pigeonApiIMACompanionDelegate(self))
  }
  func tearDown() {
    InteractiveMediaAdsLibraryPigeonInstanceManagerApi.setUpMessageHandlers(binaryMessenger: binaryMessenger, instanceManager: nil)
    PigeonApiIMAAdDisplayContainer.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiUIView.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiUIViewController.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMAContentPlayhead.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMAAdsLoader.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMASettings.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMAAdsRequest.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMAAdsLoaderDelegate.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMAAdsManager.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMAAdsManagerDelegate.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMAAdsRenderingSettings.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMAFriendlyObstruction.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMACompanionAdSlot.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
    PigeonApiIMACompanionDelegate.setUpMessageHandlers(binaryMessenger: binaryMessenger, api: nil)
  }
}
private class InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter: FlutterStandardReaderWriter {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar

  private class InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReader: InteractiveMediaAdsLibraryPigeonCodecReader {
    unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar

    init(data: Data, pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) {
      self.pigeonRegistrar = pigeonRegistrar
      super.init(data: data)
    }

    override func readValue(ofType type: UInt8) -> Any? {
      switch type {
      case 128:
        let identifier = self.readValue()
        let instance: AnyObject? = pigeonRegistrar.instanceManager.instance(
          forIdentifier: identifier is Int64 ? identifier as! Int64 : Int64(identifier as! Int32))
        if instance == nil {
          print("Failed to find instance with identifier: \(identifier!)")
        }
        return instance
      default:
        return super.readValue(ofType: type)
      }
    }
  }

  private class InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecWriter: InteractiveMediaAdsLibraryPigeonCodecWriter {
    unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar

    init(data: NSMutableData, pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) {
      self.pigeonRegistrar = pigeonRegistrar
      super.init(data: data)
    }

    override func writeValue(_ value: Any) {
      if value is [Any] || value is Bool || value is Data || value is [AnyHashable: Any] || value is Double || value is FlutterStandardTypedData || value is Int64 || value is String || value is AdErrorType || value is AdErrorCode || value is AdEventType || value is KeyValueObservingOptions || value is KeyValueChange || value is KeyValueChangeKey || value is FriendlyObstructionPurpose || value is UIElementType {
        super.writeValue(value)
        return
      }


      if let instance = value as? IMAAdDisplayContainer {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdDisplayContainer(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? UIView {
        pigeonRegistrar.apiDelegate.pigeonApiUIView(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? UIViewController {
        pigeonRegistrar.apiDelegate.pigeonApiUIViewController(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAContentPlayhead {
        pigeonRegistrar.apiDelegate.pigeonApiIMAContentPlayhead(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdsLoader {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdsLoader(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMASettings {
        pigeonRegistrar.apiDelegate.pigeonApiIMASettings(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdsRequest {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdsRequest(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdsLoaderDelegate {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdsLoaderDelegate(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdsLoadedData {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdsLoadedData(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdLoadingErrorData {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdLoadingErrorData(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdError {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdError(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdsManager {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdsManager(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdsManagerDelegate {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdsManagerDelegate(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdEvent {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdEvent(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdsRenderingSettings {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdsRenderingSettings(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAFriendlyObstruction {
        pigeonRegistrar.apiDelegate.pigeonApiIMAFriendlyObstruction(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMACompanionAd {
        pigeonRegistrar.apiDelegate.pigeonApiIMACompanionAd(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMACompanionAdSlot {
        pigeonRegistrar.apiDelegate.pigeonApiIMACompanionAdSlot(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMACompanionDelegate {
        pigeonRegistrar.apiDelegate.pigeonApiIMACompanionDelegate(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? NSObject {
        pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAdPodInfo {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAdPodInfo(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAAd {
        pigeonRegistrar.apiDelegate.pigeonApiIMAAd(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as? IMAUniversalAdID {
        pigeonRegistrar.apiDelegate.pigeonApiIMAUniversalAdID(pigeonRegistrar).pigeonNewInstance(
          pigeonInstance: instance
        ) { _ in }
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance as AnyObject)!)
        return
      }


      if let instance = value as AnyObject?, pigeonRegistrar.instanceManager.containsInstance(instance)
      {
        super.writeByte(128)
        super.writeValue(
          pigeonRegistrar.instanceManager.identifierWithStrongReference(forInstance: instance)!)
      } else {
        print("Unsupported value: \(value) of \(type(of: value))")
        assert(false, "Unsupported value for InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecWriter")
      }

    }
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar) {
    self.pigeonRegistrar = pigeonRegistrar
  }

  override func reader(with data: Data) -> FlutterStandardReader {
    return InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReader(data: data, pigeonRegistrar: pigeonRegistrar)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecWriter(data: data, pigeonRegistrar: pigeonRegistrar)
  }
}

/// Possible error types while loading or playing ads.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/ios/client-side/reference/Enums/IMAErrorType.html.
enum AdErrorType: Int {
  /// An error occurred while loading the ads.
  case loadingFailed = 0
  /// An error occurred while playing the ads.
  case adPlayingFailed = 1
  /// An unexpected error occurred while loading or playing the ads.
  ///
  /// This may mean that the SDK wasn’t loaded properly or the wrapper doesn't
  /// recognize this value.
  case unknown = 2
}

/// Possible error codes raised while loading or playing ads.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/ios/client-side/reference/Enums/IMAErrorCode.html.
enum AdErrorCode: Int {
  /// The ad slot is not visible on the page.
  case adslotNotVisible = 0
  /// Generic invalid usage of the API.
  case apiError = 1
  /// A companion ad failed to load or render.
  case companionAdLoadingFailed = 2
  /// Content playhead was not passed in, but list of ads has been returned from
  /// the server.
  case contentPlayheadMissing = 3
  /// There was an error loading the ad.
  case failedLoadingAd = 4
  /// There was a problem requesting ads from the server.
  case failedToRequestAds = 5
  /// Invalid arguments were provided to SDK methods.
  case invalidArguments = 6
  /// The version of the runtime is too old.
  case osRuntimeTooOld = 7
  /// Ads list response was malformed.
  case playlistMalformedResponse = 8
  /// Listener for at least one of the required vast events was not added.
  case requiredListenersNotAdded = 9
  /// There was an error initializing the stream.
  case streamInitializationFailed = 10
  /// An unexpected error occurred and the cause is not known.
  case unknownError = 11
  /// No assets were found in the VAST ad response.
  case vastAssetNotFound = 12
  /// A VAST response containing a single `<VAST>` tag with no child tags.
  case vastEmptyResponse = 13
  /// At least one VAST wrapper loaded and a subsequent wrapper or inline ad
  /// load has resulted in a 404 response code.
  case vastInvalidUrl = 14
  /// Assets were found in the VAST ad response for a linear ad, but none of
  /// them matched the video player's capabilities.
  case vastLinearAssetMismatch = 15
  /// The VAST URI provided, or a VAST URI provided in a subsequent Wrapper
  /// element, was either unavailable or reached a timeout, as defined by the
  /// video player.
  case vastLoadTimeout = 16
  /// The ad response was not recognized as a valid VAST ad.
  case vastMalformedResponse = 17
  /// Failed to load media assets from a VAST response.
  case vastMediaLoadTimeout = 18
  /// The maximum number of VAST wrapper redirects has been reached.
  case vastTooManyRedirects = 19
  /// Trafficking error.
  ///
  /// Video player received an ad type that it was not expecting and/or cannot
  /// display.
  case vastTraffickingError = 20
  /// Another VideoAdsManager is still using the video.
  case videoElementUsed = 21
  /// A video element was not specified where it was required.
  case videoElementRequired = 22
  /// There was an error playing the video ad.
  case videoPlayError = 23
}

/// Different event types sent by the IMAAdsManager to its delegate.
///
/// See https://developers.google.com/interactive-media-ads/docs/sdks/ios/client-side/reference/Enums/IMAAdEventType.html.
enum AdEventType: Int {
  /// Fired the first time each ad break ends.
  case adBreakEnded = 0
  /// Fired when an ad break will not play back any ads.
  case adBreakFetchError = 1
  /// Fired when an ad break is ready.
  case adBreakReady = 2
  /// Fired first time each ad break begins playback.
  case adBreakStarted = 3
  /// Fired every time the stream switches from advertising or slate to content.
  case adPeriodEnded = 4
  /// Fired every time the stream switches from content to advertising or slate.
  case adPeriodStarted = 5
  /// All valid ads managed by the ads manager have completed or the ad response
  /// did not return any valid ads.
  case allAdsCompleted = 6
  /// Fired when an ad is clicked.
  case clicked = 7
  /// Single ad has finished.
  case completed = 8
  /// Cuepoints changed for VOD stream (only used for dynamic ad insertion).
  case cuepointsChanged = 9
  /// First quartile of a linear ad was reached.
  case firstQuartile = 10
  /// The user has closed the icon fallback image dialog.
  case iconFallbackImageClosed = 11
  /// The user has tapped an ad icon.
  case iconTapped = 12
  /// An ad was loaded.
  case loaded = 13
  /// A log event for the ads being played.
  case log = 14
  /// Midpoint of a linear ad was reached.
  case midpoint = 15
  /// Ad paused.
  case pause = 16
  /// Ad resumed.
  case resume = 17
  /// Fired when an ad was skipped.
  case skipped = 18
  /// Fired when an ad starts playing.
  case started = 19
  /// Stream request has loaded (only used for dynamic ad insertion).
  case streamLoaded = 20
  /// Stream has started playing (only used for dynamic ad insertion).
  case streamStarted = 21
  /// Ad tapped.
  case tapped = 22
  /// Third quartile of a linear ad was reached..
  case thirdQuartile = 23
  /// The event type is not recognized by this wrapper.
  case unknown = 24
}

/// The values that can be returned in a change dictionary.
///
/// See https://developer.apple.com/documentation/foundation/nskeyvalueobservingoptions?language=objc.
enum KeyValueObservingOptions: Int {
  /// Indicates that the change dictionary should provide the new attribute
  /// value, if applicable.
  case newValue = 0
  /// Indicates that the change dictionary should contain the old attribute
  /// value, if applicable.
  case oldValue = 1
  /// If specified, a notification should be sent to the observer immediately,
  /// before the observer registration method even returns.
  case initialValue = 2
  /// Whether separate notifications should be sent to the observer before and
  /// after each change, instead of a single notification after the change.
  case priorNotification = 3
}

/// The kinds of changes that can be observed..
///
/// See https://developer.apple.com/documentation/foundation/nskeyvaluechange?language=objc.
enum KeyValueChange: Int {
  /// Indicates that the value of the observed key path was set to a new value.
  case setting = 0
  /// Indicates that an object has been inserted into the to-many relationship
  /// that is being observed.
  case insertion = 1
  /// Indicates that an object has been removed from the to-many relationship
  /// that is being observed.
  case removal = 2
  /// Indicates that an object has been replaced in the to-many relationship
  /// that is being observed.
  case replacement = 3
}

/// The keys that can appear in the change dictionary..
///
/// See https://developer.apple.com/documentation/foundation/nskeyvaluechangekey?language=objc.
enum KeyValueChangeKey: Int {
  /// If the value of the kindKey entry is NSKeyValueChange.insertion,
  /// NSKeyValueChange.removal, or NSKeyValueChange.replacement, the value of
  /// this key is an NSIndexSet object that contains the indexes of the
  /// inserted, removed, or replaced objects.
  case indexes = 0
  /// An NSNumber object that contains a value corresponding to one of the
  /// NSKeyValueChange enums, indicating what sort of change has occurred.
  case kind = 1
  /// If the value of the kindKey entry is NSKeyValueChange.setting, and new was
  /// specified when the observer was registered, the value of this key is the
  /// new value for the attribute.
  case newValue = 2
  /// If the prior option was specified when the observer was registered this
  /// notification is sent prior to a change.
  case notificationIsPrior = 3
  /// If the value of the kindKey entry is NSKeyValueChange.setting, and old was
  /// specified when the observer was registered, the value of this key is the
  /// value before the attribute was changed.
  case oldValue = 4
  /// The key is not recognized by this wrapper.
  case unknown = 5
}

/// A list of purposes for which an obstruction would be registered as friendly.
///
/// See https://developers.google.com/ad-manager/dynamic-ad-insertion/sdk/ios/reference/Enums/IMAFriendlyObstructionPurpose.html.
enum FriendlyObstructionPurpose: Int {
  case mediaControls = 0
  case closeAd = 1
  case notVisible = 2
  case other = 3
  /// The purpose type is not recognized by this wrapper.
  case unknown = 4
}

/// Different UI elements that can be customized.
///
/// See https://developers.google.com/ad-manager/dynamic-ad-insertion/sdk/ios/reference/Enums/IMAUiElementType.html.
enum UIElementType: Int {
  /// Ad attribution UI element.
  case adAttribution = 0
  /// Ad countdown element.
  case countdown = 1
  /// The element is not recognized by this wrapper.
  case unknown = 2
}

private class InteractiveMediaAdsLibraryPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return AdErrorType(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return AdErrorCode(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return AdEventType(rawValue: enumResultAsInt)
      }
      return nil
    case 132:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return KeyValueObservingOptions(rawValue: enumResultAsInt)
      }
      return nil
    case 133:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return KeyValueChange(rawValue: enumResultAsInt)
      }
      return nil
    case 134:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return KeyValueChangeKey(rawValue: enumResultAsInt)
      }
      return nil
    case 135:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return FriendlyObstructionPurpose(rawValue: enumResultAsInt)
      }
      return nil
    case 136:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return UIElementType(rawValue: enumResultAsInt)
      }
      return nil
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class InteractiveMediaAdsLibraryPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AdErrorType {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? AdErrorCode {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? AdEventType {
      super.writeByte(131)
      super.writeValue(value.rawValue)
    } else if let value = value as? KeyValueObservingOptions {
      super.writeByte(132)
      super.writeValue(value.rawValue)
    } else if let value = value as? KeyValueChange {
      super.writeByte(133)
      super.writeValue(value.rawValue)
    } else if let value = value as? KeyValueChangeKey {
      super.writeByte(134)
      super.writeValue(value.rawValue)
    } else if let value = value as? FriendlyObstructionPurpose {
      super.writeByte(135)
      super.writeValue(value.rawValue)
    } else if let value = value as? UIElementType {
      super.writeByte(136)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class InteractiveMediaAdsLibraryPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return InteractiveMediaAdsLibraryPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return InteractiveMediaAdsLibraryPigeonCodecWriter(data: data)
  }
}

class InteractiveMediaAdsLibraryPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = InteractiveMediaAdsLibraryPigeonCodec(readerWriter: InteractiveMediaAdsLibraryPigeonCodecReaderWriter())
}

protocol PigeonApiDelegateIMAAdDisplayContainer {
  /// Initializes IMAAdDisplayContainer for rendering the ad and displaying the
  /// sad UI.
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdDisplayContainer, adContainer: UIView, companionSlots: [IMACompanionAdSlot]?, adContainerViewController: UIViewController?) throws -> IMAAdDisplayContainer
  /// View containing the video display and ad related UI.
  ///
  /// This view must be present in the view hierarchy in order to make ad or
  /// stream requests.
  func adContainer(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer) throws -> UIView
  /// List of companion ad slots.
  func companionSlots(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer) throws -> [IMACompanionAdSlot]?
  /// View controller containing the ad container.
  func setAdContainerViewController(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer, controller: UIViewController?) throws
  /// View controller containing the ad container.
  func getAdContainerViewController(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer) throws -> UIViewController?
  /// Registers a view that overlays or obstructs this container as “friendly”
  /// for viewability measurement purposes.
  func registerFriendlyObstruction(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer, friendlyObstruction: IMAFriendlyObstruction) throws
  /// Unregisters all previously registered friendly obstructions.
  func unregisterAllFriendlyObstructions(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer) throws
}

protocol PigeonApiProtocolIMAAdDisplayContainer {
}

final class PigeonApiIMAAdDisplayContainer: PigeonApiProtocolIMAAdDisplayContainer  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdDisplayContainer
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdDisplayContainer) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMAAdDisplayContainer?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdDisplayContainer.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let adContainerArg = args[1] as! UIView
        let companionSlotsArg: [IMACompanionAdSlot]? = nilOrValue(args[2])
        let adContainerViewControllerArg: UIViewController? = nilOrValue(args[3])
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api, adContainer: adContainerArg, companionSlots: companionSlotsArg, adContainerViewController: adContainerViewControllerArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
    let setAdContainerViewControllerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdDisplayContainer.setAdContainerViewController", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAdContainerViewControllerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdDisplayContainer
        let controllerArg: UIViewController? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setAdContainerViewController(pigeonApi: api, pigeonInstance: pigeonInstanceArg, controller: controllerArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAdContainerViewControllerChannel.setMessageHandler(nil)
    }
    let getAdContainerViewControllerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdDisplayContainer.getAdContainerViewController", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAdContainerViewControllerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdDisplayContainer
        do {
          let result = try api.pigeonDelegate.getAdContainerViewController(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAdContainerViewControllerChannel.setMessageHandler(nil)
    }
    let registerFriendlyObstructionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdDisplayContainer.registerFriendlyObstruction", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerFriendlyObstructionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdDisplayContainer
        let friendlyObstructionArg = args[1] as! IMAFriendlyObstruction
        do {
          try api.pigeonDelegate.registerFriendlyObstruction(pigeonApi: api, pigeonInstance: pigeonInstanceArg, friendlyObstruction: friendlyObstructionArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      registerFriendlyObstructionChannel.setMessageHandler(nil)
    }
    let unregisterAllFriendlyObstructionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdDisplayContainer.unregisterAllFriendlyObstructions", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unregisterAllFriendlyObstructionsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdDisplayContainer
        do {
          try api.pigeonDelegate.unregisterAllFriendlyObstructions(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      unregisterAllFriendlyObstructionsChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMAAdDisplayContainer and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdDisplayContainer, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let adContainerArg = try! pigeonDelegate.adContainer(pigeonApi: self, pigeonInstance: pigeonInstance)
      let companionSlotsArg = try! pigeonDelegate.companionSlots(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdDisplayContainer.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, adContainerArg, companionSlotsArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation
import GoogleInteractiveMediaAds
import UIKit


/// ProxyApi implementation for `IMAAdDisplayContainer`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdDisplayContainerProxyAPIDelegate : PigeonApiDelegateIMAAdDisplayContainer {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdDisplayContainer, adContainer: UIView, companionSlots: [IMACompanionAdSlot]?, adContainerViewController: UIViewController?) throws -> IMAAdDisplayContainer {
    return IMAAdDisplayContainer(,adContainerViewController: adContainerViewController)
  }

  func adContainer(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer) throws -> UIView {
    return pigeonInstance.adContainer
  }

  func companionSlots(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer) throws -> [IMACompanionAdSlot]? {
    return pigeonInstance.companionSlots
  }

  func setAdContainerViewController(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer, controller: UIViewController?) throws {
    pigeonInstance.adContainerViewController = controller
  }

  func getAdContainerViewController(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer) throws -> UIViewController? {
    return pigeonInstance.adContainerViewController
  }

  func registerFriendlyObstruction(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer, friendlyObstruction: IMAFriendlyObstruction) throws {
    pigeonInstance.registerFriendlyObstruction(friendlyObstruction: friendlyObstruction)
  }

  func unregisterAllFriendlyObstructions(pigeonApi: PigeonApiIMAAdDisplayContainer, pigeonInstance: IMAAdDisplayContainer) throws {
    pigeonInstance.unregisterAllFriendlyObstructions()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import GoogleInteractiveMediaAds
import UIKit
import Flutter
import XCTest

@testable import interactive_media_ads

class AdDisplayContainerTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdDisplayContainer(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api, adContainer: TestView, companionSlots: [TestCompanionAdSlot], adContainerViewController: TestViewController)
    XCTAssertNotNil(instance)
  }

  func testAdContainer() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdDisplayContainer(registrar)

    let instance = TestAdDisplayContainer()
    let value = try? api.pigeonDelegate.adContainer(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adContainer)
  }

  func testCompanionSlots() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdDisplayContainer(registrar)

    let instance = TestAdDisplayContainer()
    let value = try? api.pigeonDelegate.companionSlots(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.companionSlots)
  }

  func testSetAdContainerViewController() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdDisplayContainer(registrar)

    let instance = TestAdDisplayContainer()
    let controller = TestViewController
    try? api.pigeonDelegate.setAdContainerViewController(pigeonApi: api, pigeonInstance: instance, controller: controller)

    XCTAssertEqual(instance.setAdContainerViewControllerArgs, [controller])
  }

  func testGetAdContainerViewController() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdDisplayContainer(registrar)

    let instance = TestAdDisplayContainer()
    let value = try? api.pigeonDelegate.getAdContainerViewController(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.getAdContainerViewControllerCalled)
    XCTAssertEqual(value, instance.getAdContainerViewController())
  }

  func testRegisterFriendlyObstruction() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdDisplayContainer(registrar)

    let instance = TestAdDisplayContainer()
    let friendlyObstruction = TestFriendlyObstruction
    try? api.pigeonDelegate.registerFriendlyObstruction(pigeonApi: api, pigeonInstance: instance, friendlyObstruction: friendlyObstruction)

    XCTAssertEqual(instance.registerFriendlyObstructionArgs, [friendlyObstruction])
  }

  func testUnregisterAllFriendlyObstructions() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdDisplayContainer(registrar)

    let instance = TestAdDisplayContainer()
    try? api.pigeonDelegate.unregisterAllFriendlyObstructions(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.unregisterAllFriendlyObstructionsCalled)
  }

}
class TestAdDisplayContainer: IMAAdDisplayContainer {
  private var adContainerTestValue = TestView
  private var companionSlotsTestValue = [TestCompanionAdSlot]
  var setAdContainerViewControllerArgs: [AnyHashable?]? = nil
  var getAdContainerViewControllerCalled = false
  var registerFriendlyObstructionArgs: [AnyHashable?]? = nil
  var unregisterAllFriendlyObstructionsCalled = false

  override var adContainer: UIView {
    return adContainerTestValue
  }
  override var companionSlots: [IMACompanionAdSlot] {
    return companionSlotsTestValue
  }

  override func setAdContainerViewController() {
    setAdContainerViewControllerArgs = [controller]
  }
  override func getAdContainerViewController() {
    getAdContainerViewControllerCalled = true
  }
  override func registerFriendlyObstruction() {
    registerFriendlyObstructionArgs = [friendlyObstruction]
  }
  override func unregisterAllFriendlyObstructions() {
    unregisterAllFriendlyObstructionsCalled = true
  }
}
*/

protocol PigeonApiDelegateUIView {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiUIView) throws -> UIView
}

protocol PigeonApiProtocolUIView {
}

final class PigeonApiUIView: PigeonApiProtocolUIView  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateUIView
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateUIView) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiUIView?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.UIView.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of UIView and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: UIView, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.UIView.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation
import UIKit


/// ProxyApi implementation for `UIView`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class ViewProxyAPIDelegate : PigeonApiDelegateUIView {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiUIView) throws -> UIView {
    return UIView()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import UIKit
import Flutter
import XCTest

@testable import interactive_media_ads

class ViewTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiUIView(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api )
    XCTAssertNotNil(instance)
  }

}
*/

protocol PigeonApiDelegateUIViewController {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiUIViewController) throws -> UIViewController
  /// Retrieves the view that the controller manages.
  ///
  /// For convenience this is a `final` attached field despite this being
  /// settable. Since this is not a part of the IMA SDK this is slightly changed
  /// for convenience. Note that this wrapper should not add the ability to set
  /// this property as it should not be needed anyways.
  func view(pigeonApi: PigeonApiUIViewController, pigeonInstance: UIViewController) throws -> UIView
}

protocol PigeonApiProtocolUIViewController {
  /// Notifies the view controller that its view was added to a view hierarchy.
  func viewDidAppear(pigeonInstance pigeonInstanceArg: UIViewController, animated animatedArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
}

final class PigeonApiUIViewController: PigeonApiProtocolUIViewController  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateUIViewController
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateUIViewController) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiUIViewController?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.UIViewController.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
    let viewChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.UIViewController.view", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      viewChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! UIViewController
        let pigeonIdentifierArg = args[1] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(try api.pigeonDelegate.view(pigeonApi: api, pigeonInstance: pigeonInstanceArg), withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      viewChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of UIViewController and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: UIViewController, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.UIViewController.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
  /// Notifies the view controller that its view was added to a view hierarchy.
  func viewDidAppear(pigeonInstance pigeonInstanceArg: UIViewController, animated animatedArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)   {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
      return
    }
    let binaryMessenger = pigeonRegistrar.binaryMessenger
    let codec = pigeonRegistrar.codec
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.UIViewController.viewDidAppear"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pigeonInstanceArg, animatedArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }

}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation
import UIKit

/// Implementation of `UIViewController` that calls to Dart in callback methods.
class ViewControllerImpl: UIViewController {
  let api: PigeonApiProtocolUIViewController

  init(api: PigeonApiProtocolUIViewController) {
    self.api = api
  }

  func fixMe() {
    api.viewDidAppear(pigeonInstance: self, animated: animated) {  _ in }
  }
}

/// ProxyApi implementation for `UIViewController`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class ViewControllerProxyAPIDelegate : PigeonApiDelegateUIViewController {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiUIViewController) throws -> UIViewController {
    return UIViewControllerImpl(api: pigeonApi)
  }

  func view(pigeonApi: PigeonApiUIViewController, pigeonInstance: UIViewController): UIView {
    return pigeonInstance.view
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import UIKit
import Flutter
import XCTest

@testable import interactive_media_ads

class ViewControllerTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiUIViewController(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api )
    XCTAssertNotNil(instance)
  }

  func testView() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiUIViewController(registrar)

    let instance = TestViewController()
    let value = try? api.pigeonDelegate.view(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.view)
  }

  func testViewDidAppear() {
    let api = TestViewControllerApi()
    let instance = ViewControllerImpl(api: api)
    let animated = true
    instance.viewDidAppear(animated: animated)

    XCTAssertEqual(api.viewDidAppearArgs, [animated])
  }

}
class TestViewController: UIViewController {
  private var viewTestValue = TestView

  override var view: UIView {
    return viewTestValue
  }

}
class TestViewControllerApi: PigeonApiProtocolUIViewController {
  var viewDidAppearArgs: [AnyHashable?]? = nil

  func viewDidAppear(animated: Bool) throws {
    viewDidAppearArgs = [animatedArg]
  }
}
*/

protocol PigeonApiDelegateIMAContentPlayhead {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAContentPlayhead) throws -> IMAContentPlayhead
  /// Reflects the current playback time in seconds for the content.
  func setCurrentTime(pigeonApi: PigeonApiIMAContentPlayhead, pigeonInstance: IMAContentPlayhead, timeInterval: Double) throws
}

protocol PigeonApiProtocolIMAContentPlayhead {
}

final class PigeonApiIMAContentPlayhead: PigeonApiProtocolIMAContentPlayhead  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAContentPlayhead
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAContentPlayhead) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMAContentPlayhead?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAContentPlayhead.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
    let setCurrentTimeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAContentPlayhead.setCurrentTime", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCurrentTimeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAContentPlayhead
        let timeIntervalArg = args[1] as! Double
        do {
          try api.pigeonDelegate.setCurrentTime(pigeonApi: api, pigeonInstance: pigeonInstanceArg, timeInterval: timeIntervalArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setCurrentTimeChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMAContentPlayhead and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAContentPlayhead, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAContentPlayhead.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMAContentPlayhead`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class ContentPlayheadProxyAPIDelegate : PigeonApiDelegateIMAContentPlayhead {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAContentPlayhead) throws -> IMAContentPlayhead {
    return IMAContentPlayhead()
  }

  func setCurrentTime(pigeonApi: PigeonApiIMAContentPlayhead, pigeonInstance: IMAContentPlayhead, timeInterval: Double) throws {
    pigeonInstance.currentTime = timeInterval
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class ContentPlayheadTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAContentPlayhead(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api )
    XCTAssertNotNil(instance)
  }

  func testSetCurrentTime() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAContentPlayhead(registrar)

    let instance = TestContentPlayhead()
    let timeInterval = 1.0
    try? api.pigeonDelegate.setCurrentTime(pigeonApi: api, pigeonInstance: instance, timeInterval: timeInterval)

    XCTAssertEqual(instance.setCurrentTimeArgs, [timeInterval])
  }

}
class TestContentPlayhead: IMAContentPlayhead {
  var setCurrentTimeArgs: [AnyHashable?]? = nil


  override func setCurrentTime() {
    setCurrentTimeArgs = [timeInterval]
  }
}
*/

protocol PigeonApiDelegateIMAAdsLoader {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsLoader, settings: IMASettings?) throws -> IMAAdsLoader
  /// Signal to the SDK that the content has completed.
  func contentComplete(pigeonApi: PigeonApiIMAAdsLoader, pigeonInstance: IMAAdsLoader) throws
  /// Request ads from the ad server.
  func requestAds(pigeonApi: PigeonApiIMAAdsLoader, pigeonInstance: IMAAdsLoader, request: IMAAdsRequest) throws
  /// Delegate that receives `IMAAdsLoaderDelegate` callbacks.
  ///
  /// Note that this sets to a `weak` property in Swift.
  func setDelegate(pigeonApi: PigeonApiIMAAdsLoader, pigeonInstance: IMAAdsLoader, delegate: IMAAdsLoaderDelegate?) throws
}

protocol PigeonApiProtocolIMAAdsLoader {
}

final class PigeonApiIMAAdsLoader: PigeonApiProtocolIMAAdsLoader  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdsLoader
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdsLoader) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMAAdsLoader?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsLoader.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let settingsArg: IMASettings? = nilOrValue(args[1])
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api, settings: settingsArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
    let contentCompleteChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsLoader.contentComplete", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      contentCompleteChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsLoader
        do {
          try api.pigeonDelegate.contentComplete(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      contentCompleteChannel.setMessageHandler(nil)
    }
    let requestAdsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsLoader.requestAds", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestAdsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsLoader
        let requestArg = args[1] as! IMAAdsRequest
        do {
          try api.pigeonDelegate.requestAds(pigeonApi: api, pigeonInstance: pigeonInstanceArg, request: requestArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      requestAdsChannel.setMessageHandler(nil)
    }
    let setDelegateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsLoader.setDelegate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDelegateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsLoader
        let delegateArg: IMAAdsLoaderDelegate? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setDelegate(pigeonApi: api, pigeonInstance: pigeonInstanceArg, delegate: delegateArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDelegateChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMAAdsLoader and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdsLoader, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsLoader.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMAAdsLoader`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdsLoaderProxyAPIDelegate : PigeonApiDelegateIMAAdsLoader {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsLoader, settings: IMASettings?) throws -> IMAAdsLoader {
    return IMAAdsLoader(,settings: settings)
  }

  func contentComplete(pigeonApi: PigeonApiIMAAdsLoader, pigeonInstance: IMAAdsLoader) throws {
    pigeonInstance.contentComplete()
  }

  func requestAds(pigeonApi: PigeonApiIMAAdsLoader, pigeonInstance: IMAAdsLoader, request: IMAAdsRequest) throws {
    pigeonInstance.requestAds(request: request)
  }

  func setDelegate(pigeonApi: PigeonApiIMAAdsLoader, pigeonInstance: IMAAdsLoader, delegate: IMAAdsLoaderDelegate?) throws {
    pigeonInstance.delegate = delegate
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class AdsLoaderTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsLoader(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api, settings: TestSettings)
    XCTAssertNotNil(instance)
  }

  func testContentComplete() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsLoader(registrar)

    let instance = TestAdsLoader()
    try? api.pigeonDelegate.contentComplete(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.contentCompleteCalled)
  }

  func testRequestAds() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsLoader(registrar)

    let instance = TestAdsLoader()
    let request = TestAdsRequest
    try? api.pigeonDelegate.requestAds(pigeonApi: api, pigeonInstance: instance, request: request)

    XCTAssertEqual(instance.requestAdsArgs, [request])
  }

  func testSetDelegate() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsLoader(registrar)

    let instance = TestAdsLoader()
    let delegate = TestAdsLoaderDelegate
    try? api.pigeonDelegate.setDelegate(pigeonApi: api, pigeonInstance: instance, delegate: delegate)

    XCTAssertEqual(instance.setDelegateArgs, [delegate])
  }

}
class TestAdsLoader: IMAAdsLoader {
  var contentCompleteCalled = false
  var requestAdsArgs: [AnyHashable?]? = nil
  var setDelegateArgs: [AnyHashable?]? = nil


  override func contentComplete() {
    contentCompleteCalled = true
  }
  override func requestAds() {
    requestAdsArgs = [request]
  }
  override func setDelegate() {
    setDelegateArgs = [delegate]
  }
}
*/

protocol PigeonApiDelegateIMASettings {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMASettings) throws -> IMASettings
  /// Publisher Provided Identification (PPID) sent with ads request.
  func setPPID(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, ppid: String?) throws
  /// Language specification used for localization.
  ///
  /// `language` must be formatted as a canonicalized IETF BCP 47 language
  /// identifier such as would be returned by `[NSLocale preferredLanguages]`.
  ///
  /// Setting this property after it has been sent to the IMAAdsLoader will be
  /// ignored and a warning will be logged.
  func setLanguage(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, language: String) throws
  /// Specifies maximum number of redirects after which subsequent redirects
  /// will be denied, and the ad load aborted.
  ///
  /// If the number of redirects exceeds `max`, the ad request will fail with
  /// error code 302.
  ///
  /// The default value is 4.
  func setMaxRedirects(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, max: Int64) throws
  /// Feature flags and their states.
  func setFeatureFlags(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, flags: [String: String]) throws
  /// Enable background audio playback for the SDK.
  ///
  /// The default value is false.
  func setEnableBackgroundPlayback(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, enabled: Bool) throws
  /// Specifies whether to automatically play VMAP and ad rules ad breaks.
  ///
  /// The default value is true.
  func setAutoPlayAdBreaks(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, autoPlay: Bool) throws
  /// Specifies whether to update the MPNowPlayingInfoCenter content with the
  /// title “Advertisement”.
  ///
  /// If disabled, MPNowPlayingInfoCenter is untouched.
  ///
  /// The default value is false.
  func setDisableNowPlayingInfo(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, disable: Bool) throws
  /// The partner specified video player that is integrating with the SDK.
  func setPlayerType(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, type: String?) throws
  /// The partner specified player version that is integrating with the SDK.
  func setPlayerVersion(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, version: String?) throws
  /// The session ID to identify a single user session.
  ///
  /// This should be a UUID.
  ///
  /// It is used exclusively for frequency capping across the user session.
  func setSessionID(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, sessionID: String?) throws
  /// Controls whether Same App Key is enabled.
  ///
  /// The value set persists across app sessions.
  ///
  /// The key is enabled by default.
  func setSameAppKeyEnabled(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, enabled: Bool) throws
  /// Toggles debug mode which will output detailed log information to the
  /// console.
  ///
  /// Debug mode should be disabled in Release and will display a watermark when
  /// enabled.
  ///
  /// The default value is false.
  func setEnableDebugMode(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, enable: Bool) throws
}

protocol PigeonApiProtocolIMASettings {
}

final class PigeonApiIMASettings: PigeonApiProtocolIMASettings  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMASettings
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMASettings) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMASettings?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
    let setPPIDChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setPPID", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setPPIDChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let ppidArg: String? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setPPID(pigeonApi: api, pigeonInstance: pigeonInstanceArg, ppid: ppidArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setPPIDChannel.setMessageHandler(nil)
    }
    let setLanguageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setLanguage", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLanguageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let languageArg = args[1] as! String
        do {
          try api.pigeonDelegate.setLanguage(pigeonApi: api, pigeonInstance: pigeonInstanceArg, language: languageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLanguageChannel.setMessageHandler(nil)
    }
    let setMaxRedirectsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setMaxRedirects", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setMaxRedirectsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let maxArg = args[1] as! Int64
        do {
          try api.pigeonDelegate.setMaxRedirects(pigeonApi: api, pigeonInstance: pigeonInstanceArg, max: maxArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setMaxRedirectsChannel.setMessageHandler(nil)
    }
    let setFeatureFlagsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setFeatureFlags", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setFeatureFlagsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let flagsArg = args[1] as! [String: String]
        do {
          try api.pigeonDelegate.setFeatureFlags(pigeonApi: api, pigeonInstance: pigeonInstanceArg, flags: flagsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setFeatureFlagsChannel.setMessageHandler(nil)
    }
    let setEnableBackgroundPlaybackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setEnableBackgroundPlayback", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setEnableBackgroundPlaybackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let enabledArg = args[1] as! Bool
        do {
          try api.pigeonDelegate.setEnableBackgroundPlayback(pigeonApi: api, pigeonInstance: pigeonInstanceArg, enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setEnableBackgroundPlaybackChannel.setMessageHandler(nil)
    }
    let setAutoPlayAdBreaksChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setAutoPlayAdBreaks", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAutoPlayAdBreaksChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let autoPlayArg = args[1] as! Bool
        do {
          try api.pigeonDelegate.setAutoPlayAdBreaks(pigeonApi: api, pigeonInstance: pigeonInstanceArg, autoPlay: autoPlayArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAutoPlayAdBreaksChannel.setMessageHandler(nil)
    }
    let setDisableNowPlayingInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setDisableNowPlayingInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDisableNowPlayingInfoChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let disableArg = args[1] as! Bool
        do {
          try api.pigeonDelegate.setDisableNowPlayingInfo(pigeonApi: api, pigeonInstance: pigeonInstanceArg, disable: disableArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDisableNowPlayingInfoChannel.setMessageHandler(nil)
    }
    let setPlayerTypeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setPlayerType", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setPlayerTypeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let typeArg: String? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setPlayerType(pigeonApi: api, pigeonInstance: pigeonInstanceArg, type: typeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setPlayerTypeChannel.setMessageHandler(nil)
    }
    let setPlayerVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setPlayerVersion", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setPlayerVersionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let versionArg: String? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setPlayerVersion(pigeonApi: api, pigeonInstance: pigeonInstanceArg, version: versionArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setPlayerVersionChannel.setMessageHandler(nil)
    }
    let setSessionIDChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setSessionID", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSessionIDChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let sessionIDArg: String? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setSessionID(pigeonApi: api, pigeonInstance: pigeonInstanceArg, sessionID: sessionIDArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSessionIDChannel.setMessageHandler(nil)
    }
    let setSameAppKeyEnabledChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setSameAppKeyEnabled", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSameAppKeyEnabledChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let enabledArg = args[1] as! Bool
        do {
          try api.pigeonDelegate.setSameAppKeyEnabled(pigeonApi: api, pigeonInstance: pigeonInstanceArg, enabled: enabledArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSameAppKeyEnabledChannel.setMessageHandler(nil)
    }
    let setEnableDebugModeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMASettings.setEnableDebugMode", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setEnableDebugModeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMASettings
        let enableArg = args[1] as! Bool
        do {
          try api.pigeonDelegate.setEnableDebugMode(pigeonApi: api, pigeonInstance: pigeonInstanceArg, enable: enableArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setEnableDebugModeChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMASettings and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMASettings, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMASettings.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMASettings`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class SettingsProxyAPIDelegate : PigeonApiDelegateIMASettings {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMASettings) throws -> IMASettings {
    return IMASettings()
  }

  func setPPID(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, ppid: String?) throws {
    pigeonInstance.pPID = ppid
  }

  func setLanguage(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, language: String) throws {
    pigeonInstance.language = language
  }

  func setMaxRedirects(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, max: Int64) throws {
    pigeonInstance.maxRedirects = max
  }

  func setFeatureFlags(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, flags: [String: String]) throws {
    pigeonInstance.featureFlags = flags
  }

  func setEnableBackgroundPlayback(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, enabled: Bool) throws {
    pigeonInstance.enableBackgroundPlayback = enabled
  }

  func setAutoPlayAdBreaks(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, autoPlay: Bool) throws {
    pigeonInstance.autoPlayAdBreaks = autoPlay
  }

  func setDisableNowPlayingInfo(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, disable: Bool) throws {
    pigeonInstance.disableNowPlayingInfo = disable
  }

  func setPlayerType(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, type: String?) throws {
    pigeonInstance.playerType = type
  }

  func setPlayerVersion(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, version: String?) throws {
    pigeonInstance.playerVersion = version
  }

  func setSessionID(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, sessionID: String?) throws {
    pigeonInstance.sessionID = sessionID
  }

  func setSameAppKeyEnabled(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, enabled: Bool) throws {
    pigeonInstance.sameAppKeyEnabled = enabled
  }

  func setEnableDebugMode(pigeonApi: PigeonApiIMASettings, pigeonInstance: IMASettings, enable: Bool) throws {
    pigeonInstance.enableDebugMode = enable
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class SettingsTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api )
    XCTAssertNotNil(instance)
  }

  func testSetPPID() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let ppid = "myString"
    try? api.pigeonDelegate.setPPID(pigeonApi: api, pigeonInstance: instance, ppid: ppid)

    XCTAssertEqual(instance.setPPIDArgs, [ppid])
  }

  func testSetLanguage() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let language = "myString"
    try? api.pigeonDelegate.setLanguage(pigeonApi: api, pigeonInstance: instance, language: language)

    XCTAssertEqual(instance.setLanguageArgs, [language])
  }

  func testSetMaxRedirects() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let max = 0
    try? api.pigeonDelegate.setMaxRedirects(pigeonApi: api, pigeonInstance: instance, max: max)

    XCTAssertEqual(instance.setMaxRedirectsArgs, [max])
  }

  func testSetFeatureFlags() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let flags = ["myString": "myString"]
    try? api.pigeonDelegate.setFeatureFlags(pigeonApi: api, pigeonInstance: instance, flags: flags)

    XCTAssertEqual(instance.setFeatureFlagsArgs, [flags])
  }

  func testSetEnableBackgroundPlayback() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let enabled = true
    try? api.pigeonDelegate.setEnableBackgroundPlayback(pigeonApi: api, pigeonInstance: instance, enabled: enabled)

    XCTAssertEqual(instance.setEnableBackgroundPlaybackArgs, [enabled])
  }

  func testSetAutoPlayAdBreaks() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let autoPlay = true
    try? api.pigeonDelegate.setAutoPlayAdBreaks(pigeonApi: api, pigeonInstance: instance, autoPlay: autoPlay)

    XCTAssertEqual(instance.setAutoPlayAdBreaksArgs, [autoPlay])
  }

  func testSetDisableNowPlayingInfo() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let disable = true
    try? api.pigeonDelegate.setDisableNowPlayingInfo(pigeonApi: api, pigeonInstance: instance, disable: disable)

    XCTAssertEqual(instance.setDisableNowPlayingInfoArgs, [disable])
  }

  func testSetPlayerType() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let type = "myString"
    try? api.pigeonDelegate.setPlayerType(pigeonApi: api, pigeonInstance: instance, type: type)

    XCTAssertEqual(instance.setPlayerTypeArgs, [type])
  }

  func testSetPlayerVersion() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let version = "myString"
    try? api.pigeonDelegate.setPlayerVersion(pigeonApi: api, pigeonInstance: instance, version: version)

    XCTAssertEqual(instance.setPlayerVersionArgs, [version])
  }

  func testSetSessionID() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let sessionID = "myString"
    try? api.pigeonDelegate.setSessionID(pigeonApi: api, pigeonInstance: instance, sessionID: sessionID)

    XCTAssertEqual(instance.setSessionIDArgs, [sessionID])
  }

  func testSetSameAppKeyEnabled() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let enabled = true
    try? api.pigeonDelegate.setSameAppKeyEnabled(pigeonApi: api, pigeonInstance: instance, enabled: enabled)

    XCTAssertEqual(instance.setSameAppKeyEnabledArgs, [enabled])
  }

  func testSetEnableDebugMode() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMASettings(registrar)

    let instance = TestSettings()
    let enable = true
    try? api.pigeonDelegate.setEnableDebugMode(pigeonApi: api, pigeonInstance: instance, enable: enable)

    XCTAssertEqual(instance.setEnableDebugModeArgs, [enable])
  }

}
class TestSettings: IMASettings {
  var setPPIDArgs: [AnyHashable?]? = nil
  var setLanguageArgs: [AnyHashable?]? = nil
  var setMaxRedirectsArgs: [AnyHashable?]? = nil
  var setFeatureFlagsArgs: [AnyHashable?]? = nil
  var setEnableBackgroundPlaybackArgs: [AnyHashable?]? = nil
  var setAutoPlayAdBreaksArgs: [AnyHashable?]? = nil
  var setDisableNowPlayingInfoArgs: [AnyHashable?]? = nil
  var setPlayerTypeArgs: [AnyHashable?]? = nil
  var setPlayerVersionArgs: [AnyHashable?]? = nil
  var setSessionIDArgs: [AnyHashable?]? = nil
  var setSameAppKeyEnabledArgs: [AnyHashable?]? = nil
  var setEnableDebugModeArgs: [AnyHashable?]? = nil


  override func setPPID() {
    setPPIDArgs = [ppid]
  }
  override func setLanguage() {
    setLanguageArgs = [language]
  }
  override func setMaxRedirects() {
    setMaxRedirectsArgs = [max]
  }
  override func setFeatureFlags() {
    setFeatureFlagsArgs = [flags]
  }
  override func setEnableBackgroundPlayback() {
    setEnableBackgroundPlaybackArgs = [enabled]
  }
  override func setAutoPlayAdBreaks() {
    setAutoPlayAdBreaksArgs = [autoPlay]
  }
  override func setDisableNowPlayingInfo() {
    setDisableNowPlayingInfoArgs = [disable]
  }
  override func setPlayerType() {
    setPlayerTypeArgs = [type]
  }
  override func setPlayerVersion() {
    setPlayerVersionArgs = [version]
  }
  override func setSessionID() {
    setSessionIDArgs = [sessionID]
  }
  override func setSameAppKeyEnabled() {
    setSameAppKeyEnabledArgs = [enabled]
  }
  override func setEnableDebugMode() {
    setEnableDebugModeArgs = [enable]
  }
}
*/

protocol PigeonApiDelegateIMAAdsRequest {
  /// Initializes an ads request instance with the given ad tag URL and ad
  /// display container.
  ///
  /// Serial ad requests may reuse the same `IMAAdDisplayContainer` by first
  /// calling `IMAAdsManager.destroy` on its current adsManager. Concurrent
  /// requests must use different ad containers. Does not support
  /// Picture-in-Picture.
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsRequest, adTagUrl: String, adDisplayContainer: IMAAdDisplayContainer, contentPlayhead: IMAContentPlayhead?) throws -> IMAAdsRequest
  /// Initializes an ads request instance with the given canned ads response and
  /// ad display container.
  ///
  /// Serial ad requests may reuse the same `IMAAdDisplayContainer`` by first
  /// calling `IMAAdsManager.destroy` on its current adsManager. Concurrent
  /// requests must use different ad containers. Does not support
  /// Picture-in-Picture.
  func withAdsResponse(pigeonApi: PigeonApiIMAAdsRequest, adsResponse: String, adDisplayContainer: IMAAdDisplayContainer, contentPlayhead: IMAContentPlayhead?) throws -> IMAAdsRequest
  /// Specifies the full URL to use for ads loading from an ad server.
  ///
  /// Required for any adsRequest.
  func getAdTagUrl(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest) throws -> String?
  /// Specifies a VAST, VMAP, or ad rules response to be used instead of making
  /// a request through an ad tag URL.
  func getAdsResponse(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest) throws -> String?
  /// The ad display container.
  func getAdDisplayContainer(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest) throws -> IMAAdDisplayContainer
  /// Specifies whether the player intends to start the content and ad in
  /// response to a user action or whether they will be automatically played.
  ///
  /// Changing this setting will have no impact on ad playback.
  func setAdWillAutoPlay(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, adWillAutoPlay: Bool) throws
  /// Specifies whether the player intends to start the content and ad with no
  /// volume.
  ///
  /// Changing this setting will have no impact on ad playback.
  func setAdWillPlayMuted(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, adWillPlayMuted: Bool) throws
  /// Specifies whether the player intends to continuously play the content
  /// videos one after another similar to TV broadcast.
  ///
  /// Not calling this function leaves the setting as unknown. Note: Changing
  /// this setting will have no impact on ad playback.
  func setContinuousPlayback(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, continuousPlayback: Bool) throws
  /// Specifies the duration of the content in seconds to be shown.
  ///
  /// Used in AdX requests. This parameter is optional.
  func setContentDuration(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, duration: Double) throws
  /// Specifies the keywords used to describe the content to be shown.
  ///
  /// Used in AdX requests. This parameter is optional.
  func setContentKeywords(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, keywords: [String]?) throws
  /// Specifies the title of the content to be shown.
  ///
  /// Used in AdX requests. This parameter is optional.
  func setContentTitle(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, title: String?) throws
  /// Specifies the universal link to the content’s screen.
  ///
  /// If provided, this parameter is passed to the OM SDK. See
  /// [Apple documentation](https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content)
  /// for more information.
  func setContentURL(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, contentURL: String?) throws
  /// Specifies the VAST load timeout in milliseconds for the initial request
  /// and any subsequent wrappers.
  ///
  /// This parameter is optional and will override the default timeout.
  func setVastLoadTimeout(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, timeout: Double) throws
  /// Specifies the maximum amount of time to wait in seconds, after calling
  /// requestAds, before requesting the ad tag URL.
  ///
  /// This can be used to stagger requests during a live-stream event, in order
  /// to mitigate spikes in the number of requests.
  func setLiveStreamPrefetchSeconds(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, seconds: Double) throws
}

protocol PigeonApiProtocolIMAAdsRequest {
}

final class PigeonApiIMAAdsRequest: PigeonApiProtocolIMAAdsRequest  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdsRequest
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdsRequest) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMAAdsRequest?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let adTagUrlArg = args[1] as! String
        let adDisplayContainerArg = args[2] as! IMAAdDisplayContainer
        let contentPlayheadArg: IMAContentPlayhead? = nilOrValue(args[3])
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api, adTagUrl: adTagUrlArg, adDisplayContainer: adDisplayContainerArg, contentPlayhead: contentPlayheadArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
    let withAdsResponseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.withAdsResponse", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      withAdsResponseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let adsResponseArg = args[1] as! String
        let adDisplayContainerArg = args[2] as! IMAAdDisplayContainer
        let contentPlayheadArg: IMAContentPlayhead? = nilOrValue(args[3])
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.withAdsResponse(pigeonApi: api, adsResponse: adsResponseArg, adDisplayContainer: adDisplayContainerArg, contentPlayhead: contentPlayheadArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      withAdsResponseChannel.setMessageHandler(nil)
    }
    let getAdTagUrlChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.getAdTagUrl", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAdTagUrlChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        do {
          let result = try api.pigeonDelegate.getAdTagUrl(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAdTagUrlChannel.setMessageHandler(nil)
    }
    let getAdsResponseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.getAdsResponse", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAdsResponseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        do {
          let result = try api.pigeonDelegate.getAdsResponse(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAdsResponseChannel.setMessageHandler(nil)
    }
    let getAdDisplayContainerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.getAdDisplayContainer", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAdDisplayContainerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        do {
          let result = try api.pigeonDelegate.getAdDisplayContainer(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAdDisplayContainerChannel.setMessageHandler(nil)
    }
    let setAdWillAutoPlayChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.setAdWillAutoPlay", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAdWillAutoPlayChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        let adWillAutoPlayArg = args[1] as! Bool
        do {
          try api.pigeonDelegate.setAdWillAutoPlay(pigeonApi: api, pigeonInstance: pigeonInstanceArg, adWillAutoPlay: adWillAutoPlayArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAdWillAutoPlayChannel.setMessageHandler(nil)
    }
    let setAdWillPlayMutedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.setAdWillPlayMuted", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setAdWillPlayMutedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        let adWillPlayMutedArg = args[1] as! Bool
        do {
          try api.pigeonDelegate.setAdWillPlayMuted(pigeonApi: api, pigeonInstance: pigeonInstanceArg, adWillPlayMuted: adWillPlayMutedArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setAdWillPlayMutedChannel.setMessageHandler(nil)
    }
    let setContinuousPlaybackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.setContinuousPlayback", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setContinuousPlaybackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        let continuousPlaybackArg = args[1] as! Bool
        do {
          try api.pigeonDelegate.setContinuousPlayback(pigeonApi: api, pigeonInstance: pigeonInstanceArg, continuousPlayback: continuousPlaybackArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setContinuousPlaybackChannel.setMessageHandler(nil)
    }
    let setContentDurationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.setContentDuration", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setContentDurationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        let durationArg = args[1] as! Double
        do {
          try api.pigeonDelegate.setContentDuration(pigeonApi: api, pigeonInstance: pigeonInstanceArg, duration: durationArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setContentDurationChannel.setMessageHandler(nil)
    }
    let setContentKeywordsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.setContentKeywords", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setContentKeywordsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        let keywordsArg: [String]? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setContentKeywords(pigeonApi: api, pigeonInstance: pigeonInstanceArg, keywords: keywordsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setContentKeywordsChannel.setMessageHandler(nil)
    }
    let setContentTitleChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.setContentTitle", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setContentTitleChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        let titleArg: String? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setContentTitle(pigeonApi: api, pigeonInstance: pigeonInstanceArg, title: titleArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setContentTitleChannel.setMessageHandler(nil)
    }
    let setContentURLChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.setContentURL", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setContentURLChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        let contentURLArg: String? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setContentURL(pigeonApi: api, pigeonInstance: pigeonInstanceArg, contentURL: contentURLArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setContentURLChannel.setMessageHandler(nil)
    }
    let setVastLoadTimeoutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.setVastLoadTimeout", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setVastLoadTimeoutChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        let timeoutArg = args[1] as! Double
        do {
          try api.pigeonDelegate.setVastLoadTimeout(pigeonApi: api, pigeonInstance: pigeonInstanceArg, timeout: timeoutArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setVastLoadTimeoutChannel.setMessageHandler(nil)
    }
    let setLiveStreamPrefetchSecondsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.setLiveStreamPrefetchSeconds", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLiveStreamPrefetchSecondsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRequest
        let secondsArg = args[1] as! Double
        do {
          try api.pigeonDelegate.setLiveStreamPrefetchSeconds(pigeonApi: api, pigeonInstance: pigeonInstanceArg, seconds: secondsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLiveStreamPrefetchSecondsChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMAAdsRequest and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdsRequest, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsRequest.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation
import GoogleInteractiveMediaAds


/// ProxyApi implementation for `IMAAdsRequest`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdsRequestProxyAPIDelegate : PigeonApiDelegateIMAAdsRequest {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsRequest, adTagUrl: String, adDisplayContainer: IMAAdDisplayContainer, contentPlayhead: IMAContentPlayhead?) throws -> IMAAdsRequest {
    return IMAAdsRequest(,adTagUrl: adTagUrl, adDisplayContainer: adDisplayContainer, contentPlayhead: contentPlayhead)
  }

  func withAdsResponse(pigeonApi: PigeonApiIMAAdsRequest, adsResponse: String, adDisplayContainer: IMAAdDisplayContainer, contentPlayhead: IMAContentPlayhead?) throws -> IMAAdsRequest {
    return IMAAdsRequest(,adsResponse: adsResponse, adDisplayContainer: adDisplayContainer, contentPlayhead: contentPlayhead)
  }

  func getAdTagUrl(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest) throws -> String? {
    return pigeonInstance.adTagUrl
  }

  func getAdsResponse(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest) throws -> String? {
    return pigeonInstance.adsResponse
  }

  func getAdDisplayContainer(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest) throws -> IMAAdDisplayContainer {
    return pigeonInstance.adDisplayContainer
  }

  func setAdWillAutoPlay(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, adWillAutoPlay: Bool) throws {
    pigeonInstance.adWillAutoPlay = adWillAutoPlay
  }

  func setAdWillPlayMuted(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, adWillPlayMuted: Bool) throws {
    pigeonInstance.adWillPlayMuted = adWillPlayMuted
  }

  func setContinuousPlayback(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, continuousPlayback: Bool) throws {
    pigeonInstance.continuousPlayback = continuousPlayback
  }

  func setContentDuration(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, duration: Double) throws {
    pigeonInstance.contentDuration = duration
  }

  func setContentKeywords(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, keywords: [String]?) throws {
    pigeonInstance.contentKeywords = keywords
  }

  func setContentTitle(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, title: String?) throws {
    pigeonInstance.contentTitle = title
  }

  func setContentURL(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, contentURL: String?) throws {
    pigeonInstance.contentURL = contentURL
  }

  func setVastLoadTimeout(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, timeout: Double) throws {
    pigeonInstance.vastLoadTimeout = timeout
  }

  func setLiveStreamPrefetchSeconds(pigeonApi: PigeonApiIMAAdsRequest, pigeonInstance: IMAAdsRequest, seconds: Double) throws {
    pigeonInstance.liveStreamPrefetchSeconds = seconds
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import GoogleInteractiveMediaAds
import Flutter
import XCTest

@testable import interactive_media_ads

class AdsRequestTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api, adTagUrl: "myString", adDisplayContainer: TestAdDisplayContainer, contentPlayhead: TestContentPlayhead)
    XCTAssertNotNil(instance)
  }

  func testWithAdsResponse() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = try? api.pigeonDelegate.withAdsResponse(pigeonApi: api, adsResponse: "myString", adDisplayContainer: TestAdDisplayContainer, contentPlayhead: TestContentPlayhead)
    XCTAssertNotNil(instance)
  }

  func testGetAdTagUrl() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let value = try? api.pigeonDelegate.getAdTagUrl(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.getAdTagUrlCalled)
    XCTAssertEqual(value, instance.getAdTagUrl())
  }

  func testGetAdsResponse() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let value = try? api.pigeonDelegate.getAdsResponse(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.getAdsResponseCalled)
    XCTAssertEqual(value, instance.getAdsResponse())
  }

  func testGetAdDisplayContainer() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let value = try? api.pigeonDelegate.getAdDisplayContainer(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.getAdDisplayContainerCalled)
    XCTAssertEqual(value, instance.getAdDisplayContainer())
  }

  func testSetAdWillAutoPlay() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let adWillAutoPlay = true
    try? api.pigeonDelegate.setAdWillAutoPlay(pigeonApi: api, pigeonInstance: instance, adWillAutoPlay: adWillAutoPlay)

    XCTAssertEqual(instance.setAdWillAutoPlayArgs, [adWillAutoPlay])
  }

  func testSetAdWillPlayMuted() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let adWillPlayMuted = true
    try? api.pigeonDelegate.setAdWillPlayMuted(pigeonApi: api, pigeonInstance: instance, adWillPlayMuted: adWillPlayMuted)

    XCTAssertEqual(instance.setAdWillPlayMutedArgs, [adWillPlayMuted])
  }

  func testSetContinuousPlayback() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let continuousPlayback = true
    try? api.pigeonDelegate.setContinuousPlayback(pigeonApi: api, pigeonInstance: instance, continuousPlayback: continuousPlayback)

    XCTAssertEqual(instance.setContinuousPlaybackArgs, [continuousPlayback])
  }

  func testSetContentDuration() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let duration = 1.0
    try? api.pigeonDelegate.setContentDuration(pigeonApi: api, pigeonInstance: instance, duration: duration)

    XCTAssertEqual(instance.setContentDurationArgs, [duration])
  }

  func testSetContentKeywords() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let keywords = ["myString"]
    try? api.pigeonDelegate.setContentKeywords(pigeonApi: api, pigeonInstance: instance, keywords: keywords)

    XCTAssertEqual(instance.setContentKeywordsArgs, [keywords])
  }

  func testSetContentTitle() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let title = "myString"
    try? api.pigeonDelegate.setContentTitle(pigeonApi: api, pigeonInstance: instance, title: title)

    XCTAssertEqual(instance.setContentTitleArgs, [title])
  }

  func testSetContentURL() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let contentURL = "myString"
    try? api.pigeonDelegate.setContentURL(pigeonApi: api, pigeonInstance: instance, contentURL: contentURL)

    XCTAssertEqual(instance.setContentURLArgs, [contentURL])
  }

  func testSetVastLoadTimeout() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let timeout = 1.0
    try? api.pigeonDelegate.setVastLoadTimeout(pigeonApi: api, pigeonInstance: instance, timeout: timeout)

    XCTAssertEqual(instance.setVastLoadTimeoutArgs, [timeout])
  }

  func testSetLiveStreamPrefetchSeconds() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRequest(registrar)

    let instance = TestAdsRequest()
    let seconds = 1.0
    try? api.pigeonDelegate.setLiveStreamPrefetchSeconds(pigeonApi: api, pigeonInstance: instance, seconds: seconds)

    XCTAssertEqual(instance.setLiveStreamPrefetchSecondsArgs, [seconds])
  }

}
class TestAdsRequest: IMAAdsRequest {
  var getAdTagUrlCalled = false
  var getAdsResponseCalled = false
  var getAdDisplayContainerCalled = false
  var setAdWillAutoPlayArgs: [AnyHashable?]? = nil
  var setAdWillPlayMutedArgs: [AnyHashable?]? = nil
  var setContinuousPlaybackArgs: [AnyHashable?]? = nil
  var setContentDurationArgs: [AnyHashable?]? = nil
  var setContentKeywordsArgs: [AnyHashable?]? = nil
  var setContentTitleArgs: [AnyHashable?]? = nil
  var setContentURLArgs: [AnyHashable?]? = nil
  var setVastLoadTimeoutArgs: [AnyHashable?]? = nil
  var setLiveStreamPrefetchSecondsArgs: [AnyHashable?]? = nil


  override func getAdTagUrl() {
    getAdTagUrlCalled = true
  }
  override func getAdsResponse() {
    getAdsResponseCalled = true
  }
  override func getAdDisplayContainer() {
    getAdDisplayContainerCalled = true
  }
  override func setAdWillAutoPlay() {
    setAdWillAutoPlayArgs = [adWillAutoPlay]
  }
  override func setAdWillPlayMuted() {
    setAdWillPlayMutedArgs = [adWillPlayMuted]
  }
  override func setContinuousPlayback() {
    setContinuousPlaybackArgs = [continuousPlayback]
  }
  override func setContentDuration() {
    setContentDurationArgs = [duration]
  }
  override func setContentKeywords() {
    setContentKeywordsArgs = [keywords]
  }
  override func setContentTitle() {
    setContentTitleArgs = [title]
  }
  override func setContentURL() {
    setContentURLArgs = [contentURL]
  }
  override func setVastLoadTimeout() {
    setVastLoadTimeoutArgs = [timeout]
  }
  override func setLiveStreamPrefetchSeconds() {
    setLiveStreamPrefetchSecondsArgs = [seconds]
  }
}
*/

protocol PigeonApiDelegateIMAAdsLoaderDelegate {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsLoaderDelegate) throws -> IMAAdsLoaderDelegate
}

protocol PigeonApiProtocolIMAAdsLoaderDelegate {
  /// Called when ads are successfully loaded from the ad servers by the loader.
  func adLoaderLoadedWith(pigeonInstance pigeonInstanceArg: IMAAdsLoaderDelegate, loader loaderArg: IMAAdsLoader, adsLoadedData adsLoadedDataArg: IMAAdsLoadedData, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Error reported by the ads loader when loading or requesting an ad fails.
  func adsLoaderFailedWithErrorData(pigeonInstance pigeonInstanceArg: IMAAdsLoaderDelegate, loader loaderArg: IMAAdsLoader, adErrorData adErrorDataArg: IMAAdLoadingErrorData, completion: @escaping (Result<Void, PigeonError>) -> Void)
}

final class PigeonApiIMAAdsLoaderDelegate: PigeonApiProtocolIMAAdsLoaderDelegate  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdsLoaderDelegate
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdsLoaderDelegate) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMAAdsLoaderDelegate?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsLoaderDelegate.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMAAdsLoaderDelegate and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdsLoaderDelegate, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      completion(
        .failure(
          PigeonError(
            code: "new-instance-error",
            message: "Error: Attempting to create a new Dart instance of IMAAdsLoaderDelegate, but the class has a nonnull callback method.", details: "")))
    }
  }
  /// Called when ads are successfully loaded from the ad servers by the loader.
  func adLoaderLoadedWith(pigeonInstance pigeonInstanceArg: IMAAdsLoaderDelegate, loader loaderArg: IMAAdsLoader, adsLoadedData adsLoadedDataArg: IMAAdsLoadedData, completion: @escaping (Result<Void, PigeonError>) -> Void)   {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
      return
    }
    let binaryMessenger = pigeonRegistrar.binaryMessenger
    let codec = pigeonRegistrar.codec
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsLoaderDelegate.adLoaderLoadedWith"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pigeonInstanceArg, loaderArg, adsLoadedDataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }

  /// Error reported by the ads loader when loading or requesting an ad fails.
  func adsLoaderFailedWithErrorData(pigeonInstance pigeonInstanceArg: IMAAdsLoaderDelegate, loader loaderArg: IMAAdsLoader, adErrorData adErrorDataArg: IMAAdLoadingErrorData, completion: @escaping (Result<Void, PigeonError>) -> Void)   {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
      return
    }
    let binaryMessenger = pigeonRegistrar.binaryMessenger
    let codec = pigeonRegistrar.codec
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsLoaderDelegate.adsLoaderFailedWithErrorData"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pigeonInstanceArg, loaderArg, adErrorDataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }

}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation


/// Implementation of `IMAAdsLoaderDelegate` that calls to Dart in callback methods.
class AdsLoaderDelegateImpl: IMAAdsLoaderDelegate {
  let api: PigeonApiProtocolIMAAdsLoaderDelegate

  init(api: PigeonApiProtocolIMAAdsLoaderDelegate) {
    self.api = api
  }

  func fixMe() {
    api.adLoaderLoadedWith(pigeonInstance: self, loader: loader, adsLoadedData: adsLoadedData) {  _ in }
  }

  func fixMe() {
    api.adsLoaderFailedWithErrorData(pigeonInstance: self, loader: loader, adErrorData: adErrorData) {  _ in }
  }
}

/// ProxyApi implementation for `IMAAdsLoaderDelegate`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdsLoaderDelegateProxyAPIDelegate : PigeonApiDelegateIMAAdsLoaderDelegate {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsLoaderDelegate) throws -> IMAAdsLoaderDelegate {
    return IMAAdsLoaderDelegateImpl(api: pigeonApi)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class AdsLoaderDelegateTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsLoaderDelegate(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api )
    XCTAssertNotNil(instance)
  }

  func testAdLoaderLoadedWith() {
    let api = TestAdsLoaderDelegateApi()
    let instance = AdsLoaderDelegateImpl(api: api)
    let loader = TestAdsLoader
    let adsLoadedData = TestAdsLoadedData
    instance.adLoaderLoadedWith(loader: loader, adsLoadedData: adsLoadedData)

    XCTAssertEqual(api.adLoaderLoadedWithArgs, [loader, adsLoadedData])
  }

  func testAdsLoaderFailedWithErrorData() {
    let api = TestAdsLoaderDelegateApi()
    let instance = AdsLoaderDelegateImpl(api: api)
    let loader = TestAdsLoader
    let adErrorData = TestAdLoadingErrorData
    instance.adsLoaderFailedWithErrorData(loader: loader, adErrorData: adErrorData)

    XCTAssertEqual(api.adsLoaderFailedWithErrorDataArgs, [loader, adErrorData])
  }

}
class TestAdsLoaderDelegateApi: PigeonApiProtocolIMAAdsLoaderDelegate {
  var adLoaderLoadedWithArgs: [AnyHashable?]? = nil
  var adsLoaderFailedWithErrorDataArgs: [AnyHashable?]? = nil

  func adLoaderLoadedWith(loader: IMAAdsLoader, adsLoadedData: IMAAdsLoadedData) throws {
    adLoaderLoadedWithArgs = [loaderArg, adsLoadedDataArg]
  }
  func adsLoaderFailedWithErrorData(loader: IMAAdsLoader, adErrorData: IMAAdLoadingErrorData) throws {
    adsLoaderFailedWithErrorDataArgs = [loaderArg, adErrorDataArg]
  }
}
*/

protocol PigeonApiDelegateIMAAdsLoadedData {
  /// The ads manager instance created by the ads loader.
  ///
  /// Will be null when using dynamic ad insertion.
  func adsManager(pigeonApi: PigeonApiIMAAdsLoadedData, pigeonInstance: IMAAdsLoadedData) throws -> IMAAdsManager?
}

protocol PigeonApiProtocolIMAAdsLoadedData {
}

final class PigeonApiIMAAdsLoadedData: PigeonApiProtocolIMAAdsLoadedData  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdsLoadedData
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdsLoadedData) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  ///Creates a Dart instance of IMAAdsLoadedData and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdsLoadedData, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let adsManagerArg = try! pigeonDelegate.adsManager(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsLoadedData.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, adsManagerArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMAAdsLoadedData`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdsLoadedDataProxyAPIDelegate : PigeonApiDelegateIMAAdsLoadedData {
  func adsManager(pigeonApi: PigeonApiIMAAdsLoadedData, pigeonInstance: IMAAdsLoadedData) throws -> IMAAdsManager? {
    return pigeonInstance.adsManager
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class AdsLoadedDataTests: XCTestCase {
  func testAdsManager() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsLoadedData(registrar)

    let instance = TestAdsLoadedData()
    let value = try? api.pigeonDelegate.adsManager(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adsManager)
  }

}
*/

protocol PigeonApiDelegateIMAAdLoadingErrorData {
  /// The ad error that occurred while loading the ad.
  func adError(pigeonApi: PigeonApiIMAAdLoadingErrorData, pigeonInstance: IMAAdLoadingErrorData) throws -> IMAAdError
}

protocol PigeonApiProtocolIMAAdLoadingErrorData {
}

final class PigeonApiIMAAdLoadingErrorData: PigeonApiProtocolIMAAdLoadingErrorData  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdLoadingErrorData
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdLoadingErrorData) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  ///Creates a Dart instance of IMAAdLoadingErrorData and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdLoadingErrorData, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let adErrorArg = try! pigeonDelegate.adError(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdLoadingErrorData.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, adErrorArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMAAdLoadingErrorData`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdLoadingErrorDataProxyAPIDelegate : PigeonApiDelegateIMAAdLoadingErrorData {
  func adError(pigeonApi: PigeonApiIMAAdLoadingErrorData, pigeonInstance: IMAAdLoadingErrorData) throws -> IMAAdError {
    return pigeonInstance.adError
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class AdLoadingErrorDataTests: XCTestCase {
  func testAdError() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdLoadingErrorData(registrar)

    let instance = TestAdLoadingErrorData()
    let value = try? api.pigeonDelegate.adError(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adError)
  }

}
*/

protocol PigeonApiDelegateIMAAdError {
  /// The type of error that occurred during ad loading or ad playing.
  func type(pigeonApi: PigeonApiIMAAdError, pigeonInstance: IMAAdError) throws -> AdErrorType
  /// The error code for obtaining more specific information about the error.
  func code(pigeonApi: PigeonApiIMAAdError, pigeonInstance: IMAAdError) throws -> AdErrorCode
  /// A brief description about the error.
  func message(pigeonApi: PigeonApiIMAAdError, pigeonInstance: IMAAdError) throws -> String?
}

protocol PigeonApiProtocolIMAAdError {
}

final class PigeonApiIMAAdError: PigeonApiProtocolIMAAdError  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdError
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdError) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  ///Creates a Dart instance of IMAAdError and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdError, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let typeArg = try! pigeonDelegate.type(pigeonApi: self, pigeonInstance: pigeonInstance)
      let codeArg = try! pigeonDelegate.code(pigeonApi: self, pigeonInstance: pigeonInstance)
      let messageArg = try! pigeonDelegate.message(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdError.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, typeArg, codeArg, messageArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMAAdError`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdErrorProxyAPIDelegate : PigeonApiDelegateIMAAdError {
  func type(pigeonApi: PigeonApiIMAAdError, pigeonInstance: IMAAdError) throws -> AdErrorType {
    switch pigeonInstance.type {
      case .loadingFailed:
        return .loadingFailed
      case .adPlayingFailed:
        return .adPlayingFailed
      @unknown default:
        return .unknown
    }
  }

  func code(pigeonApi: PigeonApiIMAAdError, pigeonInstance: IMAAdError) throws -> AdErrorCode {
    switch pigeonInstance.code {
      case .adslotNotVisible:
        return .adslotNotVisible
      case .apiError:
        return .apiError
      case .companionAdLoadingFailed:
        return .companionAdLoadingFailed
      case .contentPlayheadMissing:
        return .contentPlayheadMissing
      case .failedLoadingAd:
        return .failedLoadingAd
      case .failedToRequestAds:
        return .failedToRequestAds
      case .invalidArguments:
        return .invalidArguments
      case .osRuntimeTooOld:
        return .osRuntimeTooOld
      case .playlistMalformedResponse:
        return .playlistMalformedResponse
      case .requiredListenersNotAdded:
        return .requiredListenersNotAdded
      case .streamInitializationFailed:
        return .streamInitializationFailed
      case .unknownError:
        return .unknownError
      case .vastAssetNotFound:
        return .vastAssetNotFound
      case .vastEmptyResponse:
        return .vastEmptyResponse
      case .vastInvalidUrl:
        return .vastInvalidUrl
      case .vastLinearAssetMismatch:
        return .vastLinearAssetMismatch
      case .vastLoadTimeout:
        return .vastLoadTimeout
      case .vastMalformedResponse:
        return .vastMalformedResponse
      case .vastMediaLoadTimeout:
        return .vastMediaLoadTimeout
      case .vastTooManyRedirects:
        return .vastTooManyRedirects
      case .vastTraffickingError:
        return .vastTraffickingError
      case .videoElementUsed:
        return .videoElementUsed
      case .videoElementRequired:
        return .videoElementRequired
      case .videoPlayError:
        return .videoPlayError
      @unknown default:
        return .unknown
    }
  }

  func message(pigeonApi: PigeonApiIMAAdError, pigeonInstance: IMAAdError) throws -> String? {
    return pigeonInstance.message
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class AdErrorTests: XCTestCase {
  func testType() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdError(registrar)

    let instance = TestAdError()
    let value = try? api.pigeonDelegate.type(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.type)
  }

  func testCode() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdError(registrar)

    let instance = TestAdError()
    let value = try? api.pigeonDelegate.code(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.code)
  }

  func testMessage() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdError(registrar)

    let instance = TestAdError()
    let value = try? api.pigeonDelegate.message(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.message)
  }

}
*/

protocol PigeonApiDelegateIMAAdsManager {
  /// The `IMAAdsManagerDelegate` to notify with events during ad playback.
  func setDelegate(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager, delegate: IMAAdsManagerDelegate?) throws
  /// Initializes and loads the ad.
  func initialize(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager, adsRenderingSettings: IMAAdsRenderingSettings?) throws
  /// Starts advertisement playback.
  func start(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws
  /// Pauses advertisement.
  func pause(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws
  /// Resumes the current ad.
  func resume(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws
  /// Skips the advertisement if the ad is skippable and the skip offset has
  /// been reached.
  func skip(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws
  /// If an ad break is currently playing, discard it and resume content.
  func discardAdBreak(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws
  /// Causes the ads manager to stop the ad and clean its internal state.
  func destroy(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws
}

protocol PigeonApiProtocolIMAAdsManager {
}

final class PigeonApiIMAAdsManager: PigeonApiProtocolIMAAdsManager  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdsManager
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdsManager) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMAAdsManager?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let setDelegateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsManager.setDelegate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDelegateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsManager
        let delegateArg: IMAAdsManagerDelegate? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setDelegate(pigeonApi: api, pigeonInstance: pigeonInstanceArg, delegate: delegateArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDelegateChannel.setMessageHandler(nil)
    }
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsManager.initialize", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsManager
        let adsRenderingSettingsArg: IMAAdsRenderingSettings? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.initialize(pigeonApi: api, pigeonInstance: pigeonInstanceArg, adsRenderingSettings: adsRenderingSettingsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let startChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsManager.start", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsManager
        do {
          try api.pigeonDelegate.start(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startChannel.setMessageHandler(nil)
    }
    let pauseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsManager.pause", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pauseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsManager
        do {
          try api.pigeonDelegate.pause(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pauseChannel.setMessageHandler(nil)
    }
    let resumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsManager.resume", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      resumeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsManager
        do {
          try api.pigeonDelegate.resume(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      resumeChannel.setMessageHandler(nil)
    }
    let skipChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsManager.skip", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      skipChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsManager
        do {
          try api.pigeonDelegate.skip(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      skipChannel.setMessageHandler(nil)
    }
    let discardAdBreakChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsManager.discardAdBreak", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discardAdBreakChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsManager
        do {
          try api.pigeonDelegate.discardAdBreak(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      discardAdBreakChannel.setMessageHandler(nil)
    }
    let destroyChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsManager.destroy", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      destroyChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsManager
        do {
          try api.pigeonDelegate.destroy(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      destroyChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMAAdsManager and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdsManager, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsManager.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMAAdsManager`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdsManagerProxyAPIDelegate : PigeonApiDelegateIMAAdsManager {
  func setDelegate(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager, delegate: IMAAdsManagerDelegate?) throws {
    pigeonInstance.delegate = delegate
  }

  func initialize(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager, adsRenderingSettings: IMAAdsRenderingSettings?) throws {
    pigeonInstance.initialize(adsRenderingSettings: adsRenderingSettings)
  }

  func start(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws {
    pigeonInstance.start()
  }

  func pause(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws {
    pigeonInstance.pause()
  }

  func resume(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws {
    pigeonInstance.resume()
  }

  func skip(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws {
    pigeonInstance.skip()
  }

  func discardAdBreak(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws {
    pigeonInstance.discardAdBreak()
  }

  func destroy(pigeonApi: PigeonApiIMAAdsManager, pigeonInstance: IMAAdsManager) throws {
    pigeonInstance.destroy()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class AdsManagerTests: XCTestCase {
  func testSetDelegate() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsManager(registrar)

    let instance = TestAdsManager()
    let delegate = TestAdsManagerDelegate
    try? api.pigeonDelegate.setDelegate(pigeonApi: api, pigeonInstance: instance, delegate: delegate)

    XCTAssertEqual(instance.setDelegateArgs, [delegate])
  }

  func testInitialize() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsManager(registrar)

    let instance = TestAdsManager()
    let adsRenderingSettings = TestAdsRenderingSettings
    try? api.pigeonDelegate.initialize(pigeonApi: api, pigeonInstance: instance, adsRenderingSettings: adsRenderingSettings)

    XCTAssertEqual(instance.initializeArgs, [adsRenderingSettings])
  }

  func testStart() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsManager(registrar)

    let instance = TestAdsManager()
    try? api.pigeonDelegate.start(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.startCalled)
  }

  func testPause() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsManager(registrar)

    let instance = TestAdsManager()
    try? api.pigeonDelegate.pause(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.pauseCalled)
  }

  func testResume() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsManager(registrar)

    let instance = TestAdsManager()
    try? api.pigeonDelegate.resume(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.resumeCalled)
  }

  func testSkip() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsManager(registrar)

    let instance = TestAdsManager()
    try? api.pigeonDelegate.skip(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.skipCalled)
  }

  func testDiscardAdBreak() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsManager(registrar)

    let instance = TestAdsManager()
    try? api.pigeonDelegate.discardAdBreak(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.discardAdBreakCalled)
  }

  func testDestroy() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsManager(registrar)

    let instance = TestAdsManager()
    try? api.pigeonDelegate.destroy(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.destroyCalled)
  }

}
class TestAdsManager: IMAAdsManager {
  var setDelegateArgs: [AnyHashable?]? = nil
  var initializeArgs: [AnyHashable?]? = nil
  var startCalled = false
  var pauseCalled = false
  var resumeCalled = false
  var skipCalled = false
  var discardAdBreakCalled = false
  var destroyCalled = false


  override func setDelegate() {
    setDelegateArgs = [delegate]
  }
  override func initialize() {
    initializeArgs = [adsRenderingSettings]
  }
  override func start() {
    startCalled = true
  }
  override func pause() {
    pauseCalled = true
  }
  override func resume() {
    resumeCalled = true
  }
  override func skip() {
    skipCalled = true
  }
  override func discardAdBreak() {
    discardAdBreakCalled = true
  }
  override func destroy() {
    destroyCalled = true
  }
}
*/

protocol PigeonApiDelegateIMAAdsManagerDelegate {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsManagerDelegate) throws -> IMAAdsManagerDelegate
}

protocol PigeonApiProtocolIMAAdsManagerDelegate {
  /// Called when there is an IMAAdEvent.
  func didReceiveAdEvent(pigeonInstance pigeonInstanceArg: IMAAdsManagerDelegate, adsManager adsManagerArg: IMAAdsManager, event eventArg: IMAAdEvent, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when there was an error playing the ad.
  func didReceiveAdError(pigeonInstance pigeonInstanceArg: IMAAdsManagerDelegate, adsManager adsManagerArg: IMAAdsManager, error errorArg: IMAAdError, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when an ad is ready to play.
  func didRequestContentPause(pigeonInstance pigeonInstanceArg: IMAAdsManagerDelegate, adsManager adsManagerArg: IMAAdsManager, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when an ad has finished or an error occurred during the playback.
  func didRequestContentResume(pigeonInstance pigeonInstanceArg: IMAAdsManagerDelegate, adsManager adsManagerArg: IMAAdsManager, completion: @escaping (Result<Void, PigeonError>) -> Void)
}

final class PigeonApiIMAAdsManagerDelegate: PigeonApiProtocolIMAAdsManagerDelegate  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdsManagerDelegate
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdsManagerDelegate) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMAAdsManagerDelegate?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsManagerDelegate.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMAAdsManagerDelegate and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdsManagerDelegate, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      completion(
        .failure(
          PigeonError(
            code: "new-instance-error",
            message: "Error: Attempting to create a new Dart instance of IMAAdsManagerDelegate, but the class has a nonnull callback method.", details: "")))
    }
  }
  /// Called when there is an IMAAdEvent.
  func didReceiveAdEvent(pigeonInstance pigeonInstanceArg: IMAAdsManagerDelegate, adsManager adsManagerArg: IMAAdsManager, event eventArg: IMAAdEvent, completion: @escaping (Result<Void, PigeonError>) -> Void)   {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
      return
    }
    let binaryMessenger = pigeonRegistrar.binaryMessenger
    let codec = pigeonRegistrar.codec
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsManagerDelegate.didReceiveAdEvent"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pigeonInstanceArg, adsManagerArg, eventArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }

  /// Called when there was an error playing the ad.
  func didReceiveAdError(pigeonInstance pigeonInstanceArg: IMAAdsManagerDelegate, adsManager adsManagerArg: IMAAdsManager, error errorArg: IMAAdError, completion: @escaping (Result<Void, PigeonError>) -> Void)   {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
      return
    }
    let binaryMessenger = pigeonRegistrar.binaryMessenger
    let codec = pigeonRegistrar.codec
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsManagerDelegate.didReceiveAdError"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pigeonInstanceArg, adsManagerArg, errorArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }

  /// Called when an ad is ready to play.
  func didRequestContentPause(pigeonInstance pigeonInstanceArg: IMAAdsManagerDelegate, adsManager adsManagerArg: IMAAdsManager, completion: @escaping (Result<Void, PigeonError>) -> Void)   {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
      return
    }
    let binaryMessenger = pigeonRegistrar.binaryMessenger
    let codec = pigeonRegistrar.codec
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsManagerDelegate.didRequestContentPause"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pigeonInstanceArg, adsManagerArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }

  /// Called when an ad has finished or an error occurred during the playback.
  func didRequestContentResume(pigeonInstance pigeonInstanceArg: IMAAdsManagerDelegate, adsManager adsManagerArg: IMAAdsManager, completion: @escaping (Result<Void, PigeonError>) -> Void)   {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
      return
    }
    let binaryMessenger = pigeonRegistrar.binaryMessenger
    let codec = pigeonRegistrar.codec
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsManagerDelegate.didRequestContentResume"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pigeonInstanceArg, adsManagerArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }

}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation


/// Implementation of `IMAAdsManagerDelegate` that calls to Dart in callback methods.
class AdsManagerDelegateImpl: IMAAdsManagerDelegate {
  let api: PigeonApiProtocolIMAAdsManagerDelegate

  init(api: PigeonApiProtocolIMAAdsManagerDelegate) {
    self.api = api
  }

  func fixMe() {
    api.didReceiveAdEvent(pigeonInstance: self, adsManager: adsManager, event: event) {  _ in }
  }

  func fixMe() {
    api.didReceiveAdError(pigeonInstance: self, adsManager: adsManager, error: error) {  _ in }
  }

  func fixMe() {
    api.didRequestContentPause(pigeonInstance: self, adsManager: adsManager) {  _ in }
  }

  func fixMe() {
    api.didRequestContentResume(pigeonInstance: self, adsManager: adsManager) {  _ in }
  }
}

/// ProxyApi implementation for `IMAAdsManagerDelegate`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdsManagerDelegateProxyAPIDelegate : PigeonApiDelegateIMAAdsManagerDelegate {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsManagerDelegate) throws -> IMAAdsManagerDelegate {
    return IMAAdsManagerDelegateImpl(api: pigeonApi)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class AdsManagerDelegateTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsManagerDelegate(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api )
    XCTAssertNotNil(instance)
  }

  func testDidReceiveAdEvent() {
    let api = TestAdsManagerDelegateApi()
    let instance = AdsManagerDelegateImpl(api: api)
    let adsManager = TestAdsManager
    let event = TestAdEvent
    instance.didReceiveAdEvent(adsManager: adsManager, event: event)

    XCTAssertEqual(api.didReceiveAdEventArgs, [adsManager, event])
  }

  func testDidReceiveAdError() {
    let api = TestAdsManagerDelegateApi()
    let instance = AdsManagerDelegateImpl(api: api)
    let adsManager = TestAdsManager
    let error = TestAdError
    instance.didReceiveAdError(adsManager: adsManager, error: error)

    XCTAssertEqual(api.didReceiveAdErrorArgs, [adsManager, error])
  }

  func testDidRequestContentPause() {
    let api = TestAdsManagerDelegateApi()
    let instance = AdsManagerDelegateImpl(api: api)
    let adsManager = TestAdsManager
    instance.didRequestContentPause(adsManager: adsManager)

    XCTAssertEqual(api.didRequestContentPauseArgs, [adsManager])
  }

  func testDidRequestContentResume() {
    let api = TestAdsManagerDelegateApi()
    let instance = AdsManagerDelegateImpl(api: api)
    let adsManager = TestAdsManager
    instance.didRequestContentResume(adsManager: adsManager)

    XCTAssertEqual(api.didRequestContentResumeArgs, [adsManager])
  }

}
class TestAdsManagerDelegateApi: PigeonApiProtocolIMAAdsManagerDelegate {
  var didReceiveAdEventArgs: [AnyHashable?]? = nil
  var didReceiveAdErrorArgs: [AnyHashable?]? = nil
  var didRequestContentPauseArgs: [AnyHashable?]? = nil
  var didRequestContentResumeArgs: [AnyHashable?]? = nil

  func didReceiveAdEvent(adsManager: IMAAdsManager, event: IMAAdEvent) throws {
    didReceiveAdEventArgs = [adsManagerArg, eventArg]
  }
  func didReceiveAdError(adsManager: IMAAdsManager, error: IMAAdError) throws {
    didReceiveAdErrorArgs = [adsManagerArg, errorArg]
  }
  func didRequestContentPause(adsManager: IMAAdsManager) throws {
    didRequestContentPauseArgs = [adsManagerArg]
  }
  func didRequestContentResume(adsManager: IMAAdsManager) throws {
    didRequestContentResumeArgs = [adsManagerArg]
  }
}
*/

protocol PigeonApiDelegateIMAAdEvent {
  /// Type of the event.
  func type(pigeonApi: PigeonApiIMAAdEvent, pigeonInstance: IMAAdEvent) throws -> AdEventType
  /// Stringified type of the event.
  func typeString(pigeonApi: PigeonApiIMAAdEvent, pigeonInstance: IMAAdEvent) throws -> String
  /// Extra data about the ad.
  func adData(pigeonApi: PigeonApiIMAAdEvent, pigeonInstance: IMAAdEvent) throws -> [String: Any]?
}

protocol PigeonApiProtocolIMAAdEvent {
}

final class PigeonApiIMAAdEvent: PigeonApiProtocolIMAAdEvent  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdEvent
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdEvent) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  ///Creates a Dart instance of IMAAdEvent and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdEvent, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let typeArg = try! pigeonDelegate.type(pigeonApi: self, pigeonInstance: pigeonInstance)
      let typeStringArg = try! pigeonDelegate.typeString(pigeonApi: self, pigeonInstance: pigeonInstance)
      let adDataArg = try! pigeonDelegate.adData(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdEvent.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, typeArg, typeStringArg, adDataArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMAAdEvent`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdEventProxyAPIDelegate : PigeonApiDelegateIMAAdEvent {
  func type(pigeonApi: PigeonApiIMAAdEvent, pigeonInstance: IMAAdEvent) throws -> AdEventType {
    switch pigeonInstance.type {
      case .adBreakEnded:
        return .adBreakEnded
      case .adBreakFetchError:
        return .adBreakFetchError
      case .adBreakReady:
        return .adBreakReady
      case .adBreakStarted:
        return .adBreakStarted
      case .adPeriodEnded:
        return .adPeriodEnded
      case .adPeriodStarted:
        return .adPeriodStarted
      case .allAdsCompleted:
        return .allAdsCompleted
      case .clicked:
        return .clicked
      case .completed:
        return .completed
      case .cuepointsChanged:
        return .cuepointsChanged
      case .firstQuartile:
        return .firstQuartile
      case .iconFallbackImageClosed:
        return .iconFallbackImageClosed
      case .iconTapped:
        return .iconTapped
      case .loaded:
        return .loaded
      case .log:
        return .log
      case .midpoint:
        return .midpoint
      case .pause:
        return .pause
      case .resume:
        return .resume
      case .skipped:
        return .skipped
      case .started:
        return .started
      case .streamLoaded:
        return .streamLoaded
      case .streamStarted:
        return .streamStarted
      case .tapped:
        return .tapped
      case .thirdQuartile:
        return .thirdQuartile
      @unknown default:
        return .unknown
    }
  }

  func typeString(pigeonApi: PigeonApiIMAAdEvent, pigeonInstance: IMAAdEvent) throws -> String {
    return pigeonInstance.typeString
  }

  func adData(pigeonApi: PigeonApiIMAAdEvent, pigeonInstance: IMAAdEvent) throws -> [String: Any]? {
    return pigeonInstance.adData
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class AdEventTests: XCTestCase {
  func testType() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdEvent(registrar)

    let instance = TestAdEvent()
    let value = try? api.pigeonDelegate.type(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.type)
  }

  func testTypeString() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdEvent(registrar)

    let instance = TestAdEvent()
    let value = try? api.pigeonDelegate.typeString(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.typeString)
  }

  func testAdData() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdEvent(registrar)

    let instance = TestAdEvent()
    let value = try? api.pigeonDelegate.adData(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adData)
  }

}
*/

protocol PigeonApiDelegateIMAAdsRenderingSettings {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsRenderingSettings) throws -> IMAAdsRenderingSettings
  /// If specified, the SDK will play the media with MIME type on the list.
  func setMimeTypes(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, types: [String]?) throws
  /// Maximum recommended bitrate.
  ///
  /// The value is in kbit/s.
  func setBitrate(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, bitrate: Int64) throws
  /// Timeout (in seconds) when loading a video ad media file.
  ///
  /// Use -1 for the default of 8 seconds.
  func setLoadVideoTimeout(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, seconds: Double) throws
  /// For VMAP and ad rules playlists, only play ad breaks scheduled after this
  /// time (in seconds).
  func setPlayAdsAfterTime(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, seconds: Double) throws
  /// Specifies the list of UI elements that should be visible.
  func setUIElements(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, types: [UIElementType]?) throws
  /// Whether or not the SDK will preload ad media.
  ///
  /// Default is YES.
  func setEnablePreloading(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, enable: Bool) throws
  /// Specifies the optional UIViewController that will be used to open links
  /// in-app.
  func setLinkOpenerPresentingController(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, controller: UIViewController) throws
}

protocol PigeonApiProtocolIMAAdsRenderingSettings {
}

final class PigeonApiIMAAdsRenderingSettings: PigeonApiProtocolIMAAdsRenderingSettings  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdsRenderingSettings
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdsRenderingSettings) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMAAdsRenderingSettings?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRenderingSettings.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
    let setMimeTypesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRenderingSettings.setMimeTypes", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setMimeTypesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRenderingSettings
        let typesArg: [String]? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setMimeTypes(pigeonApi: api, pigeonInstance: pigeonInstanceArg, types: typesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setMimeTypesChannel.setMessageHandler(nil)
    }
    let setBitrateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRenderingSettings.setBitrate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setBitrateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRenderingSettings
        let bitrateArg = args[1] as! Int64
        do {
          try api.pigeonDelegate.setBitrate(pigeonApi: api, pigeonInstance: pigeonInstanceArg, bitrate: bitrateArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setBitrateChannel.setMessageHandler(nil)
    }
    let setLoadVideoTimeoutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRenderingSettings.setLoadVideoTimeout", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLoadVideoTimeoutChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRenderingSettings
        let secondsArg = args[1] as! Double
        do {
          try api.pigeonDelegate.setLoadVideoTimeout(pigeonApi: api, pigeonInstance: pigeonInstanceArg, seconds: secondsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLoadVideoTimeoutChannel.setMessageHandler(nil)
    }
    let setPlayAdsAfterTimeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRenderingSettings.setPlayAdsAfterTime", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setPlayAdsAfterTimeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRenderingSettings
        let secondsArg = args[1] as! Double
        do {
          try api.pigeonDelegate.setPlayAdsAfterTime(pigeonApi: api, pigeonInstance: pigeonInstanceArg, seconds: secondsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setPlayAdsAfterTimeChannel.setMessageHandler(nil)
    }
    let setUIElementsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRenderingSettings.setUIElements", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setUIElementsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRenderingSettings
        let typesArg: [UIElementType]? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setUIElements(pigeonApi: api, pigeonInstance: pigeonInstanceArg, types: typesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setUIElementsChannel.setMessageHandler(nil)
    }
    let setEnablePreloadingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRenderingSettings.setEnablePreloading", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setEnablePreloadingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRenderingSettings
        let enableArg = args[1] as! Bool
        do {
          try api.pigeonDelegate.setEnablePreloading(pigeonApi: api, pigeonInstance: pigeonInstanceArg, enable: enableArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setEnablePreloadingChannel.setMessageHandler(nil)
    }
    let setLinkOpenerPresentingControllerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAAdsRenderingSettings.setLinkOpenerPresentingController", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setLinkOpenerPresentingControllerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMAAdsRenderingSettings
        let controllerArg = args[1] as! UIViewController
        do {
          try api.pigeonDelegate.setLinkOpenerPresentingController(pigeonApi: api, pigeonInstance: pigeonInstanceArg, controller: controllerArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setLinkOpenerPresentingControllerChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMAAdsRenderingSettings and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdsRenderingSettings, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdsRenderingSettings.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMAAdsRenderingSettings`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdsRenderingSettingsProxyAPIDelegate : PigeonApiDelegateIMAAdsRenderingSettings {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAAdsRenderingSettings) throws -> IMAAdsRenderingSettings {
    return IMAAdsRenderingSettings()
  }

  func setMimeTypes(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, types: [String]?) throws {
    pigeonInstance.mimeTypes = types
  }

  func setBitrate(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, bitrate: Int64) throws {
    pigeonInstance.bitrate = bitrate
  }

  func setLoadVideoTimeout(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, seconds: Double) throws {
    pigeonInstance.loadVideoTimeout = seconds
  }

  func setPlayAdsAfterTime(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, seconds: Double) throws {
    pigeonInstance.playAdsAfterTime = seconds
  }

  func setUIElements(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, types: [UIElementType]?) throws {
    pigeonInstance.uIElements = types
  }

  func setEnablePreloading(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, enable: Bool) throws {
    pigeonInstance.enablePreloading = enable
  }

  func setLinkOpenerPresentingController(pigeonApi: PigeonApiIMAAdsRenderingSettings, pigeonInstance: IMAAdsRenderingSettings, controller: UIViewController) throws {
    pigeonInstance.linkOpenerPresentingController = controller
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class AdsRenderingSettingsTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRenderingSettings(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api )
    XCTAssertNotNil(instance)
  }

  func testSetMimeTypes() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRenderingSettings(registrar)

    let instance = TestAdsRenderingSettings()
    let types = ["myString"]
    try? api.pigeonDelegate.setMimeTypes(pigeonApi: api, pigeonInstance: instance, types: types)

    XCTAssertEqual(instance.setMimeTypesArgs, [types])
  }

  func testSetBitrate() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRenderingSettings(registrar)

    let instance = TestAdsRenderingSettings()
    let bitrate = 0
    try? api.pigeonDelegate.setBitrate(pigeonApi: api, pigeonInstance: instance, bitrate: bitrate)

    XCTAssertEqual(instance.setBitrateArgs, [bitrate])
  }

  func testSetLoadVideoTimeout() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRenderingSettings(registrar)

    let instance = TestAdsRenderingSettings()
    let seconds = 1.0
    try? api.pigeonDelegate.setLoadVideoTimeout(pigeonApi: api, pigeonInstance: instance, seconds: seconds)

    XCTAssertEqual(instance.setLoadVideoTimeoutArgs, [seconds])
  }

  func testSetPlayAdsAfterTime() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRenderingSettings(registrar)

    let instance = TestAdsRenderingSettings()
    let seconds = 1.0
    try? api.pigeonDelegate.setPlayAdsAfterTime(pigeonApi: api, pigeonInstance: instance, seconds: seconds)

    XCTAssertEqual(instance.setPlayAdsAfterTimeArgs, [seconds])
  }

  func testSetUIElements() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRenderingSettings(registrar)

    let instance = TestAdsRenderingSettings()
    let types = [.adAttribution]
    try? api.pigeonDelegate.setUIElements(pigeonApi: api, pigeonInstance: instance, types: types)

    XCTAssertEqual(instance.setUIElementsArgs, [types])
  }

  func testSetEnablePreloading() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRenderingSettings(registrar)

    let instance = TestAdsRenderingSettings()
    let enable = true
    try? api.pigeonDelegate.setEnablePreloading(pigeonApi: api, pigeonInstance: instance, enable: enable)

    XCTAssertEqual(instance.setEnablePreloadingArgs, [enable])
  }

  func testSetLinkOpenerPresentingController() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdsRenderingSettings(registrar)

    let instance = TestAdsRenderingSettings()
    let controller = TestViewController
    try? api.pigeonDelegate.setLinkOpenerPresentingController(pigeonApi: api, pigeonInstance: instance, controller: controller)

    XCTAssertEqual(instance.setLinkOpenerPresentingControllerArgs, [controller])
  }

}
class TestAdsRenderingSettings: IMAAdsRenderingSettings {
  var setMimeTypesArgs: [AnyHashable?]? = nil
  var setBitrateArgs: [AnyHashable?]? = nil
  var setLoadVideoTimeoutArgs: [AnyHashable?]? = nil
  var setPlayAdsAfterTimeArgs: [AnyHashable?]? = nil
  var setUIElementsArgs: [AnyHashable?]? = nil
  var setEnablePreloadingArgs: [AnyHashable?]? = nil
  var setLinkOpenerPresentingControllerArgs: [AnyHashable?]? = nil


  override func setMimeTypes() {
    setMimeTypesArgs = [types]
  }
  override func setBitrate() {
    setBitrateArgs = [bitrate]
  }
  override func setLoadVideoTimeout() {
    setLoadVideoTimeoutArgs = [seconds]
  }
  override func setPlayAdsAfterTime() {
    setPlayAdsAfterTimeArgs = [seconds]
  }
  override func setUIElements() {
    setUIElementsArgs = [types]
  }
  override func setEnablePreloading() {
    setEnablePreloadingArgs = [enable]
  }
  override func setLinkOpenerPresentingController() {
    setLinkOpenerPresentingControllerArgs = [controller]
  }
}
*/

open class PigeonApiDelegateNSObject {
}

protocol PigeonApiProtocolNSObject {
}

final class PigeonApiNSObject: PigeonApiProtocolNSObject  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateNSObject
  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateNSObject) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  ///Creates a Dart instance of NSObject and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: NSObject, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.NSObject.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}
protocol PigeonApiDelegateIMAFriendlyObstruction {
  /// Initializes a friendly obstruction.
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAFriendlyObstruction, view: UIView, purpose: FriendlyObstructionPurpose, detailedReason: String?) throws -> IMAFriendlyObstruction
  /// The view causing the obstruction.
  func view(pigeonApi: PigeonApiIMAFriendlyObstruction, pigeonInstance: IMAFriendlyObstruction) throws -> UIView
  /// The purpose for registering the obstruction as friendly.
  func purpose(pigeonApi: PigeonApiIMAFriendlyObstruction, pigeonInstance: IMAFriendlyObstruction) throws -> FriendlyObstructionPurpose
  /// Optional, detailed reasoning for registering this obstruction as friendly.
  ///
  /// If the detailedReason is not null, it must follow the IAB standard by
  /// being 50 characters or less and only containing characters A-z, 0-9, or
  /// spaces.
  func detailedReason(pigeonApi: PigeonApiIMAFriendlyObstruction, pigeonInstance: IMAFriendlyObstruction) throws -> String?
}

protocol PigeonApiProtocolIMAFriendlyObstruction {
}

final class PigeonApiIMAFriendlyObstruction: PigeonApiProtocolIMAFriendlyObstruction  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAFriendlyObstruction
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAFriendlyObstruction) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMAFriendlyObstruction?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMAFriendlyObstruction.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let viewArg = args[1] as! UIView
        let purposeArg = args[2] as! FriendlyObstructionPurpose
        let detailedReasonArg: String? = nilOrValue(args[3])
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api, view: viewArg, purpose: purposeArg, detailedReason: detailedReasonArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMAFriendlyObstruction and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAFriendlyObstruction, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let viewArg = try! pigeonDelegate.view(pigeonApi: self, pigeonInstance: pigeonInstance)
      let purposeArg = try! pigeonDelegate.purpose(pigeonApi: self, pigeonInstance: pigeonInstance)
      let detailedReasonArg = try! pigeonDelegate.detailedReason(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAFriendlyObstruction.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, viewArg, purposeArg, detailedReasonArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation
import UIKit


/// ProxyApi implementation for `IMAFriendlyObstruction`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class FriendlyObstructionProxyAPIDelegate : PigeonApiDelegateIMAFriendlyObstruction {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMAFriendlyObstruction, view: UIView, purpose: FriendlyObstructionPurpose, detailedReason: String?) throws -> IMAFriendlyObstruction {
    return IMAFriendlyObstruction()
  }

  func view(pigeonApi: PigeonApiIMAFriendlyObstruction, pigeonInstance: IMAFriendlyObstruction) throws -> UIView {
    return pigeonInstance.view
  }

  func purpose(pigeonApi: PigeonApiIMAFriendlyObstruction, pigeonInstance: IMAFriendlyObstruction) throws -> FriendlyObstructionPurpose {
    switch pigeonInstance.purpose {
      case .mediaControls:
        return .mediaControls
      case .closeAd:
        return .closeAd
      case .notVisible:
        return .notVisible
      case .other:
        return .other
      @unknown default:
        return .unknown
    }
  }

  func detailedReason(pigeonApi: PigeonApiIMAFriendlyObstruction, pigeonInstance: IMAFriendlyObstruction) throws -> String? {
    return pigeonInstance.detailedReason
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import UIKit
import Flutter
import XCTest

@testable import interactive_media_ads

class FriendlyObstructionTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAFriendlyObstruction(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api view: TestView, purpose: .mediaControls, detailedReason: "myString")
    XCTAssertNotNil(instance)
  }

  func testView() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAFriendlyObstruction(registrar)

    let instance = TestFriendlyObstruction()
    let value = try? api.pigeonDelegate.view(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.view)
  }

  func testPurpose() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAFriendlyObstruction(registrar)

    let instance = TestFriendlyObstruction()
    let value = try? api.pigeonDelegate.purpose(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.purpose)
  }

  func testDetailedReason() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAFriendlyObstruction(registrar)

    let instance = TestFriendlyObstruction()
    let value = try? api.pigeonDelegate.detailedReason(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.detailedReason)
  }

}
*/

protocol PigeonApiDelegateIMACompanionAd {
  /// The value for the resource of this companion.
  func resourceValue(pigeonApi: PigeonApiIMACompanionAd, pigeonInstance: IMACompanionAd) throws -> String?
  /// The API needed to execute this ad, or nil if unavailable.
  func apiFramework(pigeonApi: PigeonApiIMACompanionAd, pigeonInstance: IMACompanionAd) throws -> String?
  /// The width of the companion in pixels.
  ///
  /// 0 if unavailable.
  func width(pigeonApi: PigeonApiIMACompanionAd, pigeonInstance: IMACompanionAd) throws -> Int64
  /// The height of the companion in pixels.
  ///
  /// 0 if unavailable.
  func height(pigeonApi: PigeonApiIMACompanionAd, pigeonInstance: IMACompanionAd) throws -> Int64
}

protocol PigeonApiProtocolIMACompanionAd {
}

final class PigeonApiIMACompanionAd: PigeonApiProtocolIMACompanionAd  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMACompanionAd
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMACompanionAd) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  ///Creates a Dart instance of IMACompanionAd and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMACompanionAd, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let resourceValueArg = try! pigeonDelegate.resourceValue(pigeonApi: self, pigeonInstance: pigeonInstance)
      let apiFrameworkArg = try! pigeonDelegate.apiFramework(pigeonApi: self, pigeonInstance: pigeonInstance)
      let widthArg = try! pigeonDelegate.width(pigeonApi: self, pigeonInstance: pigeonInstance)
      let heightArg = try! pigeonDelegate.height(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMACompanionAd.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, resourceValueArg, apiFrameworkArg, widthArg, heightArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation



/// ProxyApi implementation for `IMACompanionAd`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class CompanionAdProxyAPIDelegate : PigeonApiDelegateIMACompanionAd {
  func resourceValue(pigeonApi: PigeonApiIMACompanionAd, pigeonInstance: IMACompanionAd) throws -> String? {
    return pigeonInstance.resourceValue
  }

  func apiFramework(pigeonApi: PigeonApiIMACompanionAd, pigeonInstance: IMACompanionAd) throws -> String? {
    return pigeonInstance.apiFramework
  }

  func width(pigeonApi: PigeonApiIMACompanionAd, pigeonInstance: IMACompanionAd) throws -> Int64 {
    return pigeonInstance.width
  }

  func height(pigeonApi: PigeonApiIMACompanionAd, pigeonInstance: IMACompanionAd) throws -> Int64 {
    return pigeonInstance.height
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class CompanionAdProxyApiTests: XCTestCase {
  func testResourceValue() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAd(registrar)

    let instance = TestCompanionAd()
    let value = try? api.pigeonDelegate.resourceValue(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.resourceValue)
  }

  func testApiFramework() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAd(registrar)

    let instance = TestCompanionAd()
    let value = try? api.pigeonDelegate.apiFramework(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.apiFramework)
  }

  func testWidth() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAd(registrar)

    let instance = TestCompanionAd()
    let value = try? api.pigeonDelegate.width(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.width)
  }

  func testHeight() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAd(registrar)

    let instance = TestCompanionAd()
    let value = try? api.pigeonDelegate.height(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.height)
  }

}
*/

protocol PigeonApiDelegateIMACompanionAdSlot {
  /// Initializes an instance of a IMACompanionAdSlot with fluid size.
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMACompanionAdSlot, view: UIView) throws -> IMACompanionAdSlot
  /// Initializes an instance of a IMACompanionAdSlot with design ad width and
  /// height.
  ///
  /// `width` and `height` are in pixels.
  func size(pigeonApi: PigeonApiIMACompanionAdSlot, view: UIView, width: Int64, height: Int64) throws -> IMACompanionAdSlot
  /// The view the companion will be rendered in.
  ///
  /// Display this view in your application before video ad starts.
  func view(pigeonApi: PigeonApiIMACompanionAdSlot, pigeonInstance: IMACompanionAdSlot) throws -> UIView
  /// The IMACompanionDelegate for receiving events from the companion ad slot.
  ///
  /// This instance only creates a weak reference to the delegate, so the Dart
  /// instance should create an explicit reference to receive callbacks.
  func setDelegate(pigeonApi: PigeonApiIMACompanionAdSlot, pigeonInstance: IMACompanionAdSlot, delegate: IMACompanionDelegate?) throws
  /// Width of the slot, in pixels.
  func width(pigeonApi: PigeonApiIMACompanionAdSlot, pigeonInstance: IMACompanionAdSlot) throws -> Int64
  /// Height of the slot, in pixels.
  func height(pigeonApi: PigeonApiIMACompanionAdSlot, pigeonInstance: IMACompanionAdSlot) throws -> Int64
}

protocol PigeonApiProtocolIMACompanionAdSlot {
}

final class PigeonApiIMACompanionAdSlot: PigeonApiProtocolIMACompanionAdSlot  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMACompanionAdSlot
  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMACompanionAdSlot) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMACompanionAdSlot?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMACompanionAdSlot.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let viewArg = args[1] as! UIView
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api, view: viewArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
    let sizeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMACompanionAdSlot.size", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      sizeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        let viewArg = args[1] as! UIView
        let widthArg = args[2] as! Int64
        let heightArg = args[3] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.size(pigeonApi: api, view: viewArg, width: widthArg, height: heightArg),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      sizeChannel.setMessageHandler(nil)
    }
    let setDelegateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMACompanionAdSlot.setDelegate", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setDelegateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMACompanionAdSlot
        let delegateArg: IMACompanionDelegate? = nilOrValue(args[1])
        do {
          try api.pigeonDelegate.setDelegate(pigeonApi: api, pigeonInstance: pigeonInstanceArg, delegate: delegateArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setDelegateChannel.setMessageHandler(nil)
    }
    let widthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMACompanionAdSlot.width", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      widthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMACompanionAdSlot
        do {
          let result = try api.pigeonDelegate.width(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      widthChannel.setMessageHandler(nil)
    }
    let heightChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMACompanionAdSlot.height", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      heightChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonInstanceArg = args[0] as! IMACompanionAdSlot
        do {
          let result = try api.pigeonDelegate.height(pigeonApi: api, pigeonInstance: pigeonInstanceArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      heightChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMACompanionAdSlot and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMACompanionAdSlot, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let viewArg = try! pigeonDelegate.view(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMACompanionAdSlot.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, viewArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation
import UIKit


/// ProxyApi implementation for `IMACompanionAdSlot`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class CompanionAdSlotProxyAPIDelegate : PigeonApiDelegateIMACompanionAdSlot {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMACompanionAdSlot, view: UIView) throws -> IMACompanionAdSlot {
    return IMACompanionAdSlot()
  }

  func size(pigeonApi: PigeonApiIMACompanionAdSlot, view: UIView, width: Int64, height: Int64) throws -> IMACompanionAdSlot {
    return IMACompanionAdSlot(,width: width, height: height)
  }

  func view(pigeonApi: PigeonApiIMACompanionAdSlot, pigeonInstance: IMACompanionAdSlot) throws -> UIView {
    return pigeonInstance.view
  }

  func setDelegate(pigeonApi: PigeonApiIMACompanionAdSlot, pigeonInstance: IMACompanionAdSlot, delegate: IMACompanionDelegate?) throws {
    pigeonInstance.delegate = delegate
  }

  func width(pigeonApi: PigeonApiIMACompanionAdSlot, pigeonInstance: IMACompanionAdSlot) throws -> Int64 {
    return pigeonInstance.width()
  }

  func height(pigeonApi: PigeonApiIMACompanionAdSlot, pigeonInstance: IMACompanionAdSlot) throws -> Int64 {
    return pigeonInstance.height()
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import UIKit
import Flutter
import XCTest

@testable import interactive_media_ads

class CompanionAdSlotProxyApiTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAdSlot(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api view: TestView)
    XCTAssertNotNil(instance)
  }

  func testSize() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAdSlot(registrar)

    let instance = try? api.pigeonDelegate.size(pigeonApi: api, view: TestView, width: 0, height: 0)
    XCTAssertNotNil(instance)
  }

  func testView() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAdSlot(registrar)

    let instance = TestCompanionAdSlot()
    let value = try? api.pigeonDelegate.view(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.view)
  }

  func testSetDelegate() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAdSlot(registrar)

    let instance = TestCompanionAdSlot()
    let delegate = TestCompanionDelegate
    try? api.pigeonDelegate.setDelegate(pigeonApi: api, pigeonInstance: instance, delegate: delegate)

    XCTAssertEqual(instance.setDelegateArgs, [delegate])
  }

  func testWidth() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAdSlot(registrar)

    let instance = TestCompanionAdSlot()
    let value = try? api.pigeonDelegate.width(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.widthCalled)
    XCTAssertEqual(value, instance.width())
  }

  func testHeight() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionAdSlot(registrar)

    let instance = TestCompanionAdSlot()
    let value = try? api.pigeonDelegate.height(pigeonApi: api, pigeonInstance: instance )

    XCTAssertTrue(instance.heightCalled)
    XCTAssertEqual(value, instance.height())
  }

}
class TestCompanionAdSlot: IMACompanionAdSlot {
  private var viewTestValue = TestView
  var setDelegateArgs: [AnyHashable?]? = nil
  var widthCalled = false
  var heightCalled = false

  override var view: UIView {
    return viewTestValue
  }

  override func setDelegate() {
    setDelegateArgs = [delegate]
  }
  override func width() {
    widthCalled = true
  }
  override func height() {
    heightCalled = true
  }
}
*/

protocol PigeonApiDelegateIMACompanionDelegate {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMACompanionDelegate) throws -> IMACompanionDelegate
}

protocol PigeonApiProtocolIMACompanionDelegate {
  /// Called when the slot is either filled or not filled.
  func companionAdSlotFilled(pigeonInstance pigeonInstanceArg: IMACompanionDelegate, slot slotArg: IMACompanionAdSlot, filled filledArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// Called when the slot is clicked on by the user and will successfully
  /// navigate away.
  func companionSlotWasClicked(pigeonInstance pigeonInstanceArg: IMACompanionDelegate, slot slotArg: IMACompanionAdSlot, completion: @escaping (Result<Void, PigeonError>) -> Void)
}

final class PigeonApiIMACompanionDelegate: PigeonApiProtocolIMACompanionDelegate  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMACompanionDelegate
  ///An implementation of [NSObject] used to access callback methods
  var pigeonApiNSObject: PigeonApiNSObject {
    return pigeonRegistrar.apiDelegate.pigeonApiNSObject(pigeonRegistrar)
  }

  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMACompanionDelegate) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  static func setUpMessageHandlers(binaryMessenger: FlutterBinaryMessenger, api: PigeonApiIMACompanionDelegate?) {
    let codec: FlutterStandardMessageCodec =
      api != nil
      ? FlutterStandardMessageCodec(
        readerWriter: InteractiveMediaAdsLibraryPigeonInternalProxyApiCodecReaderWriter(pigeonRegistrar: api!.pigeonRegistrar))
      : FlutterStandardMessageCodec.sharedInstance()
    let pigeonDefaultConstructorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.interactive_media_ads.IMACompanionDelegate.pigeon_defaultConstructor", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pigeonDefaultConstructorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pigeonIdentifierArg = args[0] as! Int64
        do {
          api.pigeonRegistrar.instanceManager.addDartCreatedInstance(
try api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api),
withIdentifier: pigeonIdentifierArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      pigeonDefaultConstructorChannel.setMessageHandler(nil)
    }
  }

  ///Creates a Dart instance of IMACompanionDelegate and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMACompanionDelegate, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMACompanionDelegate.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
  /// Called when the slot is either filled or not filled.
  func companionAdSlotFilled(pigeonInstance pigeonInstanceArg: IMACompanionDelegate, slot slotArg: IMACompanionAdSlot, filled filledArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)   {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
      return
    }
    let binaryMessenger = pigeonRegistrar.binaryMessenger
    let codec = pigeonRegistrar.codec
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMACompanionDelegate.companionAdSlotFilled"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pigeonInstanceArg, slotArg, filledArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }

  /// Called when the slot is clicked on by the user and will successfully
  /// navigate away.
  func companionSlotWasClicked(pigeonInstance pigeonInstanceArg: IMACompanionDelegate, slot slotArg: IMACompanionAdSlot, completion: @escaping (Result<Void, PigeonError>) -> Void)   {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
      return
    }
    let binaryMessenger = pigeonRegistrar.binaryMessenger
    let codec = pigeonRegistrar.codec
    let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMACompanionDelegate.companionSlotWasClicked"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([pigeonInstanceArg, slotArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(()))
      }
    }
  }

}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation


/// Implementation of `IMACompanionDelegate` that calls to Dart in callback methods.
class CompanionDelegateImpl: IMACompanionDelegate {
  let api: PigeonApiProtocolIMACompanionDelegate

  init(api: PigeonApiProtocolIMACompanionDelegate) {
    self.api = api
  }

  func fixMe() {
    api.companionAdSlotFilled(pigeonInstance: self, slot: slot, filled: filled) {  _ in }
  }

  func fixMe() {
    api.companionSlotWasClicked(pigeonInstance: self, slot: slot) {  _ in }
  }
}

/// ProxyApi implementation for `IMACompanionDelegate`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class CompanionDelegateProxyAPIDelegate : PigeonApiDelegateIMACompanionDelegate {
  func pigeonDefaultConstructor(pigeonApi: PigeonApiIMACompanionDelegate) throws -> IMACompanionDelegate {
    return IMACompanionDelegateImpl(api: pigeonApi)
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


import Flutter
import XCTest

@testable import interactive_media_ads

class CompanionDelegateProxyApiTests: XCTestCase {
  func testPigeonDefaultConstructor() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMACompanionDelegate(registrar)

    let instance = try? api.pigeonDelegate.pigeonDefaultConstructor(pigeonApi: api )
    XCTAssertNotNil(instance)
  }

  func testCompanionAdSlotFilled() {
    let api = TestCompanionDelegateApi()
    let instance = CompanionDelegateImpl(api: api)
    let slot = TestCompanionAdSlot
    let filled = true
    instance.companionAdSlotFilled(slot: slot, filled: filled)

    XCTAssertEqual(api.companionAdSlotFilledArgs, [slot, filled])
  }

  func testCompanionSlotWasClicked() {
    let api = TestCompanionDelegateApi()
    let instance = CompanionDelegateImpl(api: api)
    let slot = TestCompanionAdSlot
    instance.companionSlotWasClicked(slot: slot)

    XCTAssertEqual(api.companionSlotWasClickedArgs, [slot])
  }

}
class TestCompanionDelegateApi: PigeonApiProtocolIMACompanionDelegate {
  var companionAdSlotFilledArgs: [AnyHashable?]? = nil
  var companionSlotWasClickedArgs: [AnyHashable?]? = nil

  func companionAdSlotFilled(slot: IMACompanionAdSlot, filled: Bool) throws {
    companionAdSlotFilledArgs = [slotArg, filledArg]
  }
  func companionSlotWasClicked(slot: IMACompanionAdSlot) throws {
    companionSlotWasClickedArgs = [slotArg]
  }
}
*/

protocol PigeonApiDelegateIMAAdPodInfo {
  /// The position of this ad within an ad pod.
  ///
  /// Will be 1 for standalone ads.
  func adPosition(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Int64
  /// The maximum duration of the pod in seconds.
  ///
  /// For unknown duration, -1 is returned.
  func maxDuration(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Double
  /// Returns the index of the ad pod.
  ///
  /// Client side: For a preroll pod, returns 0. For midrolls, returns 1, 2,…,
  /// N. For a postroll pod, returns -1. Defaults to 0 if this ad is not part of
  /// a pod, or this pod is not part of a playlist.
  ///
  /// DAI VOD: Returns the index of the ad pod. For a preroll pod, returns 0.
  /// For midrolls, returns 1, 2,…,N. For a postroll pod, returns N+1…N+X.
  /// Defaults to 0 if this ad is not part of a pod, or this pod is not part of
  /// a playlist.
  ///
  /// DAI live stream: For a preroll pod, returns 0. For midrolls, returns the
  /// break ID. Returns -2 if pod index cannot be determined (internal error).
  func podIndex(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Int64
  /// The position of the pod in the content in seconds.
  ///
  /// Pre-roll returns 0, post-roll returns -1 and mid-rolls return the
  /// scheduled time of the pod.
  func timeOffset(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Double
  /// Total number of ads in the pod this ad belongs to.
  ///
  /// Will be 1 for standalone ads.
  func totalAds(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Int64
  /// Specifies whether the ad is a bumper.
  ///
  /// Bumpers are short videos used to open and close ad breaks.
  func isBumper(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Bool
}

protocol PigeonApiProtocolIMAAdPodInfo {
}

final class PigeonApiIMAAdPodInfo: PigeonApiProtocolIMAAdPodInfo  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAdPodInfo
  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAdPodInfo) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  ///Creates a Dart instance of IMAAdPodInfo and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAdPodInfo, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let adPositionArg = try! pigeonDelegate.adPosition(pigeonApi: self, pigeonInstance: pigeonInstance)
      let maxDurationArg = try! pigeonDelegate.maxDuration(pigeonApi: self, pigeonInstance: pigeonInstance)
      let podIndexArg = try! pigeonDelegate.podIndex(pigeonApi: self, pigeonInstance: pigeonInstance)
      let timeOffsetArg = try! pigeonDelegate.timeOffset(pigeonApi: self, pigeonInstance: pigeonInstance)
      let totalAdsArg = try! pigeonDelegate.totalAds(pigeonApi: self, pigeonInstance: pigeonInstance)
      let isBumperArg = try! pigeonDelegate.isBumper(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAdPodInfo.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, adPositionArg, maxDurationArg, podIndexArg, timeOffsetArg, totalAdsArg, isBumperArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation
import GoogleInteractiveMediaAds


/// ProxyApi implementation for `IMAAdPodInfo`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdPodInfoProxyAPIDelegate : PigeonApiDelegateIMAAdPodInfo {
  func adPosition(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Int64 {
    return pigeonInstance.adPosition
  }

  func maxDuration(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Double {
    return pigeonInstance.maxDuration
  }

  func podIndex(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Int64 {
    return pigeonInstance.podIndex
  }

  func timeOffset(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Double {
    return pigeonInstance.timeOffset
  }

  func totalAds(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Int64 {
    return pigeonInstance.totalAds
  }

  func isBumper(pigeonApi: PigeonApiIMAAdPodInfo, pigeonInstance: IMAAdPodInfo) throws -> Bool {
    return pigeonInstance.isBumper
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import GoogleInteractiveMediaAds
import Flutter
import XCTest

@testable import interactive_media_ads

class AdPodInfoProxyAPITests: XCTestCase {
  func testAdPosition() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdPodInfo(registrar)

    let instance = TestAdPodInfo()
    let value = try? api.pigeonDelegate.adPosition(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adPosition)
  }

  func testMaxDuration() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdPodInfo(registrar)

    let instance = TestAdPodInfo()
    let value = try? api.pigeonDelegate.maxDuration(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.maxDuration)
  }

  func testPodIndex() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdPodInfo(registrar)

    let instance = TestAdPodInfo()
    let value = try? api.pigeonDelegate.podIndex(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.podIndex)
  }

  func testTimeOffset() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdPodInfo(registrar)

    let instance = TestAdPodInfo()
    let value = try? api.pigeonDelegate.timeOffset(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.timeOffset)
  }

  func testTotalAds() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdPodInfo(registrar)

    let instance = TestAdPodInfo()
    let value = try? api.pigeonDelegate.totalAds(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.totalAds)
  }

  func testIsBumper() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAdPodInfo(registrar)

    let instance = TestAdPodInfo()
    let value = try? api.pigeonDelegate.isBumper(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.isBumper)
  }

}
*/

protocol PigeonApiDelegateIMAAd {
  /// The ad ID as specified in the VAST response.
  func adId(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// The ad title from the VAST response.
  func adTitle(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// The ad description.
  func adDescription(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// The source ad server information included in the ad response.
  func adSystem(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// The companion ads specified in the VAST response when using DAI.
  ///
  /// Empty for client-side ads.
  func companionAds(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [IMACompanionAd]
  /// Content type of the currently selected creative.
  ///
  /// For linear creatives returns the content type of the currently selected
  /// media file. Returns empty string if no creative or media file is selected
  /// on this ad.
  func contentType(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// The duration of the ad from the VAST response.
  func duration(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Double
  /// The UI elements that will be displayed during ad playback.
  func uiElements(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [UIElementType]
  /// The width of the ad asset.
  ///
  /// For non-linear ads, this is the actual width of the ad representation.
  /// For linear ads, since they scale seamlessly, we currently return 0 for
  /// width.
  func width(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64
  /// The height of the ad asset.
  ///
  /// For non-linear ads, this is the actual height of the ad representation.
  /// For linear ads, since they scale seamlessly, we currently return 0 for
  /// height.
  func height(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64
  /// The width of the selected creative as specified in the VAST response.
  func vastMediaWidth(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64
  /// The height of the selected creative as specified in the VAST response.
  func vastMediaHeight(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64
  /// The bitrate of the selected creative as specified in the VAST response.
  func vastMediaBitrate(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64
  /// Specifies whether the ad is linear or non-linear.
  func isLinear(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Bool
  /// Specifies whether the ad is skippable.
  func isSkippable(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Bool
  /// The number of seconds of playback before the ad becomes skippable.
  ///
  /// -1 is returned for non skippable ads or if this is unavailable.
  func skipTimeOffset(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Double
  /// Set of ad podding properties.
  func adPodInfo(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> IMAAdPodInfo
  /// String representing custom trafficking parameters from the VAST response.
  func traffickingParameters(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// Returns the ID of the selected creative for the ad.
  func creativeID(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// Returns the ISCI (Industry Standard Commercial Identifier) code for an ad.
  ///
  /// This is the Ad-ID of the selected creative in the VAST response.
  func creativeAdID(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// The list of all UniversalAdIds of the selected creative for this ad.
  ///
  /// Returns an empty array if no universal ad IDs are found.
  func universalAdIDs(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [IMAUniversalAdID]
  /// The advertiser name as defined by the serving party.
  func advertiserName(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// Returns the URL associated with the survey for the given ad.
  func surveyURL(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String?
  /// Returns the first deal ID present in the wrapper chain for the current ad,
  /// starting from the top.
  func dealID(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String
  /// The IDs of the ads, starting with the first wrapper ad.
  func wrapperAdIDs(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [String]
  /// The IDs of the ads’ creatives, starting with the first wrapper ad.
  func wrapperCreativeIDs(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [String]
  /// Ad systems used for wrapper ads.
  ///
  /// The ad systems returned begin with the first wrapper ad and continue to
  /// each wrapper ad recursively.
  func wrapperSystems(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [String]
}

protocol PigeonApiProtocolIMAAd {
}

final class PigeonApiIMAAd: PigeonApiProtocolIMAAd  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAAd
  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAAd) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  ///Creates a Dart instance of IMAAd and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAAd, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let adIdArg = try! pigeonDelegate.adId(pigeonApi: self, pigeonInstance: pigeonInstance)
      let adTitleArg = try! pigeonDelegate.adTitle(pigeonApi: self, pigeonInstance: pigeonInstance)
      let adDescriptionArg = try! pigeonDelegate.adDescription(pigeonApi: self, pigeonInstance: pigeonInstance)
      let adSystemArg = try! pigeonDelegate.adSystem(pigeonApi: self, pigeonInstance: pigeonInstance)
      let companionAdsArg = try! pigeonDelegate.companionAds(pigeonApi: self, pigeonInstance: pigeonInstance)
      let contentTypeArg = try! pigeonDelegate.contentType(pigeonApi: self, pigeonInstance: pigeonInstance)
      let durationArg = try! pigeonDelegate.duration(pigeonApi: self, pigeonInstance: pigeonInstance)
      let uiElementsArg = try! pigeonDelegate.uiElements(pigeonApi: self, pigeonInstance: pigeonInstance)
      let widthArg = try! pigeonDelegate.width(pigeonApi: self, pigeonInstance: pigeonInstance)
      let heightArg = try! pigeonDelegate.height(pigeonApi: self, pigeonInstance: pigeonInstance)
      let vastMediaWidthArg = try! pigeonDelegate.vastMediaWidth(pigeonApi: self, pigeonInstance: pigeonInstance)
      let vastMediaHeightArg = try! pigeonDelegate.vastMediaHeight(pigeonApi: self, pigeonInstance: pigeonInstance)
      let vastMediaBitrateArg = try! pigeonDelegate.vastMediaBitrate(pigeonApi: self, pigeonInstance: pigeonInstance)
      let isLinearArg = try! pigeonDelegate.isLinear(pigeonApi: self, pigeonInstance: pigeonInstance)
      let isSkippableArg = try! pigeonDelegate.isSkippable(pigeonApi: self, pigeonInstance: pigeonInstance)
      let skipTimeOffsetArg = try! pigeonDelegate.skipTimeOffset(pigeonApi: self, pigeonInstance: pigeonInstance)
      let adPodInfoArg = try! pigeonDelegate.adPodInfo(pigeonApi: self, pigeonInstance: pigeonInstance)
      let traffickingParametersArg = try! pigeonDelegate.traffickingParameters(pigeonApi: self, pigeonInstance: pigeonInstance)
      let creativeIDArg = try! pigeonDelegate.creativeID(pigeonApi: self, pigeonInstance: pigeonInstance)
      let creativeAdIDArg = try! pigeonDelegate.creativeAdID(pigeonApi: self, pigeonInstance: pigeonInstance)
      let universalAdIDsArg = try! pigeonDelegate.universalAdIDs(pigeonApi: self, pigeonInstance: pigeonInstance)
      let advertiserNameArg = try! pigeonDelegate.advertiserName(pigeonApi: self, pigeonInstance: pigeonInstance)
      let surveyURLArg = try! pigeonDelegate.surveyURL(pigeonApi: self, pigeonInstance: pigeonInstance)
      let dealIDArg = try! pigeonDelegate.dealID(pigeonApi: self, pigeonInstance: pigeonInstance)
      let wrapperAdIDsArg = try! pigeonDelegate.wrapperAdIDs(pigeonApi: self, pigeonInstance: pigeonInstance)
      let wrapperCreativeIDsArg = try! pigeonDelegate.wrapperCreativeIDs(pigeonApi: self, pigeonInstance: pigeonInstance)
      let wrapperSystemsArg = try! pigeonDelegate.wrapperSystems(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAAd.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, adIdArg, adTitleArg, adDescriptionArg, adSystemArg, companionAdsArg, contentTypeArg, durationArg, uiElementsArg, widthArg, heightArg, vastMediaWidthArg, vastMediaHeightArg, vastMediaBitrateArg, isLinearArg, isSkippableArg, skipTimeOffsetArg, adPodInfoArg, traffickingParametersArg, creativeIDArg, creativeAdIDArg, universalAdIDsArg, advertiserNameArg, surveyURLArg, dealIDArg, wrapperAdIDsArg, wrapperCreativeIDsArg, wrapperSystemsArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation
import GoogleInteractiveMediaAds


/// ProxyApi implementation for `IMAAd`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class AdProxyAPIDelegate : PigeonApiDelegateIMAAd {
  func adId(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.adId
  }

  func adTitle(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.adTitle
  }

  func adDescription(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.adDescription
  }

  func adSystem(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.adSystem
  }

  func companionAds(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [IMACompanionAd] {
    return pigeonInstance.companionAds
  }

  func contentType(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.contentType
  }

  func duration(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Double {
    return pigeonInstance.duration
  }

  func uiElements(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [UIElementType] {
    return pigeonInstance.uiElements
  }

  func width(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64 {
    return pigeonInstance.width
  }

  func height(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64 {
    return pigeonInstance.height
  }

  func vastMediaWidth(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64 {
    return pigeonInstance.vastMediaWidth
  }

  func vastMediaHeight(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64 {
    return pigeonInstance.vastMediaHeight
  }

  func vastMediaBitrate(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Int64 {
    return pigeonInstance.vastMediaBitrate
  }

  func isLinear(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Bool {
    return pigeonInstance.isLinear
  }

  func isSkippable(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Bool {
    return pigeonInstance.isSkippable
  }

  func skipTimeOffset(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> Double {
    return pigeonInstance.skipTimeOffset
  }

  func adPodInfo(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> IMAAdPodInfo {
    return pigeonInstance.adPodInfo
  }

  func traffickingParameters(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.traffickingParameters
  }

  func creativeID(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.creativeID
  }

  func creativeAdID(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.creativeAdID
  }

  func universalAdIDs(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [IMAUniversalAdID] {
    return pigeonInstance.universalAdIDs
  }

  func advertiserName(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.advertiserName
  }

  func surveyURL(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String? {
    return pigeonInstance.surveyURL
  }

  func dealID(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> String {
    return pigeonInstance.dealID
  }

  func wrapperAdIDs(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [String] {
    return pigeonInstance.wrapperAdIDs
  }

  func wrapperCreativeIDs(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [String] {
    return pigeonInstance.wrapperCreativeIDs
  }

  func wrapperSystems(pigeonApi: PigeonApiIMAAd, pigeonInstance: IMAAd) throws -> [String] {
    return pigeonInstance.wrapperSystems
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import GoogleInteractiveMediaAds
import Flutter
import XCTest

@testable import interactive_media_ads

class AdProxyAPITests: XCTestCase {
  func testAdId() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.adId(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adId)
  }

  func testAdTitle() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.adTitle(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adTitle)
  }

  func testAdDescription() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.adDescription(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adDescription)
  }

  func testAdSystem() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.adSystem(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adSystem)
  }

  func testCompanionAds() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.companionAds(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.companionAds)
  }

  func testContentType() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.contentType(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.contentType)
  }

  func testDuration() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.duration(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.duration)
  }

  func testUiElements() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.uiElements(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.uiElements)
  }

  func testWidth() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.width(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.width)
  }

  func testHeight() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.height(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.height)
  }

  func testVastMediaWidth() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.vastMediaWidth(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.vastMediaWidth)
  }

  func testVastMediaHeight() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.vastMediaHeight(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.vastMediaHeight)
  }

  func testVastMediaBitrate() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.vastMediaBitrate(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.vastMediaBitrate)
  }

  func testIsLinear() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.isLinear(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.isLinear)
  }

  func testIsSkippable() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.isSkippable(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.isSkippable)
  }

  func testSkipTimeOffset() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.skipTimeOffset(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.skipTimeOffset)
  }

  func testAdPodInfo() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.adPodInfo(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adPodInfo)
  }

  func testTraffickingParameters() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.traffickingParameters(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.traffickingParameters)
  }

  func testCreativeID() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.creativeID(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.creativeID)
  }

  func testCreativeAdID() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.creativeAdID(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.creativeAdID)
  }

  func testUniversalAdIDs() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.universalAdIDs(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.universalAdIDs)
  }

  func testAdvertiserName() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.advertiserName(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.advertiserName)
  }

  func testSurveyURL() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.surveyURL(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.surveyURL)
  }

  func testDealID() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.dealID(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.dealID)
  }

  func testWrapperAdIDs() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.wrapperAdIDs(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.wrapperAdIDs)
  }

  func testWrapperCreativeIDs() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.wrapperCreativeIDs(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.wrapperCreativeIDs)
  }

  func testWrapperSystems() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAAd(registrar)

    let instance = TestAd()
    let value = try? api.pigeonDelegate.wrapperSystems(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.wrapperSystems)
  }

}
*/

protocol PigeonApiDelegateIMAUniversalAdID {
  /// The universal ad ID value.
  ///
  /// This will be “unknown” if it isn’t defined by the ad.
  func adIDValue(pigeonApi: PigeonApiIMAUniversalAdID, pigeonInstance: IMAUniversalAdID) throws -> String
  /// The universal ad ID registry with which the value is registered.
  ///
  /// This will be “unknown” if it isn’t defined by the ad.
  func adIDRegistry(pigeonApi: PigeonApiIMAUniversalAdID, pigeonInstance: IMAUniversalAdID) throws -> String
}

protocol PigeonApiProtocolIMAUniversalAdID {
}

final class PigeonApiIMAUniversalAdID: PigeonApiProtocolIMAUniversalAdID  {
  unowned let pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar
  let pigeonDelegate: PigeonApiDelegateIMAUniversalAdID
  init(pigeonRegistrar: InteractiveMediaAdsLibraryPigeonProxyApiRegistrar, delegate: PigeonApiDelegateIMAUniversalAdID) {
    self.pigeonRegistrar = pigeonRegistrar
    self.pigeonDelegate = delegate
  }
  ///Creates a Dart instance of IMAUniversalAdID and attaches it to [pigeonInstance].
  func pigeonNewInstance(pigeonInstance: IMAUniversalAdID, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    if pigeonRegistrar.ignoreCallsToDart {
      completion(
        .failure(
          PigeonError(
            code: "ignore-calls-error",
            message: "Calls to Dart are being ignored.", details: "")))
    }     else if pigeonRegistrar.instanceManager.containsInstance(pigeonInstance as AnyObject) {
      completion(.success(()))
    }     else {
      let pigeonIdentifierArg = pigeonRegistrar.instanceManager.addHostCreatedInstance(pigeonInstance as AnyObject)
      let adIDValueArg = try! pigeonDelegate.adIDValue(pigeonApi: self, pigeonInstance: pigeonInstance)
      let adIDRegistryArg = try! pigeonDelegate.adIDRegistry(pigeonApi: self, pigeonInstance: pigeonInstance)
      let binaryMessenger = pigeonRegistrar.binaryMessenger
      let codec = pigeonRegistrar.codec
      let channelName: String = "dev.flutter.pigeon.interactive_media_ads.IMAUniversalAdID.pigeon_newInstance"
      let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
      channel.sendMessage([pigeonIdentifierArg, adIDValueArg, adIDRegistryArg] as [Any?]) { response in
        guard let listResponse = response as? [Any?] else {
          completion(.failure(createConnectionError(withChannelName: channelName)))
          return
        }
        if listResponse.count > 1 {
          let code: String = listResponse[0] as! String
          let message: String? = nilOrValue(listResponse[1])
          let details: String? = nilOrValue(listResponse[2])
          completion(.failure(PigeonError(code: code, message: message, details: details)))
        } else {
          completion(.success(()))
        }
      }
    }
  }
}

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import Foundation
import GoogleInteractiveMediaAds


/// ProxyApi implementation for `IMAUniversalAdID`.
///
/// This class may handle instantiating native object instances that are attached to a Dart instance
/// or handle method calls on the associated native class or an instance of that class.
class UniversalAdIDProxyAPIDelegate : PigeonApiDelegateIMAUniversalAdID {
  func adIDValue(pigeonApi: PigeonApiIMAUniversalAdID, pigeonInstance: IMAUniversalAdID) throws -> String {
    return pigeonInstance.adIDValue
  }

  func adIDRegistry(pigeonApi: PigeonApiIMAUniversalAdID, pigeonInstance: IMAUniversalAdID) throws -> String {
    return pigeonInstance.adIDRegistry
  }

}
*/

/*
// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import GoogleInteractiveMediaAds
import Flutter
import XCTest

@testable import interactive_media_ads

class UniversalAdIDProxyAPITests: XCTestCase {
  func testAdIDValue() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAUniversalAdID(registrar)

    let instance = TestUniversalAdID()
    let value = try? api.pigeonDelegate.adIDValue(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adIDValue)
  }

  func testAdIDRegistry() {
    let registrar = TestProxyApiRegistrar()
    let api = registrar.apiDelegate.pigeonApiIMAUniversalAdID(registrar)

    let instance = TestUniversalAdID()
    let value = try? api.pigeonDelegate.adIDRegistry(pigeonApi: api, pigeonInstance: instance)

    XCTAssertEqual(value, instance.adIDRegistry)
  }

}
*/

