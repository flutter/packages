// Mocks generated by Mockito 5.4.6 from annotations
// in interactive_media_ads/test/android/ad_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:interactive_media_ads/src/android/interactive_media_ads.g.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePigeonInstanceManager_0 extends _i1.SmartFake
    implements _i2.PigeonInstanceManager {
  _FakePigeonInstanceManager_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAdsManager_1 extends _i1.SmartFake implements _i2.AdsManager {
  _FakeAdsManager_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAdEvent_2 extends _i1.SmartFake implements _i2.AdEvent {
  _FakeAdEvent_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAdEventListener_3 extends _i1.SmartFake
    implements _i2.AdEventListener {
  _FakeAdEventListener_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAdErrorListener_4 extends _i1.SmartFake
    implements _i2.AdErrorListener {
  _FakeAdErrorListener_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AdsManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdsManager extends _i1.Mock implements _i2.AdsManager {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager =>
      (super.noSuchMethod(
            Invocation.getter(#pigeon_instanceManager),
            returnValue: _FakePigeonInstanceManager_0(
              this,
              Invocation.getter(#pigeon_instanceManager),
            ),
            returnValueForMissingStub: _FakePigeonInstanceManager_0(
              this,
              Invocation.getter(#pigeon_instanceManager),
            ),
          )
          as _i2.PigeonInstanceManager);

  @override
  _i3.Future<void> discardAdBreak() =>
      (super.noSuchMethod(
            Invocation.method(#discardAdBreak, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> pause() =>
      (super.noSuchMethod(
            Invocation.method(#pause, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> start() =>
      (super.noSuchMethod(
            Invocation.method(#start, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<double>> getAdCuePoints() =>
      (super.noSuchMethod(
            Invocation.method(#getAdCuePoints, []),
            returnValue: _i3.Future<List<double>>.value(<double>[]),
            returnValueForMissingStub: _i3.Future<List<double>>.value(
              <double>[],
            ),
          )
          as _i3.Future<List<double>>);

  @override
  _i3.Future<void> resume() =>
      (super.noSuchMethod(
            Invocation.method(#resume, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> skip() =>
      (super.noSuchMethod(
            Invocation.method(#skip, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i2.AdsManager pigeon_copy() =>
      (super.noSuchMethod(
            Invocation.method(#pigeon_copy, []),
            returnValue: _FakeAdsManager_1(
              this,
              Invocation.method(#pigeon_copy, []),
            ),
            returnValueForMissingStub: _FakeAdsManager_1(
              this,
              Invocation.method(#pigeon_copy, []),
            ),
          )
          as _i2.AdsManager);

  @override
  _i3.Future<void> addAdErrorListener(_i2.AdErrorListener? errorListener) =>
      (super.noSuchMethod(
            Invocation.method(#addAdErrorListener, [errorListener]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> addAdEventListener(_i2.AdEventListener? adEventListener) =>
      (super.noSuchMethod(
            Invocation.method(#addAdEventListener, [adEventListener]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> destroy() =>
      (super.noSuchMethod(
            Invocation.method(#destroy, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> init(_i2.AdsRenderingSettings? settings) =>
      (super.noSuchMethod(
            Invocation.method(#init, [settings]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> focus() =>
      (super.noSuchMethod(
            Invocation.method(#focus, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<_i2.AdProgressInfo?> getAdProgressInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getAdProgressInfo, []),
            returnValue: _i3.Future<_i2.AdProgressInfo?>.value(),
            returnValueForMissingStub: _i3.Future<_i2.AdProgressInfo?>.value(),
          )
          as _i3.Future<_i2.AdProgressInfo?>);

  @override
  _i3.Future<_i2.Ad?> getCurrentAd() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentAd, []),
            returnValue: _i3.Future<_i2.Ad?>.value(),
            returnValueForMissingStub: _i3.Future<_i2.Ad?>.value(),
          )
          as _i3.Future<_i2.Ad?>);

  @override
  _i3.Future<void> removeAdErrorListener(_i2.AdErrorListener? errorListener) =>
      (super.noSuchMethod(
            Invocation.method(#removeAdErrorListener, [errorListener]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> removeAdEventListener(
    _i2.AdEventListener? adEventListener,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#removeAdEventListener, [adEventListener]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [AdEvent].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdEvent extends _i1.Mock implements _i2.AdEvent {
  @override
  _i2.AdEventType get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _i2.AdEventType.adBreakEnded,
            returnValueForMissingStub: _i2.AdEventType.adBreakEnded,
          )
          as _i2.AdEventType);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager =>
      (super.noSuchMethod(
            Invocation.getter(#pigeon_instanceManager),
            returnValue: _FakePigeonInstanceManager_0(
              this,
              Invocation.getter(#pigeon_instanceManager),
            ),
            returnValueForMissingStub: _FakePigeonInstanceManager_0(
              this,
              Invocation.getter(#pigeon_instanceManager),
            ),
          )
          as _i2.PigeonInstanceManager);

  @override
  _i2.AdEvent pigeon_copy() =>
      (super.noSuchMethod(
            Invocation.method(#pigeon_copy, []),
            returnValue: _FakeAdEvent_2(
              this,
              Invocation.method(#pigeon_copy, []),
            ),
            returnValueForMissingStub: _FakeAdEvent_2(
              this,
              Invocation.method(#pigeon_copy, []),
            ),
          )
          as _i2.AdEvent);
}

/// A class which mocks [AdEventListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdEventListener extends _i1.Mock implements _i2.AdEventListener {
  @override
  void Function(_i2.AdEventListener, _i2.AdEvent) get onAdEvent =>
      (super.noSuchMethod(
            Invocation.getter(#onAdEvent),
            returnValue:
                (_i2.AdEventListener pigeon_instance, _i2.AdEvent event) {},
            returnValueForMissingStub:
                (_i2.AdEventListener pigeon_instance, _i2.AdEvent event) {},
          )
          as void Function(_i2.AdEventListener, _i2.AdEvent));

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager =>
      (super.noSuchMethod(
            Invocation.getter(#pigeon_instanceManager),
            returnValue: _FakePigeonInstanceManager_0(
              this,
              Invocation.getter(#pigeon_instanceManager),
            ),
            returnValueForMissingStub: _FakePigeonInstanceManager_0(
              this,
              Invocation.getter(#pigeon_instanceManager),
            ),
          )
          as _i2.PigeonInstanceManager);

  @override
  _i2.AdEventListener pigeon_copy() =>
      (super.noSuchMethod(
            Invocation.method(#pigeon_copy, []),
            returnValue: _FakeAdEventListener_3(
              this,
              Invocation.method(#pigeon_copy, []),
            ),
            returnValueForMissingStub: _FakeAdEventListener_3(
              this,
              Invocation.method(#pigeon_copy, []),
            ),
          )
          as _i2.AdEventListener);
}

/// A class which mocks [AdErrorListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockAdErrorListener extends _i1.Mock implements _i2.AdErrorListener {
  @override
  void Function(_i2.AdErrorListener, _i2.AdErrorEvent) get onAdError =>
      (super.noSuchMethod(
            Invocation.getter(#onAdError),
            returnValue:
                (
                  _i2.AdErrorListener pigeon_instance,
                  _i2.AdErrorEvent event,
                ) {},
            returnValueForMissingStub:
                (
                  _i2.AdErrorListener pigeon_instance,
                  _i2.AdErrorEvent event,
                ) {},
          )
          as void Function(_i2.AdErrorListener, _i2.AdErrorEvent));

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager =>
      (super.noSuchMethod(
            Invocation.getter(#pigeon_instanceManager),
            returnValue: _FakePigeonInstanceManager_0(
              this,
              Invocation.getter(#pigeon_instanceManager),
            ),
            returnValueForMissingStub: _FakePigeonInstanceManager_0(
              this,
              Invocation.getter(#pigeon_instanceManager),
            ),
          )
          as _i2.PigeonInstanceManager);

  @override
  _i2.AdErrorListener pigeon_copy() =>
      (super.noSuchMethod(
            Invocation.method(#pigeon_copy, []),
            returnValue: _FakeAdErrorListener_4(
              this,
              Invocation.method(#pigeon_copy, []),
            ),
            returnValueForMissingStub: _FakeAdErrorListener_4(
              this,
              Invocation.method(#pigeon_copy, []),
            ),
          )
          as _i2.AdErrorListener);
}
