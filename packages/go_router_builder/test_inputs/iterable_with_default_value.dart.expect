RouteBase get $iterableDefaultValueRoute => GoRouteData.$route(
      path: '/iterable-default-value-route',
      factory: _$IterableDefaultValueRoute._fromState,
    );

mixin _$IterableDefaultValueRoute on GoRouteData {
  static IterableDefaultValueRoute _fromState(GoRouterState state) =>
      IterableDefaultValueRoute(
        param: (state.uri.queryParametersAll['param']
                ?.map(int.parse)
                .cast<int>() as Iterable<int>?) ??
            const <int>[0],
      );

  IterableDefaultValueRoute get _self => this as IterableDefaultValueRoute;

  @override
  String get location => GoRouteData.$location(
        '/iterable-default-value-route',
        queryParams: {
          if (!_$iterablesEqual(_self.param, const <int>[0]))
            'param': _self.param.map((e) => e.toString()).toList(),
        },
      );

  @override
  void go(BuildContext context) => context.go(location);

  @override
  Future<T?> push<T>(BuildContext context) => context.push<T>(location);

  @override
  void pushReplacement(BuildContext context) =>
      context.pushReplacement(location);

  @override
  void replace(BuildContext context) => context.replace(location);
}

bool _$iterablesEqual<T>(Iterable<T>? iterable1, Iterable<T>? iterable2) {
  if (identical(iterable1, iterable2)) return true;
  if (iterable1 == null || iterable2 == null) return false;
  final iterator1 = iterable1.iterator;
  final iterator2 = iterable2.iterator;
  while (true) {
    final hasNext1 = iterator1.moveNext();
    final hasNext2 = iterator2.moveNext();
    if (hasNext1 != hasNext2) return false;
    if (!hasNext1) return true;
    if (iterator1.current != iterator2.current) return false;
  }
}
