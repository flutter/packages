RouteBase get $customParameterRoute => GoRouteData.$route(
  path: '/default-value-route',
  factory: $CustomParameterRoute._fromState,
);

mixin $CustomParameterRoute on GoRouteData {
  static CustomParameterRoute _fromState(GoRouterState state) =>
      CustomParameterRoute(
        param: int.parse(fromBase64(state.uri.queryParameters['param']!)),
      );

  CustomParameterRoute get _self => this as CustomParameterRoute;

  @override
  String get location => GoRouteData.$location(
    '/default-value-route',
    queryParams: {'param': toBase64(_self.param.toString())},
  );

  @override
  void go(BuildContext context) => context.go(location);

  @override
  Future<T?> push<T>(BuildContext context) => context.push<T>(location);

  @override
  void pushReplacement(BuildContext context) =>
      context.pushReplacement(location);

  @override
  void replace(BuildContext context) => context.replace(location);
}

RouteBase get $customParameterComplexRoute => GoRouteData.$route(
  path: '/:id/',
  factory: $CustomParameterComplexRoute._fromState,
);

mixin $CustomParameterComplexRoute on GoRouteData {
  static CustomParameterComplexRoute _fromState(GoRouterState state) =>
      CustomParameterComplexRoute(
        id: int.parse(fromBase64(state.pathParameters['id']!)),
        dir: fromBase64(state.uri.queryParameters['dir'] ?? ''),
        list:
            state.uri.queryParametersAll['list']
                ?.map((e) => Uri.parse(fromBase64(e)))
                .cast<Uri>()
                .toList() ??
            const <Uri>[],
        enumTest:
            _$EnumTestEnumMap._$fromName(
              fromBase64(state.uri.queryParameters['enum-test']!),
            )!,
      );

  CustomParameterComplexRoute get _self => this as CustomParameterComplexRoute;

  @override
  String get location => GoRouteData.$location(
    '/${Uri.encodeComponent(toBase64(_self.id.toString()))}/',
    queryParams: {
      if (_self.dir != '') 'dir': toBase64(_self.dir),
      if (!_$iterablesEqual(_self.list, const <Uri>[]))
        'list': _self.list.map((e) => toBase64(e.toString())).toList(),
      'enum-test': toBase64(_$EnumTestEnumMap[_self.enumTest]),
    },
  );

  @override
  void go(BuildContext context) => context.go(location);

  @override
  Future<T?> push<T>(BuildContext context) => context.push<T>(location);

  @override
  void pushReplacement(BuildContext context) =>
      context.pushReplacement(location);

  @override
  void replace(BuildContext context) => context.replace(location);
}

const _$EnumTestEnumMap = {EnumTest.a: 'a', EnumTest.b: 'b', EnumTest.c: 'c'};

extension<T extends Enum> on Map<T, String> {
  T? _$fromName(String? value) =>
      entries.where((element) => element.value == value).firstOrNull?.key;
}

bool _$iterablesEqual<T>(Iterable<T>? iterable1, Iterable<T>? iterable2) {
  if (identical(iterable1, iterable2)) return true;
  if (iterable1 == null || iterable2 == null) return false;
  final iterator1 = iterable1.iterator;
  final iterator2 = iterable2.iterator;
  while (true) {
    final hasNext1 = iterator1.moveNext();
    final hasNext2 = iterator2.moveNext();
    if (hasNext1 != hasNext2) return false;
    if (!hasNext1) return true;
    if (iterator1.current != iterator2.current) return false;
  }
}
