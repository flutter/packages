// Mocks generated by Mockito 5.4.6 from annotations
// in path_provider_example/integration_test/path_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ffi' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:objective_c/objective_c.dart' as _i2;
import 'package:path_provider_foundation/path_provider_foundation.dart' as _i6;
import 'package:path_provider_foundation/src/ffi_bindings.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNSArray_0 extends _i1.SmartFake implements _i2.NSArray {
  _FakeNSArray_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSString_1 extends _i1.SmartFake implements _i2.NSString {
  _FakeNSString_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObjCObjectBase_2 extends _i1.SmartFake
    implements _i2.ObjCObjectBase {
  _FakeObjCObjectBase_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSObject_3 extends _i1.SmartFake implements _i2.NSObject {
  _FakeNSObject_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSMethodSignature_4 extends _i1.SmartFake
    implements _i2.NSMethodSignature {
  _FakeNSMethodSignature_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FoundationFFI].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoundationFFI extends _i1.Mock implements _i3.FoundationFFI {
  @override
  _i2.NSArray NSSearchPathForDirectoriesInDomains(
    _i3.NSSearchPathDirectory? directory,
    _i3.NSSearchPathDomainMask? domainMask,
    bool? expandTilde,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #NSSearchPathForDirectoriesInDomains,
          [
            directory,
            domainMask,
            expandTilde,
          ],
        ),
        returnValue: _FakeNSArray_0(
          this,
          Invocation.method(
            #NSSearchPathForDirectoriesInDomains,
            [
              directory,
              domainMask,
              expandTilde,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeNSArray_0(
          this,
          Invocation.method(
            #NSSearchPathForDirectoriesInDomains,
            [
              directory,
              domainMask,
              expandTilde,
            ],
          ),
        ),
      ) as _i2.NSArray);
}

/// A class which mocks [NSBundle].
///
/// See the documentation for Mockito's code generation for more information.
class MockNSBundle extends _i1.Mock implements _i3.NSBundle {
  @override
  _i2.NSString get debugDescription$1 => (super.noSuchMethod(
        Invocation.getter(#debugDescription$1),
        returnValue: _FakeNSString_1(
          this,
          Invocation.getter(#debugDescription$1),
        ),
        returnValueForMissingStub: _FakeNSString_1(
          this,
          Invocation.getter(#debugDescription$1),
        ),
      ) as _i2.NSString);

  @override
  _i2.NSString get description$1 => (super.noSuchMethod(
        Invocation.getter(#description$1),
        returnValue: _FakeNSString_1(
          this,
          Invocation.getter(#description$1),
        ),
        returnValueForMissingStub: _FakeNSString_1(
          this,
          Invocation.getter(#description$1),
        ),
      ) as _i2.NSString);

  @override
  int get hash$1 => (super.noSuchMethod(
        Invocation.getter(#hash$1),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get isProxy => (super.noSuchMethod(
        Invocation.getter(#isProxy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ObjCObjectBase get superclass$1 => (super.noSuchMethod(
        Invocation.getter(#superclass$1),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.getter(#superclass$1),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.getter(#superclass$1),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectRef get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _i4.dummyValue<_i2.ObjCObjectRef>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i2.ObjCObjectRef>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.ObjCObjectRef);

  @override
  _i2.NSObject autorelease() => (super.noSuchMethod(
        Invocation.method(
          #autorelease,
          [],
        ),
        returnValue: _FakeNSObject_3(
          this,
          Invocation.method(
            #autorelease,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_3(
          this,
          Invocation.method(
            #autorelease,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  _i2.ObjCObjectBase class$1() => (super.noSuchMethod(
        Invocation.method(
          #class$1,
          [],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #class$1,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #class$1,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  bool conformsToProtocol$1(_i2.Protocol? aProtocol) => (super.noSuchMethod(
        Invocation.method(
          #conformsToProtocol$1,
          [aProtocol],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ObjCObjectBase copy() => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  void dealloc() => super.noSuchMethod(
        Invocation.method(
          #dealloc,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void doesNotRecognizeSelector(_i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      super.noSuchMethod(
        Invocation.method(
          #doesNotRecognizeSelector,
          [aSelector],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forwardInvocation(_i2.NSInvocation? anInvocation) => super.noSuchMethod(
        Invocation.method(
          #forwardInvocation,
          [anInvocation],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ObjCObjectBase forwardingTargetForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #forwardingTargetForSelector,
          [aSelector],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #forwardingTargetForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #forwardingTargetForSelector,
            [aSelector],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.NSObject init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _FakeNSObject_3(
          this,
          Invocation.method(
            #init,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_3(
          this,
          Invocation.method(
            #init,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  bool isEqual(_i2.ObjCObjectBase? object) => (super.noSuchMethod(
        Invocation.method(
          #isEqual,
          [object],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isKindOfClass(_i2.ObjCObjectBase? aClass) => (super.noSuchMethod(
        Invocation.method(
          #isKindOfClass,
          [aClass],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isMemberOfClass(_i2.ObjCObjectBase? aClass) => (super.noSuchMethod(
        Invocation.method(
          #isMemberOfClass,
          [aClass],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Pointer<_i5.NativeFunction<_i5.Void Function()>> methodForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #methodForSelector,
          [aSelector],
        ),
        returnValue: _i4
            .dummyValue<_i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>>(
          this,
          Invocation.method(
            #methodForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _i4
            .dummyValue<_i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>>(
          this,
          Invocation.method(
            #methodForSelector,
            [aSelector],
          ),
        ),
      ) as _i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>);

  @override
  _i2.NSMethodSignature methodSignatureForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #methodSignatureForSelector,
          [aSelector],
        ),
        returnValue: _FakeNSMethodSignature_4(
          this,
          Invocation.method(
            #methodSignatureForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeNSMethodSignature_4(
          this,
          Invocation.method(
            #methodSignatureForSelector,
            [aSelector],
          ),
        ),
      ) as _i2.NSMethodSignature);

  @override
  _i2.ObjCObjectBase mutableCopy() => (super.noSuchMethod(
        Invocation.method(
          #mutableCopy,
          [],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #mutableCopy,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #mutableCopy,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector,
          [aSelector],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector,
            [aSelector],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector$1(
    _i5.Pointer<_i2.ObjCSelector>? aSelector, {
    required _i2.ObjCObjectBase? withObject,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector$1,
          [aSelector],
          {#withObject: withObject},
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector$1,
            [aSelector],
            {#withObject: withObject},
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector$1,
            [aSelector],
            {#withObject: withObject},
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector$2(
    _i5.Pointer<_i2.ObjCSelector>? aSelector, {
    required _i2.ObjCObjectBase? withObject,
    required _i2.ObjCObjectBase? withObject$1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector$2,
          [aSelector],
          {
            #withObject: withObject,
            #withObject$1: withObject$1,
          },
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector$2,
            [aSelector],
            {
              #withObject: withObject,
              #withObject$1: withObject$1,
            },
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector$2,
            [aSelector],
            {
              #withObject: withObject,
              #withObject$1: withObject$1,
            },
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  void release() => super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool respondsToSelector(_i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondsToSelector,
          [aSelector],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSObject retain() => (super.noSuchMethod(
        Invocation.method(
          #retain,
          [],
        ),
        returnValue: _FakeNSObject_3(
          this,
          Invocation.method(
            #retain,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_3(
          this,
          Invocation.method(
            #retain,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  int retainCount() => (super.noSuchMethod(
        Invocation.method(
          #retainCount,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.NSObject self$1() => (super.noSuchMethod(
        Invocation.method(
          #self$1,
          [],
        ),
        returnValue: _FakeNSObject_3(
          this,
          Invocation.method(
            #self$1,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_3(
          this,
          Invocation.method(
            #self$1,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  _i5.Pointer<_i2.NSZone> zone() => (super.noSuchMethod(
        Invocation.method(
          #zone,
          [],
        ),
        returnValue: _i4.dummyValue<_i5.Pointer<_i2.NSZone>>(
          this,
          Invocation.method(
            #zone,
            [],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i5.Pointer<_i2.NSZone>>(
          this,
          Invocation.method(
            #zone,
            [],
          ),
        ),
      ) as _i5.Pointer<_i2.NSZone>);
}

/// A class which mocks [NSFileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNSFileManager extends _i1.Mock implements _i3.NSFileManager {
  @override
  _i2.NSString get debugDescription$1 => (super.noSuchMethod(
        Invocation.getter(#debugDescription$1),
        returnValue: _FakeNSString_1(
          this,
          Invocation.getter(#debugDescription$1),
        ),
        returnValueForMissingStub: _FakeNSString_1(
          this,
          Invocation.getter(#debugDescription$1),
        ),
      ) as _i2.NSString);

  @override
  _i2.NSString get description$1 => (super.noSuchMethod(
        Invocation.getter(#description$1),
        returnValue: _FakeNSString_1(
          this,
          Invocation.getter(#description$1),
        ),
        returnValueForMissingStub: _FakeNSString_1(
          this,
          Invocation.getter(#description$1),
        ),
      ) as _i2.NSString);

  @override
  int get hash$1 => (super.noSuchMethod(
        Invocation.getter(#hash$1),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get isProxy => (super.noSuchMethod(
        Invocation.getter(#isProxy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ObjCObjectBase get superclass$1 => (super.noSuchMethod(
        Invocation.getter(#superclass$1),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.getter(#superclass$1),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.getter(#superclass$1),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectRef get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _i4.dummyValue<_i2.ObjCObjectRef>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i2.ObjCObjectRef>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.ObjCObjectRef);

  @override
  _i2.NSURL? containerURLForSecurityApplicationGroupIdentifier(
          _i2.NSString? groupIdentifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #containerURLForSecurityApplicationGroupIdentifier,
          [groupIdentifier],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSURL?);

  @override
  _i2.NSObject autorelease() => (super.noSuchMethod(
        Invocation.method(
          #autorelease,
          [],
        ),
        returnValue: _FakeNSObject_3(
          this,
          Invocation.method(
            #autorelease,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_3(
          this,
          Invocation.method(
            #autorelease,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  _i2.ObjCObjectBase class$1() => (super.noSuchMethod(
        Invocation.method(
          #class$1,
          [],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #class$1,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #class$1,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  bool conformsToProtocol$1(_i2.Protocol? aProtocol) => (super.noSuchMethod(
        Invocation.method(
          #conformsToProtocol$1,
          [aProtocol],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ObjCObjectBase copy() => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  void dealloc() => super.noSuchMethod(
        Invocation.method(
          #dealloc,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void doesNotRecognizeSelector(_i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      super.noSuchMethod(
        Invocation.method(
          #doesNotRecognizeSelector,
          [aSelector],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forwardInvocation(_i2.NSInvocation? anInvocation) => super.noSuchMethod(
        Invocation.method(
          #forwardInvocation,
          [anInvocation],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ObjCObjectBase forwardingTargetForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #forwardingTargetForSelector,
          [aSelector],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #forwardingTargetForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #forwardingTargetForSelector,
            [aSelector],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.NSObject init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _FakeNSObject_3(
          this,
          Invocation.method(
            #init,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_3(
          this,
          Invocation.method(
            #init,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  bool isEqual(_i2.ObjCObjectBase? object) => (super.noSuchMethod(
        Invocation.method(
          #isEqual,
          [object],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isKindOfClass(_i2.ObjCObjectBase? aClass) => (super.noSuchMethod(
        Invocation.method(
          #isKindOfClass,
          [aClass],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isMemberOfClass(_i2.ObjCObjectBase? aClass) => (super.noSuchMethod(
        Invocation.method(
          #isMemberOfClass,
          [aClass],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Pointer<_i5.NativeFunction<_i5.Void Function()>> methodForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #methodForSelector,
          [aSelector],
        ),
        returnValue: _i4
            .dummyValue<_i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>>(
          this,
          Invocation.method(
            #methodForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _i4
            .dummyValue<_i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>>(
          this,
          Invocation.method(
            #methodForSelector,
            [aSelector],
          ),
        ),
      ) as _i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>);

  @override
  _i2.NSMethodSignature methodSignatureForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #methodSignatureForSelector,
          [aSelector],
        ),
        returnValue: _FakeNSMethodSignature_4(
          this,
          Invocation.method(
            #methodSignatureForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeNSMethodSignature_4(
          this,
          Invocation.method(
            #methodSignatureForSelector,
            [aSelector],
          ),
        ),
      ) as _i2.NSMethodSignature);

  @override
  _i2.ObjCObjectBase mutableCopy() => (super.noSuchMethod(
        Invocation.method(
          #mutableCopy,
          [],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #mutableCopy,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #mutableCopy,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector,
          [aSelector],
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector,
            [aSelector],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector$1(
    _i5.Pointer<_i2.ObjCSelector>? aSelector, {
    required _i2.ObjCObjectBase? withObject,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector$1,
          [aSelector],
          {#withObject: withObject},
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector$1,
            [aSelector],
            {#withObject: withObject},
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector$1,
            [aSelector],
            {#withObject: withObject},
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector$2(
    _i5.Pointer<_i2.ObjCSelector>? aSelector, {
    required _i2.ObjCObjectBase? withObject,
    required _i2.ObjCObjectBase? withObject$1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector$2,
          [aSelector],
          {
            #withObject: withObject,
            #withObject$1: withObject$1,
          },
        ),
        returnValue: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector$2,
            [aSelector],
            {
              #withObject: withObject,
              #withObject$1: withObject$1,
            },
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_2(
          this,
          Invocation.method(
            #performSelector$2,
            [aSelector],
            {
              #withObject: withObject,
              #withObject$1: withObject$1,
            },
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  void release() => super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool respondsToSelector(_i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondsToSelector,
          [aSelector],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSObject retain() => (super.noSuchMethod(
        Invocation.method(
          #retain,
          [],
        ),
        returnValue: _FakeNSObject_3(
          this,
          Invocation.method(
            #retain,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_3(
          this,
          Invocation.method(
            #retain,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  int retainCount() => (super.noSuchMethod(
        Invocation.method(
          #retainCount,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.NSObject self$1() => (super.noSuchMethod(
        Invocation.method(
          #self$1,
          [],
        ),
        returnValue: _FakeNSObject_3(
          this,
          Invocation.method(
            #self$1,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_3(
          this,
          Invocation.method(
            #self$1,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  _i5.Pointer<_i2.NSZone> zone() => (super.noSuchMethod(
        Invocation.method(
          #zone,
          [],
        ),
        returnValue: _i4.dummyValue<_i5.Pointer<_i2.NSZone>>(
          this,
          Invocation.method(
            #zone,
            [],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i5.Pointer<_i2.NSZone>>(
          this,
          Invocation.method(
            #zone,
            [],
          ),
        ),
      ) as _i5.Pointer<_i2.NSZone>);
}

/// A class which mocks [PathProviderPlatformProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProviderPlatformProvider extends _i1.Mock
    implements _i6.PathProviderPlatformProvider {
  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isMacOS => (super.noSuchMethod(
        Invocation.getter(#isMacOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
