// Mocks generated by Mockito 5.4.6 from annotations
// in path_provider_example/integration_test/path_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ffi' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:objective_c/objective_c.dart' as _i2;
import 'package:path_provider_foundation/path_provider_foundation.dart' as _i6;
import 'package:path_provider_foundation/src/ffi_bindings.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNSArray_0 extends _i1.SmartFake implements _i2.NSArray {
  _FakeNSArray_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSURL_1 extends _i1.SmartFake implements _i2.NSURL {
  _FakeNSURL_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSString_2 extends _i1.SmartFake implements _i2.NSString {
  _FakeNSString_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeObjCObjectBase_3 extends _i1.SmartFake
    implements _i2.ObjCObjectBase {
  _FakeObjCObjectBase_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSAttributedString_4 extends _i1.SmartFake
    implements _i3.NSAttributedString {
  _FakeNSAttributedString_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSBundle_5 extends _i1.SmartFake implements _i3.NSBundle {
  _FakeNSBundle_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSMethodSignature_6 extends _i1.SmartFake
    implements _i2.NSMethodSignature {
  _FakeNSMethodSignature_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSFileManager_7 extends _i1.SmartFake implements _i3.NSFileManager {
  _FakeNSFileManager_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNSObject_8 extends _i1.SmartFake implements _i2.NSObject {
  _FakeNSObject_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FoundationFFI].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoundationFFI extends _i1.Mock implements _i3.FoundationFFI {
  @override
  _i2.NSArray NSSearchPathForDirectoriesInDomains(
    _i3.NSSearchPathDirectory? directory,
    _i3.NSSearchPathDomainMask? domainMask,
    bool? expandTilde,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #NSSearchPathForDirectoriesInDomains,
          [
            directory,
            domainMask,
            expandTilde,
          ],
        ),
        returnValue: _FakeNSArray_0(
          this,
          Invocation.method(
            #NSSearchPathForDirectoriesInDomains,
            [
              directory,
              domainMask,
              expandTilde,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeNSArray_0(
          this,
          Invocation.method(
            #NSSearchPathForDirectoriesInDomains,
            [
              directory,
              domainMask,
              expandTilde,
            ],
          ),
        ),
      ) as _i2.NSArray);
}

/// A class which mocks [NSBundle].
///
/// See the documentation for Mockito's code generation for more information.
class MockNSBundle extends _i1.Mock implements _i3.NSBundle {
  @override
  bool get loaded => (super.noSuchMethod(
        Invocation.getter(#loaded),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSURL get bundleURL => (super.noSuchMethod(
        Invocation.getter(#bundleURL),
        returnValue: _FakeNSURL_1(
          this,
          Invocation.getter(#bundleURL),
        ),
        returnValueForMissingStub: _FakeNSURL_1(
          this,
          Invocation.getter(#bundleURL),
        ),
      ) as _i2.NSURL);

  @override
  _i2.NSString get bundlePath => (super.noSuchMethod(
        Invocation.getter(#bundlePath),
        returnValue: _FakeNSString_2(
          this,
          Invocation.getter(#bundlePath),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.getter(#bundlePath),
        ),
      ) as _i2.NSString);

  @override
  _i2.NSArray get preferredLocalizations => (super.noSuchMethod(
        Invocation.getter(#preferredLocalizations),
        returnValue: _FakeNSArray_0(
          this,
          Invocation.getter(#preferredLocalizations),
        ),
        returnValueForMissingStub: _FakeNSArray_0(
          this,
          Invocation.getter(#preferredLocalizations),
        ),
      ) as _i2.NSArray);

  @override
  _i2.NSArray get localizations => (super.noSuchMethod(
        Invocation.getter(#localizations),
        returnValue: _FakeNSArray_0(
          this,
          Invocation.getter(#localizations),
        ),
        returnValueForMissingStub: _FakeNSArray_0(
          this,
          Invocation.getter(#localizations),
        ),
      ) as _i2.NSArray);

  @override
  _i2.NSString get debugDescription$1 => (super.noSuchMethod(
        Invocation.getter(#debugDescription$1),
        returnValue: _FakeNSString_2(
          this,
          Invocation.getter(#debugDescription$1),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.getter(#debugDescription$1),
        ),
      ) as _i2.NSString);

  @override
  _i2.NSString get description$1 => (super.noSuchMethod(
        Invocation.getter(#description$1),
        returnValue: _FakeNSString_2(
          this,
          Invocation.getter(#description$1),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.getter(#description$1),
        ),
      ) as _i2.NSString);

  @override
  int get hash$1 => (super.noSuchMethod(
        Invocation.getter(#hash$1),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get isProxy => (super.noSuchMethod(
        Invocation.getter(#isProxy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ObjCObjectBase get superclass$1 => (super.noSuchMethod(
        Invocation.getter(#superclass$1),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.getter(#superclass$1),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.getter(#superclass$1),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectRef get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _i4.dummyValue<_i2.ObjCObjectRef>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i2.ObjCObjectRef>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.ObjCObjectRef);

  @override
  _i3.NSBundle? initWithPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #initWithPath,
          [path],
        ),
        returnValueForMissingStub: null,
      ) as _i3.NSBundle?);

  @override
  _i3.NSBundle? initWithURL(_i2.NSURL? url) => (super.noSuchMethod(
        Invocation.method(
          #initWithURL,
          [url],
        ),
        returnValueForMissingStub: null,
      ) as _i3.NSBundle?);

  @override
  bool load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool unload() => (super.noSuchMethod(
        Invocation.method(
          #unload,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool preflightAndReturnError(
          _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error) =>
      (super.noSuchMethod(
        Invocation.method(
          #preflightAndReturnError,
          [error],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool loadAndReturnError(_i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadAndReturnError,
          [error],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSURL? URLForAuxiliaryExecutable(_i2.NSString? executableName) =>
      (super.noSuchMethod(
        Invocation.method(
          #URLForAuxiliaryExecutable,
          [executableName],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSURL?);

  @override
  _i2.NSString? pathForAuxiliaryExecutable(_i2.NSString? executableName) =>
      (super.noSuchMethod(
        Invocation.method(
          #pathForAuxiliaryExecutable,
          [executableName],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSString?);

  @override
  _i2.NSArray pathsForResourcesOfType$1(
    _i2.NSString? ext, {
    _i2.NSString? inDirectory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pathsForResourcesOfType$1,
          [ext],
          {#inDirectory: inDirectory},
        ),
        returnValue: _FakeNSArray_0(
          this,
          Invocation.method(
            #pathsForResourcesOfType$1,
            [ext],
            {#inDirectory: inDirectory},
          ),
        ),
        returnValueForMissingStub: _FakeNSArray_0(
          this,
          Invocation.method(
            #pathsForResourcesOfType$1,
            [ext],
            {#inDirectory: inDirectory},
          ),
        ),
      ) as _i2.NSArray);

  @override
  _i2.NSArray pathsForResourcesOfType$2(
    _i2.NSString? ext, {
    _i2.NSString? inDirectory,
    _i2.NSString? forLocalization,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pathsForResourcesOfType$2,
          [ext],
          {
            #inDirectory: inDirectory,
            #forLocalization: forLocalization,
          },
        ),
        returnValue: _FakeNSArray_0(
          this,
          Invocation.method(
            #pathsForResourcesOfType$2,
            [ext],
            {
              #inDirectory: inDirectory,
              #forLocalization: forLocalization,
            },
          ),
        ),
        returnValueForMissingStub: _FakeNSArray_0(
          this,
          Invocation.method(
            #pathsForResourcesOfType$2,
            [ext],
            {
              #inDirectory: inDirectory,
              #forLocalization: forLocalization,
            },
          ),
        ),
      ) as _i2.NSArray);

  @override
  _i2.NSString localizedStringForKey(
    _i2.NSString? key, {
    _i2.NSString? value,
    _i2.NSString? table,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #localizedStringForKey,
          [key],
          {
            #value: value,
            #table: table,
          },
        ),
        returnValue: _FakeNSString_2(
          this,
          Invocation.method(
            #localizedStringForKey,
            [key],
            {
              #value: value,
              #table: table,
            },
          ),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.method(
            #localizedStringForKey,
            [key],
            {
              #value: value,
              #table: table,
            },
          ),
        ),
      ) as _i2.NSString);

  @override
  _i3.NSAttributedString localizedAttributedStringForKey(
    _i2.NSString? key, {
    _i2.NSString? value,
    _i2.NSString? table,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #localizedAttributedStringForKey,
          [key],
          {
            #value: value,
            #table: table,
          },
        ),
        returnValue: _FakeNSAttributedString_4(
          this,
          Invocation.method(
            #localizedAttributedStringForKey,
            [key],
            {
              #value: value,
              #table: table,
            },
          ),
        ),
        returnValueForMissingStub: _FakeNSAttributedString_4(
          this,
          Invocation.method(
            #localizedAttributedStringForKey,
            [key],
            {
              #value: value,
              #table: table,
            },
          ),
        ),
      ) as _i3.NSAttributedString);

  @override
  _i2.NSString localizedStringForKey$1(
    _i2.NSString? key, {
    _i2.NSString? value,
    _i2.NSString? table,
    required _i2.NSArray? localizations,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #localizedStringForKey$1,
          [key],
          {
            #value: value,
            #table: table,
            #localizations: localizations,
          },
        ),
        returnValue: _FakeNSString_2(
          this,
          Invocation.method(
            #localizedStringForKey$1,
            [key],
            {
              #value: value,
              #table: table,
              #localizations: localizations,
            },
          ),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.method(
            #localizedStringForKey$1,
            [key],
            {
              #value: value,
              #table: table,
              #localizations: localizations,
            },
          ),
        ),
      ) as _i2.NSString);

  @override
  _i2.ObjCObjectBase? objectForInfoDictionaryKey(_i2.NSString? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #objectForInfoDictionaryKey,
          [key],
        ),
        returnValueForMissingStub: null,
      ) as _i2.ObjCObjectBase?);

  @override
  _i2.ObjCObjectBase? classNamed(_i2.NSString? className) =>
      (super.noSuchMethod(
        Invocation.method(
          #classNamed,
          [className],
        ),
        returnValueForMissingStub: null,
      ) as _i2.ObjCObjectBase?);

  @override
  _i3.NSBundle init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _FakeNSBundle_5(
          this,
          Invocation.method(
            #init,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSBundle_5(
          this,
          Invocation.method(
            #init,
            [],
          ),
        ),
      ) as _i3.NSBundle);

  @override
  _i3.NSBundle self$1() => (super.noSuchMethod(
        Invocation.method(
          #self$1,
          [],
        ),
        returnValue: _FakeNSBundle_5(
          this,
          Invocation.method(
            #self$1,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSBundle_5(
          this,
          Invocation.method(
            #self$1,
            [],
          ),
        ),
      ) as _i3.NSBundle);

  @override
  _i3.NSBundle retain() => (super.noSuchMethod(
        Invocation.method(
          #retain,
          [],
        ),
        returnValue: _FakeNSBundle_5(
          this,
          Invocation.method(
            #retain,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSBundle_5(
          this,
          Invocation.method(
            #retain,
            [],
          ),
        ),
      ) as _i3.NSBundle);

  @override
  _i3.NSBundle autorelease() => (super.noSuchMethod(
        Invocation.method(
          #autorelease,
          [],
        ),
        returnValue: _FakeNSBundle_5(
          this,
          Invocation.method(
            #autorelease,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSBundle_5(
          this,
          Invocation.method(
            #autorelease,
            [],
          ),
        ),
      ) as _i3.NSBundle);

  @override
  _i2.ObjCObjectBase class$1() => (super.noSuchMethod(
        Invocation.method(
          #class$1,
          [],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #class$1,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #class$1,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  bool conformsToProtocol$1(_i2.Protocol? aProtocol) => (super.noSuchMethod(
        Invocation.method(
          #conformsToProtocol$1,
          [aProtocol],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ObjCObjectBase copy() => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  void dealloc() => super.noSuchMethod(
        Invocation.method(
          #dealloc,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void doesNotRecognizeSelector(_i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      super.noSuchMethod(
        Invocation.method(
          #doesNotRecognizeSelector,
          [aSelector],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forwardInvocation(_i2.NSInvocation? anInvocation) => super.noSuchMethod(
        Invocation.method(
          #forwardInvocation,
          [anInvocation],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ObjCObjectBase forwardingTargetForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #forwardingTargetForSelector,
          [aSelector],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #forwardingTargetForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #forwardingTargetForSelector,
            [aSelector],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  bool isEqual(_i2.ObjCObjectBase? object) => (super.noSuchMethod(
        Invocation.method(
          #isEqual,
          [object],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isKindOfClass(_i2.ObjCObjectBase? aClass) => (super.noSuchMethod(
        Invocation.method(
          #isKindOfClass,
          [aClass],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isMemberOfClass(_i2.ObjCObjectBase? aClass) => (super.noSuchMethod(
        Invocation.method(
          #isMemberOfClass,
          [aClass],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Pointer<_i5.NativeFunction<_i5.Void Function()>> methodForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #methodForSelector,
          [aSelector],
        ),
        returnValue: _i4
            .dummyValue<_i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>>(
          this,
          Invocation.method(
            #methodForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _i4
            .dummyValue<_i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>>(
          this,
          Invocation.method(
            #methodForSelector,
            [aSelector],
          ),
        ),
      ) as _i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>);

  @override
  _i2.NSMethodSignature methodSignatureForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #methodSignatureForSelector,
          [aSelector],
        ),
        returnValue: _FakeNSMethodSignature_6(
          this,
          Invocation.method(
            #methodSignatureForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeNSMethodSignature_6(
          this,
          Invocation.method(
            #methodSignatureForSelector,
            [aSelector],
          ),
        ),
      ) as _i2.NSMethodSignature);

  @override
  _i2.ObjCObjectBase mutableCopy() => (super.noSuchMethod(
        Invocation.method(
          #mutableCopy,
          [],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #mutableCopy,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #mutableCopy,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector,
          [aSelector],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector,
            [aSelector],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector$1(
    _i5.Pointer<_i2.ObjCSelector>? aSelector, {
    required _i2.ObjCObjectBase? withObject,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector$1,
          [aSelector],
          {#withObject: withObject},
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector$1,
            [aSelector],
            {#withObject: withObject},
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector$1,
            [aSelector],
            {#withObject: withObject},
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector$2(
    _i5.Pointer<_i2.ObjCSelector>? aSelector, {
    required _i2.ObjCObjectBase? withObject,
    required _i2.ObjCObjectBase? withObject$1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector$2,
          [aSelector],
          {
            #withObject: withObject,
            #withObject$1: withObject$1,
          },
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector$2,
            [aSelector],
            {
              #withObject: withObject,
              #withObject$1: withObject$1,
            },
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector$2,
            [aSelector],
            {
              #withObject: withObject,
              #withObject$1: withObject$1,
            },
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  void release() => super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool respondsToSelector(_i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondsToSelector,
          [aSelector],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  int retainCount() => (super.noSuchMethod(
        Invocation.method(
          #retainCount,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i5.Pointer<_i2.NSZone> zone() => (super.noSuchMethod(
        Invocation.method(
          #zone,
          [],
        ),
        returnValue: _i4.dummyValue<_i5.Pointer<_i2.NSZone>>(
          this,
          Invocation.method(
            #zone,
            [],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i5.Pointer<_i2.NSZone>>(
          this,
          Invocation.method(
            #zone,
            [],
          ),
        ),
      ) as _i5.Pointer<_i2.NSZone>);
}

/// A class which mocks [NSFileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNSFileManager extends _i1.Mock implements _i3.NSFileManager {
  @override
  _i2.NSString get currentDirectoryPath => (super.noSuchMethod(
        Invocation.getter(#currentDirectoryPath),
        returnValue: _FakeNSString_2(
          this,
          Invocation.getter(#currentDirectoryPath),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.getter(#currentDirectoryPath),
        ),
      ) as _i2.NSString);

  @override
  set delegate(_i3.NSFileManagerDelegate? value) => super.noSuchMethod(
        Invocation.setter(
          #delegate,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.NSString get debugDescription$1 => (super.noSuchMethod(
        Invocation.getter(#debugDescription$1),
        returnValue: _FakeNSString_2(
          this,
          Invocation.getter(#debugDescription$1),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.getter(#debugDescription$1),
        ),
      ) as _i2.NSString);

  @override
  _i2.NSString get description$1 => (super.noSuchMethod(
        Invocation.getter(#description$1),
        returnValue: _FakeNSString_2(
          this,
          Invocation.getter(#description$1),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.getter(#description$1),
        ),
      ) as _i2.NSString);

  @override
  int get hash$1 => (super.noSuchMethod(
        Invocation.getter(#hash$1),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool get isProxy => (super.noSuchMethod(
        Invocation.getter(#isProxy),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ObjCObjectBase get superclass$1 => (super.noSuchMethod(
        Invocation.getter(#superclass$1),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.getter(#superclass$1),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.getter(#superclass$1),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectRef get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _i4.dummyValue<_i2.ObjCObjectRef>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i2.ObjCObjectRef>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i2.ObjCObjectRef);

  @override
  _i2.NSArray? mountedVolumeURLsIncludingResourceValuesForKeys(
    _i2.NSArray? propertyKeys, {
    required _i3.NSVolumeEnumerationOptions? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #mountedVolumeURLsIncludingResourceValuesForKeys,
          [propertyKeys],
          {#options: options},
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSArray?);

  @override
  void unmountVolumeAtURL(
    _i2.NSURL? url, {
    required _i3.NSFileManagerUnmountOptions? options,
    required _i2.ObjCBlock<_i5.Void Function(_i2.NSError?)>? completionHandler,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #unmountVolumeAtURL,
          [url],
          {
            #options: options,
            #completionHandler: completionHandler,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.NSArray? contentsOfDirectoryAtURL(
    _i2.NSURL? url, {
    _i2.NSArray? includingPropertiesForKeys,
    required _i3.NSDirectoryEnumerationOptions? options,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #contentsOfDirectoryAtURL,
          [url],
          {
            #includingPropertiesForKeys: includingPropertiesForKeys,
            #options: options,
            #error: error,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSArray?);

  @override
  _i2.NSArray URLsForDirectory(
    _i3.NSSearchPathDirectory? directory, {
    required _i3.NSSearchPathDomainMask? inDomains,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #URLsForDirectory,
          [directory],
          {#inDomains: inDomains},
        ),
        returnValue: _FakeNSArray_0(
          this,
          Invocation.method(
            #URLsForDirectory,
            [directory],
            {#inDomains: inDomains},
          ),
        ),
        returnValueForMissingStub: _FakeNSArray_0(
          this,
          Invocation.method(
            #URLsForDirectory,
            [directory],
            {#inDomains: inDomains},
          ),
        ),
      ) as _i2.NSArray);

  @override
  _i2.NSURL? URLForDirectory(
    _i3.NSSearchPathDirectory? directory, {
    required _i3.NSSearchPathDomainMask? inDomain,
    _i2.NSURL? appropriateForURL,
    required bool? create,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #URLForDirectory,
          [directory],
          {
            #inDomain: inDomain,
            #appropriateForURL: appropriateForURL,
            #create: create,
            #error: error,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSURL?);

  @override
  bool getRelationship(
    _i5.Pointer<_i5.Long>? outRelationship, {
    required _i2.NSURL? ofDirectoryAtURL,
    required _i2.NSURL? toItemAtURL,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRelationship,
          [outRelationship],
          {
            #ofDirectoryAtURL: ofDirectoryAtURL,
            #toItemAtURL: toItemAtURL,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool getRelationship$1(
    _i5.Pointer<_i5.Long>? outRelationship, {
    required _i3.NSSearchPathDirectory? ofDirectory,
    required _i3.NSSearchPathDomainMask? inDomain,
    required _i2.NSURL? toItemAtURL,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRelationship$1,
          [outRelationship],
          {
            #ofDirectory: ofDirectory,
            #inDomain: inDomain,
            #toItemAtURL: toItemAtURL,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool createDirectoryAtURL(
    _i2.NSURL? url, {
    required bool? withIntermediateDirectories,
    _i2.NSDictionary? attributes,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDirectoryAtURL,
          [url],
          {
            #withIntermediateDirectories: withIntermediateDirectories,
            #attributes: attributes,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool createSymbolicLinkAtURL(
    _i2.NSURL? url, {
    required _i2.NSURL? withDestinationURL,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSymbolicLinkAtURL,
          [url],
          {
            #withDestinationURL: withDestinationURL,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool setAttributes(
    _i2.NSDictionary? attributes, {
    required _i2.NSString? ofItemAtPath,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAttributes,
          [attributes],
          {
            #ofItemAtPath: ofItemAtPath,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool createDirectoryAtPath(
    _i2.NSString? path, {
    required bool? withIntermediateDirectories,
    _i2.NSDictionary? attributes,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDirectoryAtPath,
          [path],
          {
            #withIntermediateDirectories: withIntermediateDirectories,
            #attributes: attributes,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSArray? contentsOfDirectoryAtPath(
    _i2.NSString? path, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #contentsOfDirectoryAtPath,
          [path],
          {#error: error},
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSArray?);

  @override
  _i2.NSArray? subpathsOfDirectoryAtPath(
    _i2.NSString? path, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #subpathsOfDirectoryAtPath,
          [path],
          {#error: error},
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSArray?);

  @override
  _i2.NSDictionary? attributesOfItemAtPath(
    _i2.NSString? path, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #attributesOfItemAtPath,
          [path],
          {#error: error},
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSDictionary?);

  @override
  _i2.NSDictionary? attributesOfFileSystemForPath(
    _i2.NSString? path, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #attributesOfFileSystemForPath,
          [path],
          {#error: error},
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSDictionary?);

  @override
  bool createSymbolicLinkAtPath(
    _i2.NSString? path, {
    required _i2.NSString? withDestinationPath,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSymbolicLinkAtPath,
          [path],
          {
            #withDestinationPath: withDestinationPath,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSString? destinationOfSymbolicLinkAtPath(
    _i2.NSString? path, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #destinationOfSymbolicLinkAtPath,
          [path],
          {#error: error},
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSString?);

  @override
  bool copyItemAtPath(
    _i2.NSString? srcPath, {
    required _i2.NSString? toPath,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyItemAtPath,
          [srcPath],
          {
            #toPath: toPath,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool moveItemAtPath(
    _i2.NSString? srcPath, {
    required _i2.NSString? toPath,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveItemAtPath,
          [srcPath],
          {
            #toPath: toPath,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool linkItemAtPath(
    _i2.NSString? srcPath, {
    required _i2.NSString? toPath,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkItemAtPath,
          [srcPath],
          {
            #toPath: toPath,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool removeItemAtPath(
    _i2.NSString? path, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeItemAtPath,
          [path],
          {#error: error},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool copyItemAtURL(
    _i2.NSURL? srcURL, {
    required _i2.NSURL? toURL,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyItemAtURL,
          [srcURL],
          {
            #toURL: toURL,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool moveItemAtURL(
    _i2.NSURL? srcURL, {
    required _i2.NSURL? toURL,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #moveItemAtURL,
          [srcURL],
          {
            #toURL: toURL,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool linkItemAtURL(
    _i2.NSURL? srcURL, {
    required _i2.NSURL? toURL,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkItemAtURL,
          [srcURL],
          {
            #toURL: toURL,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool removeItemAtURL(
    _i2.NSURL? URL, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeItemAtURL,
          [URL],
          {#error: error},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool trashItemAtURL(
    _i2.NSURL? url, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? resultingItemURL,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #trashItemAtURL,
          [url],
          {
            #resultingItemURL: resultingItemURL,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSDictionary? fileAttributesAtPath(
    _i2.NSString? path, {
    required bool? traverseLink,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fileAttributesAtPath,
          [path],
          {#traverseLink: traverseLink},
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSDictionary?);

  @override
  bool changeFileAttributes(
    _i2.NSDictionary? attributes, {
    required _i2.NSString? atPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #changeFileAttributes,
          [attributes],
          {#atPath: atPath},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSArray? directoryContentsAtPath(_i2.NSString? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #directoryContentsAtPath,
          [path],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSArray?);

  @override
  _i2.NSDictionary? fileSystemAttributesAtPath(_i2.NSString? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #fileSystemAttributesAtPath,
          [path],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSDictionary?);

  @override
  _i2.NSString? pathContentOfSymbolicLinkAtPath(_i2.NSString? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #pathContentOfSymbolicLinkAtPath,
          [path],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSString?);

  @override
  bool createSymbolicLinkAtPath$1(
    _i2.NSString? path, {
    required _i2.NSString? pathContent,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSymbolicLinkAtPath$1,
          [path],
          {#pathContent: pathContent},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool createDirectoryAtPath$1(
    _i2.NSString? path, {
    required _i2.NSDictionary? attributes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDirectoryAtPath$1,
          [path],
          {#attributes: attributes},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool linkPath(
    _i2.NSString? src, {
    required _i2.NSString? toPath,
    _i2.ObjCObjectBase? handler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #linkPath,
          [src],
          {
            #toPath: toPath,
            #handler: handler,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool copyPath(
    _i2.NSString? src, {
    required _i2.NSString? toPath,
    _i2.ObjCObjectBase? handler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyPath,
          [src],
          {
            #toPath: toPath,
            #handler: handler,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool movePath(
    _i2.NSString? src, {
    required _i2.NSString? toPath,
    _i2.ObjCObjectBase? handler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #movePath,
          [src],
          {
            #toPath: toPath,
            #handler: handler,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool removeFileAtPath(
    _i2.NSString? path, {
    _i2.ObjCObjectBase? handler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFileAtPath,
          [path],
          {#handler: handler},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool changeCurrentDirectoryPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #changeCurrentDirectoryPath,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool fileExistsAtPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #fileExistsAtPath,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool fileExistsAtPath$1(
    _i2.NSString? path, {
    required _i5.Pointer<_i5.Bool>? isDirectory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fileExistsAtPath$1,
          [path],
          {#isDirectory: isDirectory},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isReadableFileAtPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #isReadableFileAtPath,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isWritableFileAtPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #isWritableFileAtPath,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isExecutableFileAtPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #isExecutableFileAtPath,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isDeletableFileAtPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #isDeletableFileAtPath,
          [path],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool contentsEqualAtPath(
    _i2.NSString? path1, {
    required _i2.NSString? andPath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #contentsEqualAtPath,
          [path1],
          {#andPath: andPath},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSString displayNameAtPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #displayNameAtPath,
          [path],
        ),
        returnValue: _FakeNSString_2(
          this,
          Invocation.method(
            #displayNameAtPath,
            [path],
          ),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.method(
            #displayNameAtPath,
            [path],
          ),
        ),
      ) as _i2.NSString);

  @override
  _i2.NSArray? componentsToDisplayForPath(_i2.NSString? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #componentsToDisplayForPath,
          [path],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSArray?);

  @override
  _i3.NSDirectoryEnumerator? enumeratorAtPath(_i2.NSString? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #enumeratorAtPath,
          [path],
        ),
        returnValueForMissingStub: null,
      ) as _i3.NSDirectoryEnumerator?);

  @override
  _i3.NSDirectoryEnumerator? enumeratorAtURL(
    _i2.NSURL? url, {
    _i2.NSArray? includingPropertiesForKeys,
    required _i3.NSDirectoryEnumerationOptions? options,
    _i2.ObjCBlock<
            _i5.Bool Function(
              _i2.NSURL,
              _i2.NSError,
            )>?
        errorHandler,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #enumeratorAtURL,
          [url],
          {
            #includingPropertiesForKeys: includingPropertiesForKeys,
            #options: options,
            #errorHandler: errorHandler,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i3.NSDirectoryEnumerator?);

  @override
  _i2.NSArray? subpathsAtPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #subpathsAtPath,
          [path],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSArray?);

  @override
  _i2.NSData? contentsAtPath(_i2.NSString? path) => (super.noSuchMethod(
        Invocation.method(
          #contentsAtPath,
          [path],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSData?);

  @override
  bool createFileAtPath(
    _i2.NSString? path, {
    _i2.NSData? contents,
    _i2.NSDictionary? attributes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createFileAtPath,
          [path],
          {
            #contents: contents,
            #attributes: attributes,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Pointer<_i5.Char> fileSystemRepresentationWithPath(_i2.NSString? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #fileSystemRepresentationWithPath,
          [path],
        ),
        returnValue: _i4.dummyValue<_i5.Pointer<_i5.Char>>(
          this,
          Invocation.method(
            #fileSystemRepresentationWithPath,
            [path],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i5.Pointer<_i5.Char>>(
          this,
          Invocation.method(
            #fileSystemRepresentationWithPath,
            [path],
          ),
        ),
      ) as _i5.Pointer<_i5.Char>);

  @override
  _i2.NSString stringWithFileSystemRepresentation(
    _i5.Pointer<_i5.Char>? str, {
    required int? length,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #stringWithFileSystemRepresentation,
          [str],
          {#length: length},
        ),
        returnValue: _FakeNSString_2(
          this,
          Invocation.method(
            #stringWithFileSystemRepresentation,
            [str],
            {#length: length},
          ),
        ),
        returnValueForMissingStub: _FakeNSString_2(
          this,
          Invocation.method(
            #stringWithFileSystemRepresentation,
            [str],
            {#length: length},
          ),
        ),
      ) as _i2.NSString);

  @override
  bool replaceItemAtURL(
    _i2.NSURL? originalItemURL, {
    required _i2.NSURL? withItemAtURL,
    _i2.NSString? backupItemName,
    required _i3.NSFileManagerItemReplacementOptions? options,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? resultingItemURL,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceItemAtURL,
          [originalItemURL],
          {
            #withItemAtURL: withItemAtURL,
            #backupItemName: backupItemName,
            #options: options,
            #resultingItemURL: resultingItemURL,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool setUbiquitous(
    bool? flag, {
    required _i2.NSURL? itemAtURL,
    required _i2.NSURL? destinationURL,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUbiquitous,
          [flag],
          {
            #itemAtURL: itemAtURL,
            #destinationURL: destinationURL,
            #error: error,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isUbiquitousItemAtURL(_i2.NSURL? url) => (super.noSuchMethod(
        Invocation.method(
          #isUbiquitousItemAtURL,
          [url],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool startDownloadingUbiquitousItemAtURL(
    _i2.NSURL? url, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startDownloadingUbiquitousItemAtURL,
          [url],
          {#error: error},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool evictUbiquitousItemAtURL(
    _i2.NSURL? url, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #evictUbiquitousItemAtURL,
          [url],
          {#error: error},
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSURL? URLForPublishingUbiquitousItemAtURL(
    _i2.NSURL? url, {
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? expirationDate,
    required _i5.Pointer<_i5.Pointer<_i2.ObjCObject>>? error,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #URLForPublishingUbiquitousItemAtURL,
          [url],
          {
            #expirationDate: expirationDate,
            #error: error,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSURL?);

  @override
  void getFileProviderServicesForItemAtURL(
    _i2.NSURL? url, {
    required _i2.ObjCBlock<
            _i5.Void Function(
              _i2.NSDictionary?,
              _i2.NSError?,
            )>?
        completionHandler,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #getFileProviderServicesForItemAtURL,
          [url],
          {#completionHandler: completionHandler},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.NSURL? containerURLForSecurityApplicationGroupIdentifier(
          _i2.NSString? groupIdentifier) =>
      (super.noSuchMethod(
        Invocation.method(
          #containerURLForSecurityApplicationGroupIdentifier,
          [groupIdentifier],
        ),
        returnValueForMissingStub: null,
      ) as _i2.NSURL?);

  @override
  _i3.NSFileManager init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _FakeNSFileManager_7(
          this,
          Invocation.method(
            #init,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSFileManager_7(
          this,
          Invocation.method(
            #init,
            [],
          ),
        ),
      ) as _i3.NSFileManager);

  @override
  _i2.NSObject autorelease() => (super.noSuchMethod(
        Invocation.method(
          #autorelease,
          [],
        ),
        returnValue: _FakeNSObject_8(
          this,
          Invocation.method(
            #autorelease,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_8(
          this,
          Invocation.method(
            #autorelease,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  _i2.ObjCObjectBase class$1() => (super.noSuchMethod(
        Invocation.method(
          #class$1,
          [],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #class$1,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #class$1,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  bool conformsToProtocol$1(_i2.Protocol? aProtocol) => (super.noSuchMethod(
        Invocation.method(
          #conformsToProtocol$1,
          [aProtocol],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.ObjCObjectBase copy() => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  void dealloc() => super.noSuchMethod(
        Invocation.method(
          #dealloc,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void doesNotRecognizeSelector(_i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      super.noSuchMethod(
        Invocation.method(
          #doesNotRecognizeSelector,
          [aSelector],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forwardInvocation(_i2.NSInvocation? anInvocation) => super.noSuchMethod(
        Invocation.method(
          #forwardInvocation,
          [anInvocation],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ObjCObjectBase forwardingTargetForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #forwardingTargetForSelector,
          [aSelector],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #forwardingTargetForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #forwardingTargetForSelector,
            [aSelector],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  bool isEqual(_i2.ObjCObjectBase? object) => (super.noSuchMethod(
        Invocation.method(
          #isEqual,
          [object],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isKindOfClass(_i2.ObjCObjectBase? aClass) => (super.noSuchMethod(
        Invocation.method(
          #isKindOfClass,
          [aClass],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool isMemberOfClass(_i2.ObjCObjectBase? aClass) => (super.noSuchMethod(
        Invocation.method(
          #isMemberOfClass,
          [aClass],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Pointer<_i5.NativeFunction<_i5.Void Function()>> methodForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #methodForSelector,
          [aSelector],
        ),
        returnValue: _i4
            .dummyValue<_i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>>(
          this,
          Invocation.method(
            #methodForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _i4
            .dummyValue<_i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>>(
          this,
          Invocation.method(
            #methodForSelector,
            [aSelector],
          ),
        ),
      ) as _i5.Pointer<_i5.NativeFunction<_i5.Void Function()>>);

  @override
  _i2.NSMethodSignature methodSignatureForSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #methodSignatureForSelector,
          [aSelector],
        ),
        returnValue: _FakeNSMethodSignature_6(
          this,
          Invocation.method(
            #methodSignatureForSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeNSMethodSignature_6(
          this,
          Invocation.method(
            #methodSignatureForSelector,
            [aSelector],
          ),
        ),
      ) as _i2.NSMethodSignature);

  @override
  _i2.ObjCObjectBase mutableCopy() => (super.noSuchMethod(
        Invocation.method(
          #mutableCopy,
          [],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #mutableCopy,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #mutableCopy,
            [],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector(
          _i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector,
          [aSelector],
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector,
            [aSelector],
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector,
            [aSelector],
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector$1(
    _i5.Pointer<_i2.ObjCSelector>? aSelector, {
    required _i2.ObjCObjectBase? withObject,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector$1,
          [aSelector],
          {#withObject: withObject},
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector$1,
            [aSelector],
            {#withObject: withObject},
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector$1,
            [aSelector],
            {#withObject: withObject},
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  _i2.ObjCObjectBase performSelector$2(
    _i5.Pointer<_i2.ObjCSelector>? aSelector, {
    required _i2.ObjCObjectBase? withObject,
    required _i2.ObjCObjectBase? withObject$1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #performSelector$2,
          [aSelector],
          {
            #withObject: withObject,
            #withObject$1: withObject$1,
          },
        ),
        returnValue: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector$2,
            [aSelector],
            {
              #withObject: withObject,
              #withObject$1: withObject$1,
            },
          ),
        ),
        returnValueForMissingStub: _FakeObjCObjectBase_3(
          this,
          Invocation.method(
            #performSelector$2,
            [aSelector],
            {
              #withObject: withObject,
              #withObject$1: withObject$1,
            },
          ),
        ),
      ) as _i2.ObjCObjectBase);

  @override
  void release() => super.noSuchMethod(
        Invocation.method(
          #release,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool respondsToSelector(_i5.Pointer<_i2.ObjCSelector>? aSelector) =>
      (super.noSuchMethod(
        Invocation.method(
          #respondsToSelector,
          [aSelector],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.NSObject retain() => (super.noSuchMethod(
        Invocation.method(
          #retain,
          [],
        ),
        returnValue: _FakeNSObject_8(
          this,
          Invocation.method(
            #retain,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_8(
          this,
          Invocation.method(
            #retain,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  int retainCount() => (super.noSuchMethod(
        Invocation.method(
          #retainCount,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.NSObject self$1() => (super.noSuchMethod(
        Invocation.method(
          #self$1,
          [],
        ),
        returnValue: _FakeNSObject_8(
          this,
          Invocation.method(
            #self$1,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeNSObject_8(
          this,
          Invocation.method(
            #self$1,
            [],
          ),
        ),
      ) as _i2.NSObject);

  @override
  _i5.Pointer<_i2.NSZone> zone() => (super.noSuchMethod(
        Invocation.method(
          #zone,
          [],
        ),
        returnValue: _i4.dummyValue<_i5.Pointer<_i2.NSZone>>(
          this,
          Invocation.method(
            #zone,
            [],
          ),
        ),
        returnValueForMissingStub: _i4.dummyValue<_i5.Pointer<_i2.NSZone>>(
          this,
          Invocation.method(
            #zone,
            [],
          ),
        ),
      ) as _i5.Pointer<_i2.NSZone>);
}

/// A class which mocks [PathProviderPlatformProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProviderPlatformProvider extends _i1.Mock
    implements _i6.PathProviderPlatformProvider {
  @override
  bool get isIOS => (super.noSuchMethod(
        Invocation.getter(#isIOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isMacOS => (super.noSuchMethod(
        Invocation.getter(#isMacOS),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}
