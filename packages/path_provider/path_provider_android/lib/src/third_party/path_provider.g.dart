// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `android.app.Application$ActivityLifecycleCallbacks`
class Application$ActivityLifecycleCallbacks extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Application$ActivityLifecycleCallbacks> $type;

  @jni$_.internal
  Application$ActivityLifecycleCallbacks.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'android/app/Application$ActivityLifecycleCallbacks');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $Application$ActivityLifecycleCallbacks$NullableType();
  static const type = $Application$ActivityLifecycleCallbacks$Type();
  static final _id_onActivityCreated = _class.instanceMethodId(
    r'onActivityCreated',
    r'(Landroid/app/Activity;Landroid/os/Bundle;)V',
  );

  static final _onActivityCreated = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onActivityCreated(android.app.Activity activity, android.os.Bundle bundle)`
  void onActivityCreated(
    jni$_.JObject? activity,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onActivityCreated(
            reference.pointer,
            _id_onActivityCreated as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_onActivityDestroyed = _class.instanceMethodId(
    r'onActivityDestroyed',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityDestroyed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onActivityDestroyed(android.app.Activity activity)`
  void onActivityDestroyed(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityDestroyed(reference.pointer,
            _id_onActivityDestroyed as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityPaused = _class.instanceMethodId(
    r'onActivityPaused',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPaused = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onActivityPaused(android.app.Activity activity)`
  void onActivityPaused(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPaused(reference.pointer,
            _id_onActivityPaused as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityPostCreated = _class.instanceMethodId(
    r'onActivityPostCreated',
    r'(Landroid/app/Activity;Landroid/os/Bundle;)V',
  );

  static final _onActivityPostCreated = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPostCreated(android.app.Activity activity, android.os.Bundle bundle)`
  void onActivityPostCreated(
    jni$_.JObject? activity,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onActivityPostCreated(
            reference.pointer,
            _id_onActivityPostCreated as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_onActivityPostDestroyed = _class.instanceMethodId(
    r'onActivityPostDestroyed',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPostDestroyed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPostDestroyed(android.app.Activity activity)`
  void onActivityPostDestroyed(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPostDestroyed(
            reference.pointer,
            _id_onActivityPostDestroyed as jni$_.JMethodIDPtr,
            _$activity.pointer)
        .check();
  }

  static final _id_onActivityPostPaused = _class.instanceMethodId(
    r'onActivityPostPaused',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPostPaused = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPostPaused(android.app.Activity activity)`
  void onActivityPostPaused(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPostPaused(reference.pointer,
            _id_onActivityPostPaused as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityPostResumed = _class.instanceMethodId(
    r'onActivityPostResumed',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPostResumed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPostResumed(android.app.Activity activity)`
  void onActivityPostResumed(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPostResumed(reference.pointer,
            _id_onActivityPostResumed as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityPostSaveInstanceState = _class.instanceMethodId(
    r'onActivityPostSaveInstanceState',
    r'(Landroid/app/Activity;Landroid/os/Bundle;)V',
  );

  static final _onActivityPostSaveInstanceState =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPostSaveInstanceState(android.app.Activity activity, android.os.Bundle bundle)`
  void onActivityPostSaveInstanceState(
    jni$_.JObject? activity,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onActivityPostSaveInstanceState(
            reference.pointer,
            _id_onActivityPostSaveInstanceState as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_onActivityPostStarted = _class.instanceMethodId(
    r'onActivityPostStarted',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPostStarted = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPostStarted(android.app.Activity activity)`
  void onActivityPostStarted(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPostStarted(reference.pointer,
            _id_onActivityPostStarted as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityPostStopped = _class.instanceMethodId(
    r'onActivityPostStopped',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPostStopped = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPostStopped(android.app.Activity activity)`
  void onActivityPostStopped(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPostStopped(reference.pointer,
            _id_onActivityPostStopped as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityPreCreated = _class.instanceMethodId(
    r'onActivityPreCreated',
    r'(Landroid/app/Activity;Landroid/os/Bundle;)V',
  );

  static final _onActivityPreCreated = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPreCreated(android.app.Activity activity, android.os.Bundle bundle)`
  void onActivityPreCreated(
    jni$_.JObject? activity,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onActivityPreCreated(
            reference.pointer,
            _id_onActivityPreCreated as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_onActivityPreDestroyed = _class.instanceMethodId(
    r'onActivityPreDestroyed',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPreDestroyed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPreDestroyed(android.app.Activity activity)`
  void onActivityPreDestroyed(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPreDestroyed(
            reference.pointer,
            _id_onActivityPreDestroyed as jni$_.JMethodIDPtr,
            _$activity.pointer)
        .check();
  }

  static final _id_onActivityPrePaused = _class.instanceMethodId(
    r'onActivityPrePaused',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPrePaused = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPrePaused(android.app.Activity activity)`
  void onActivityPrePaused(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPrePaused(reference.pointer,
            _id_onActivityPrePaused as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityPreResumed = _class.instanceMethodId(
    r'onActivityPreResumed',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPreResumed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPreResumed(android.app.Activity activity)`
  void onActivityPreResumed(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPreResumed(reference.pointer,
            _id_onActivityPreResumed as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityPreSaveInstanceState = _class.instanceMethodId(
    r'onActivityPreSaveInstanceState',
    r'(Landroid/app/Activity;Landroid/os/Bundle;)V',
  );

  static final _onActivityPreSaveInstanceState =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPreSaveInstanceState(android.app.Activity activity, android.os.Bundle bundle)`
  void onActivityPreSaveInstanceState(
    jni$_.JObject? activity,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onActivityPreSaveInstanceState(
            reference.pointer,
            _id_onActivityPreSaveInstanceState as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_onActivityPreStarted = _class.instanceMethodId(
    r'onActivityPreStarted',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPreStarted = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPreStarted(android.app.Activity activity)`
  void onActivityPreStarted(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPreStarted(reference.pointer,
            _id_onActivityPreStarted as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityPreStopped = _class.instanceMethodId(
    r'onActivityPreStopped',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityPreStopped = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onActivityPreStopped(android.app.Activity activity)`
  void onActivityPreStopped(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityPreStopped(reference.pointer,
            _id_onActivityPreStopped as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityResumed = _class.instanceMethodId(
    r'onActivityResumed',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityResumed = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onActivityResumed(android.app.Activity activity)`
  void onActivityResumed(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityResumed(reference.pointer,
            _id_onActivityResumed as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivitySaveInstanceState = _class.instanceMethodId(
    r'onActivitySaveInstanceState',
    r'(Landroid/app/Activity;Landroid/os/Bundle;)V',
  );

  static final _onActivitySaveInstanceState =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onActivitySaveInstanceState(android.app.Activity activity, android.os.Bundle bundle)`
  void onActivitySaveInstanceState(
    jni$_.JObject? activity,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onActivitySaveInstanceState(
            reference.pointer,
            _id_onActivitySaveInstanceState as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$bundle.pointer)
        .check();
  }

  static final _id_onActivityStarted = _class.instanceMethodId(
    r'onActivityStarted',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityStarted = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onActivityStarted(android.app.Activity activity)`
  void onActivityStarted(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityStarted(reference.pointer,
            _id_onActivityStarted as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  static final _id_onActivityStopped = _class.instanceMethodId(
    r'onActivityStopped',
    r'(Landroid/app/Activity;)V',
  );

  static final _onActivityStopped = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onActivityStopped(android.app.Activity activity)`
  void onActivityStopped(
    jni$_.JObject? activity,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    _onActivityStopped(reference.pointer,
            _id_onActivityStopped as jni$_.JMethodIDPtr, _$activity.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Application$ActivityLifecycleCallbacks>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onActivityCreated(Landroid/app/Activity;Landroid/os/Bundle;)V') {
        _$impls[$p]!.onActivityCreated(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityDestroyed(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityDestroyed(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPaused(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPaused(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onActivityPostCreated(Landroid/app/Activity;Landroid/os/Bundle;)V') {
        _$impls[$p]!.onActivityPostCreated(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPostDestroyed(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPostDestroyed(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPostPaused(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPostPaused(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPostResumed(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPostResumed(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onActivityPostSaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)V') {
        _$impls[$p]!.onActivityPostSaveInstanceState(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPostStarted(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPostStarted(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPostStopped(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPostStopped(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onActivityPreCreated(Landroid/app/Activity;Landroid/os/Bundle;)V') {
        _$impls[$p]!.onActivityPreCreated(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPreDestroyed(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPreDestroyed(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPrePaused(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPrePaused(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPreResumed(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPreResumed(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onActivityPreSaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)V') {
        _$impls[$p]!.onActivityPreSaveInstanceState(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPreStarted(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPreStarted(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityPreStopped(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityPreStopped(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityResumed(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityResumed(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d ==
          r'onActivitySaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)V') {
        _$impls[$p]!.onActivitySaveInstanceState(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityStarted(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityStarted(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
      if ($d == r'onActivityStopped(Landroid/app/Activity;)V') {
        _$impls[$p]!.onActivityStopped(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Application$ActivityLifecycleCallbacks $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.app.Application$ActivityLifecycleCallbacks',
      $p,
      _$invokePointer,
      [
        if ($impl.onActivityCreated$async)
          r'onActivityCreated(Landroid/app/Activity;Landroid/os/Bundle;)V',
        if ($impl.onActivityDestroyed$async)
          r'onActivityDestroyed(Landroid/app/Activity;)V',
        if ($impl.onActivityPaused$async)
          r'onActivityPaused(Landroid/app/Activity;)V',
        if ($impl.onActivityPostCreated$async)
          r'onActivityPostCreated(Landroid/app/Activity;Landroid/os/Bundle;)V',
        if ($impl.onActivityPostDestroyed$async)
          r'onActivityPostDestroyed(Landroid/app/Activity;)V',
        if ($impl.onActivityPostPaused$async)
          r'onActivityPostPaused(Landroid/app/Activity;)V',
        if ($impl.onActivityPostResumed$async)
          r'onActivityPostResumed(Landroid/app/Activity;)V',
        if ($impl.onActivityPostSaveInstanceState$async)
          r'onActivityPostSaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)V',
        if ($impl.onActivityPostStarted$async)
          r'onActivityPostStarted(Landroid/app/Activity;)V',
        if ($impl.onActivityPostStopped$async)
          r'onActivityPostStopped(Landroid/app/Activity;)V',
        if ($impl.onActivityPreCreated$async)
          r'onActivityPreCreated(Landroid/app/Activity;Landroid/os/Bundle;)V',
        if ($impl.onActivityPreDestroyed$async)
          r'onActivityPreDestroyed(Landroid/app/Activity;)V',
        if ($impl.onActivityPrePaused$async)
          r'onActivityPrePaused(Landroid/app/Activity;)V',
        if ($impl.onActivityPreResumed$async)
          r'onActivityPreResumed(Landroid/app/Activity;)V',
        if ($impl.onActivityPreSaveInstanceState$async)
          r'onActivityPreSaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)V',
        if ($impl.onActivityPreStarted$async)
          r'onActivityPreStarted(Landroid/app/Activity;)V',
        if ($impl.onActivityPreStopped$async)
          r'onActivityPreStopped(Landroid/app/Activity;)V',
        if ($impl.onActivityResumed$async)
          r'onActivityResumed(Landroid/app/Activity;)V',
        if ($impl.onActivitySaveInstanceState$async)
          r'onActivitySaveInstanceState(Landroid/app/Activity;Landroid/os/Bundle;)V',
        if ($impl.onActivityStarted$async)
          r'onActivityStarted(Landroid/app/Activity;)V',
        if ($impl.onActivityStopped$async)
          r'onActivityStopped(Landroid/app/Activity;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Application$ActivityLifecycleCallbacks.implement(
    $Application$ActivityLifecycleCallbacks $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Application$ActivityLifecycleCallbacks.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Application$ActivityLifecycleCallbacks {
  factory $Application$ActivityLifecycleCallbacks({
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityCreated,
    bool onActivityCreated$async,
    required void Function(jni$_.JObject? activity) onActivityDestroyed,
    bool onActivityDestroyed$async,
    required void Function(jni$_.JObject? activity) onActivityPaused,
    bool onActivityPaused$async,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityPostCreated,
    bool onActivityPostCreated$async,
    required void Function(jni$_.JObject? activity) onActivityPostDestroyed,
    bool onActivityPostDestroyed$async,
    required void Function(jni$_.JObject? activity) onActivityPostPaused,
    bool onActivityPostPaused$async,
    required void Function(jni$_.JObject? activity) onActivityPostResumed,
    bool onActivityPostResumed$async,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityPostSaveInstanceState,
    bool onActivityPostSaveInstanceState$async,
    required void Function(jni$_.JObject? activity) onActivityPostStarted,
    bool onActivityPostStarted$async,
    required void Function(jni$_.JObject? activity) onActivityPostStopped,
    bool onActivityPostStopped$async,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityPreCreated,
    bool onActivityPreCreated$async,
    required void Function(jni$_.JObject? activity) onActivityPreDestroyed,
    bool onActivityPreDestroyed$async,
    required void Function(jni$_.JObject? activity) onActivityPrePaused,
    bool onActivityPrePaused$async,
    required void Function(jni$_.JObject? activity) onActivityPreResumed,
    bool onActivityPreResumed$async,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityPreSaveInstanceState,
    bool onActivityPreSaveInstanceState$async,
    required void Function(jni$_.JObject? activity) onActivityPreStarted,
    bool onActivityPreStarted$async,
    required void Function(jni$_.JObject? activity) onActivityPreStopped,
    bool onActivityPreStopped$async,
    required void Function(jni$_.JObject? activity) onActivityResumed,
    bool onActivityResumed$async,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivitySaveInstanceState,
    bool onActivitySaveInstanceState$async,
    required void Function(jni$_.JObject? activity) onActivityStarted,
    bool onActivityStarted$async,
    required void Function(jni$_.JObject? activity) onActivityStopped,
    bool onActivityStopped$async,
  }) = _$Application$ActivityLifecycleCallbacks;

  void onActivityCreated(jni$_.JObject? activity, jni$_.JObject? bundle);
  bool get onActivityCreated$async => false;
  void onActivityDestroyed(jni$_.JObject? activity);
  bool get onActivityDestroyed$async => false;
  void onActivityPaused(jni$_.JObject? activity);
  bool get onActivityPaused$async => false;
  void onActivityPostCreated(jni$_.JObject? activity, jni$_.JObject? bundle);
  bool get onActivityPostCreated$async => false;
  void onActivityPostDestroyed(jni$_.JObject? activity);
  bool get onActivityPostDestroyed$async => false;
  void onActivityPostPaused(jni$_.JObject? activity);
  bool get onActivityPostPaused$async => false;
  void onActivityPostResumed(jni$_.JObject? activity);
  bool get onActivityPostResumed$async => false;
  void onActivityPostSaveInstanceState(
      jni$_.JObject? activity, jni$_.JObject? bundle);
  bool get onActivityPostSaveInstanceState$async => false;
  void onActivityPostStarted(jni$_.JObject? activity);
  bool get onActivityPostStarted$async => false;
  void onActivityPostStopped(jni$_.JObject? activity);
  bool get onActivityPostStopped$async => false;
  void onActivityPreCreated(jni$_.JObject? activity, jni$_.JObject? bundle);
  bool get onActivityPreCreated$async => false;
  void onActivityPreDestroyed(jni$_.JObject? activity);
  bool get onActivityPreDestroyed$async => false;
  void onActivityPrePaused(jni$_.JObject? activity);
  bool get onActivityPrePaused$async => false;
  void onActivityPreResumed(jni$_.JObject? activity);
  bool get onActivityPreResumed$async => false;
  void onActivityPreSaveInstanceState(
      jni$_.JObject? activity, jni$_.JObject? bundle);
  bool get onActivityPreSaveInstanceState$async => false;
  void onActivityPreStarted(jni$_.JObject? activity);
  bool get onActivityPreStarted$async => false;
  void onActivityPreStopped(jni$_.JObject? activity);
  bool get onActivityPreStopped$async => false;
  void onActivityResumed(jni$_.JObject? activity);
  bool get onActivityResumed$async => false;
  void onActivitySaveInstanceState(
      jni$_.JObject? activity, jni$_.JObject? bundle);
  bool get onActivitySaveInstanceState$async => false;
  void onActivityStarted(jni$_.JObject? activity);
  bool get onActivityStarted$async => false;
  void onActivityStopped(jni$_.JObject? activity);
  bool get onActivityStopped$async => false;
}

final class _$Application$ActivityLifecycleCallbacks
    with $Application$ActivityLifecycleCallbacks {
  _$Application$ActivityLifecycleCallbacks({
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityCreated,
    this.onActivityCreated$async = false,
    required void Function(jni$_.JObject? activity) onActivityDestroyed,
    this.onActivityDestroyed$async = false,
    required void Function(jni$_.JObject? activity) onActivityPaused,
    this.onActivityPaused$async = false,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityPostCreated,
    this.onActivityPostCreated$async = false,
    required void Function(jni$_.JObject? activity) onActivityPostDestroyed,
    this.onActivityPostDestroyed$async = false,
    required void Function(jni$_.JObject? activity) onActivityPostPaused,
    this.onActivityPostPaused$async = false,
    required void Function(jni$_.JObject? activity) onActivityPostResumed,
    this.onActivityPostResumed$async = false,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityPostSaveInstanceState,
    this.onActivityPostSaveInstanceState$async = false,
    required void Function(jni$_.JObject? activity) onActivityPostStarted,
    this.onActivityPostStarted$async = false,
    required void Function(jni$_.JObject? activity) onActivityPostStopped,
    this.onActivityPostStopped$async = false,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityPreCreated,
    this.onActivityPreCreated$async = false,
    required void Function(jni$_.JObject? activity) onActivityPreDestroyed,
    this.onActivityPreDestroyed$async = false,
    required void Function(jni$_.JObject? activity) onActivityPrePaused,
    this.onActivityPrePaused$async = false,
    required void Function(jni$_.JObject? activity) onActivityPreResumed,
    this.onActivityPreResumed$async = false,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivityPreSaveInstanceState,
    this.onActivityPreSaveInstanceState$async = false,
    required void Function(jni$_.JObject? activity) onActivityPreStarted,
    this.onActivityPreStarted$async = false,
    required void Function(jni$_.JObject? activity) onActivityPreStopped,
    this.onActivityPreStopped$async = false,
    required void Function(jni$_.JObject? activity) onActivityResumed,
    this.onActivityResumed$async = false,
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onActivitySaveInstanceState,
    this.onActivitySaveInstanceState$async = false,
    required void Function(jni$_.JObject? activity) onActivityStarted,
    this.onActivityStarted$async = false,
    required void Function(jni$_.JObject? activity) onActivityStopped,
    this.onActivityStopped$async = false,
  })  : _onActivityCreated = onActivityCreated,
        _onActivityDestroyed = onActivityDestroyed,
        _onActivityPaused = onActivityPaused,
        _onActivityPostCreated = onActivityPostCreated,
        _onActivityPostDestroyed = onActivityPostDestroyed,
        _onActivityPostPaused = onActivityPostPaused,
        _onActivityPostResumed = onActivityPostResumed,
        _onActivityPostSaveInstanceState = onActivityPostSaveInstanceState,
        _onActivityPostStarted = onActivityPostStarted,
        _onActivityPostStopped = onActivityPostStopped,
        _onActivityPreCreated = onActivityPreCreated,
        _onActivityPreDestroyed = onActivityPreDestroyed,
        _onActivityPrePaused = onActivityPrePaused,
        _onActivityPreResumed = onActivityPreResumed,
        _onActivityPreSaveInstanceState = onActivityPreSaveInstanceState,
        _onActivityPreStarted = onActivityPreStarted,
        _onActivityPreStopped = onActivityPreStopped,
        _onActivityResumed = onActivityResumed,
        _onActivitySaveInstanceState = onActivitySaveInstanceState,
        _onActivityStarted = onActivityStarted,
        _onActivityStopped = onActivityStopped;

  final void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
      _onActivityCreated;
  final bool onActivityCreated$async;
  final void Function(jni$_.JObject? activity) _onActivityDestroyed;
  final bool onActivityDestroyed$async;
  final void Function(jni$_.JObject? activity) _onActivityPaused;
  final bool onActivityPaused$async;
  final void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
      _onActivityPostCreated;
  final bool onActivityPostCreated$async;
  final void Function(jni$_.JObject? activity) _onActivityPostDestroyed;
  final bool onActivityPostDestroyed$async;
  final void Function(jni$_.JObject? activity) _onActivityPostPaused;
  final bool onActivityPostPaused$async;
  final void Function(jni$_.JObject? activity) _onActivityPostResumed;
  final bool onActivityPostResumed$async;
  final void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
      _onActivityPostSaveInstanceState;
  final bool onActivityPostSaveInstanceState$async;
  final void Function(jni$_.JObject? activity) _onActivityPostStarted;
  final bool onActivityPostStarted$async;
  final void Function(jni$_.JObject? activity) _onActivityPostStopped;
  final bool onActivityPostStopped$async;
  final void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
      _onActivityPreCreated;
  final bool onActivityPreCreated$async;
  final void Function(jni$_.JObject? activity) _onActivityPreDestroyed;
  final bool onActivityPreDestroyed$async;
  final void Function(jni$_.JObject? activity) _onActivityPrePaused;
  final bool onActivityPrePaused$async;
  final void Function(jni$_.JObject? activity) _onActivityPreResumed;
  final bool onActivityPreResumed$async;
  final void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
      _onActivityPreSaveInstanceState;
  final bool onActivityPreSaveInstanceState$async;
  final void Function(jni$_.JObject? activity) _onActivityPreStarted;
  final bool onActivityPreStarted$async;
  final void Function(jni$_.JObject? activity) _onActivityPreStopped;
  final bool onActivityPreStopped$async;
  final void Function(jni$_.JObject? activity) _onActivityResumed;
  final bool onActivityResumed$async;
  final void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
      _onActivitySaveInstanceState;
  final bool onActivitySaveInstanceState$async;
  final void Function(jni$_.JObject? activity) _onActivityStarted;
  final bool onActivityStarted$async;
  final void Function(jni$_.JObject? activity) _onActivityStopped;
  final bool onActivityStopped$async;

  void onActivityCreated(jni$_.JObject? activity, jni$_.JObject? bundle) {
    return _onActivityCreated(activity, bundle);
  }

  void onActivityDestroyed(jni$_.JObject? activity) {
    return _onActivityDestroyed(activity);
  }

  void onActivityPaused(jni$_.JObject? activity) {
    return _onActivityPaused(activity);
  }

  void onActivityPostCreated(jni$_.JObject? activity, jni$_.JObject? bundle) {
    return _onActivityPostCreated(activity, bundle);
  }

  void onActivityPostDestroyed(jni$_.JObject? activity) {
    return _onActivityPostDestroyed(activity);
  }

  void onActivityPostPaused(jni$_.JObject? activity) {
    return _onActivityPostPaused(activity);
  }

  void onActivityPostResumed(jni$_.JObject? activity) {
    return _onActivityPostResumed(activity);
  }

  void onActivityPostSaveInstanceState(
      jni$_.JObject? activity, jni$_.JObject? bundle) {
    return _onActivityPostSaveInstanceState(activity, bundle);
  }

  void onActivityPostStarted(jni$_.JObject? activity) {
    return _onActivityPostStarted(activity);
  }

  void onActivityPostStopped(jni$_.JObject? activity) {
    return _onActivityPostStopped(activity);
  }

  void onActivityPreCreated(jni$_.JObject? activity, jni$_.JObject? bundle) {
    return _onActivityPreCreated(activity, bundle);
  }

  void onActivityPreDestroyed(jni$_.JObject? activity) {
    return _onActivityPreDestroyed(activity);
  }

  void onActivityPrePaused(jni$_.JObject? activity) {
    return _onActivityPrePaused(activity);
  }

  void onActivityPreResumed(jni$_.JObject? activity) {
    return _onActivityPreResumed(activity);
  }

  void onActivityPreSaveInstanceState(
      jni$_.JObject? activity, jni$_.JObject? bundle) {
    return _onActivityPreSaveInstanceState(activity, bundle);
  }

  void onActivityPreStarted(jni$_.JObject? activity) {
    return _onActivityPreStarted(activity);
  }

  void onActivityPreStopped(jni$_.JObject? activity) {
    return _onActivityPreStopped(activity);
  }

  void onActivityResumed(jni$_.JObject? activity) {
    return _onActivityResumed(activity);
  }

  void onActivitySaveInstanceState(
      jni$_.JObject? activity, jni$_.JObject? bundle) {
    return _onActivitySaveInstanceState(activity, bundle);
  }

  void onActivityStarted(jni$_.JObject? activity) {
    return _onActivityStarted(activity);
  }

  void onActivityStopped(jni$_.JObject? activity) {
    return _onActivityStopped(activity);
  }
}

final class $Application$ActivityLifecycleCallbacks$NullableType
    extends jni$_.JObjType<Application$ActivityLifecycleCallbacks?> {
  @jni$_.internal
  const $Application$ActivityLifecycleCallbacks$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/app/Application$ActivityLifecycleCallbacks;';

  @jni$_.internal
  @core$_.override
  Application$ActivityLifecycleCallbacks? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Application$ActivityLifecycleCallbacks.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Application$ActivityLifecycleCallbacks?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($Application$ActivityLifecycleCallbacks$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($Application$ActivityLifecycleCallbacks$NullableType) &&
        other is $Application$ActivityLifecycleCallbacks$NullableType;
  }
}

final class $Application$ActivityLifecycleCallbacks$Type
    extends jni$_.JObjType<Application$ActivityLifecycleCallbacks> {
  @jni$_.internal
  const $Application$ActivityLifecycleCallbacks$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/app/Application$ActivityLifecycleCallbacks;';

  @jni$_.internal
  @core$_.override
  Application$ActivityLifecycleCallbacks fromReference(
          jni$_.JReference reference) =>
      Application$ActivityLifecycleCallbacks.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Application$ActivityLifecycleCallbacks?> get nullableType =>
      const $Application$ActivityLifecycleCallbacks$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Application$ActivityLifecycleCallbacks$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($Application$ActivityLifecycleCallbacks$Type) &&
        other is $Application$ActivityLifecycleCallbacks$Type;
  }
}

/// from: `android.app.Application$OnProvideAssistDataListener`
class Application$OnProvideAssistDataListener extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Application$OnProvideAssistDataListener> $type;

  @jni$_.internal
  Application$OnProvideAssistDataListener.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'android/app/Application$OnProvideAssistDataListener');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $Application$OnProvideAssistDataListener$NullableType();
  static const type = $Application$OnProvideAssistDataListener$Type();
  static final _id_onProvideAssistData = _class.instanceMethodId(
    r'onProvideAssistData',
    r'(Landroid/app/Activity;Landroid/os/Bundle;)V',
  );

  static final _onProvideAssistData = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract void onProvideAssistData(android.app.Activity activity, android.os.Bundle bundle)`
  void onProvideAssistData(
    jni$_.JObject? activity,
    jni$_.JObject? bundle,
  ) {
    final _$activity = activity?.reference ?? jni$_.jNullReference;
    final _$bundle = bundle?.reference ?? jni$_.jNullReference;
    _onProvideAssistData(
            reference.pointer,
            _id_onProvideAssistData as jni$_.JMethodIDPtr,
            _$activity.pointer,
            _$bundle.pointer)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Application$OnProvideAssistDataListener>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'onProvideAssistData(Landroid/app/Activity;Landroid/os/Bundle;)V') {
        _$impls[$p]!.onProvideAssistData(
          $a![0]?.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]?.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Application$OnProvideAssistDataListener $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'android.app.Application$OnProvideAssistDataListener',
      $p,
      _$invokePointer,
      [
        if ($impl.onProvideAssistData$async)
          r'onProvideAssistData(Landroid/app/Activity;Landroid/os/Bundle;)V',
      ],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Application$OnProvideAssistDataListener.implement(
    $Application$OnProvideAssistDataListener $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Application$OnProvideAssistDataListener.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Application$OnProvideAssistDataListener {
  factory $Application$OnProvideAssistDataListener({
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onProvideAssistData,
    bool onProvideAssistData$async,
  }) = _$Application$OnProvideAssistDataListener;

  void onProvideAssistData(jni$_.JObject? activity, jni$_.JObject? bundle);
  bool get onProvideAssistData$async => false;
}

final class _$Application$OnProvideAssistDataListener
    with $Application$OnProvideAssistDataListener {
  _$Application$OnProvideAssistDataListener({
    required void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
        onProvideAssistData,
    this.onProvideAssistData$async = false,
  }) : _onProvideAssistData = onProvideAssistData;

  final void Function(jni$_.JObject? activity, jni$_.JObject? bundle)
      _onProvideAssistData;
  final bool onProvideAssistData$async;

  void onProvideAssistData(jni$_.JObject? activity, jni$_.JObject? bundle) {
    return _onProvideAssistData(activity, bundle);
  }
}

final class $Application$OnProvideAssistDataListener$NullableType
    extends jni$_.JObjType<Application$OnProvideAssistDataListener?> {
  @jni$_.internal
  const $Application$OnProvideAssistDataListener$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/app/Application$OnProvideAssistDataListener;';

  @jni$_.internal
  @core$_.override
  Application$OnProvideAssistDataListener? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Application$OnProvideAssistDataListener.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Application$OnProvideAssistDataListener?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($Application$OnProvideAssistDataListener$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($Application$OnProvideAssistDataListener$NullableType) &&
        other is $Application$OnProvideAssistDataListener$NullableType;
  }
}

final class $Application$OnProvideAssistDataListener$Type
    extends jni$_.JObjType<Application$OnProvideAssistDataListener> {
  @jni$_.internal
  const $Application$OnProvideAssistDataListener$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroid/app/Application$OnProvideAssistDataListener;';

  @jni$_.internal
  @core$_.override
  Application$OnProvideAssistDataListener fromReference(
          jni$_.JReference reference) =>
      Application$OnProvideAssistDataListener.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Application$OnProvideAssistDataListener?> get nullableType =>
      const $Application$OnProvideAssistDataListener$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Application$OnProvideAssistDataListener$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($Application$OnProvideAssistDataListener$Type) &&
        other is $Application$OnProvideAssistDataListener$Type;
  }
}

/// from: `android.app.Application`
class Application extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Application> $type;

  @jni$_.internal
  Application.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'android/app/Application');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Application$NullableType();
  static const type = $Application$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory Application() {
    return Application.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getProcessName = _class.staticMethodId(
    r'getProcessName',
    r'()Ljava/lang/String;',
  );

  static final _getProcessName = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public java.lang.String getProcessName()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString? getProcessName() {
    return _getProcessName(
            _class.reference.pointer, _id_getProcessName as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_onConfigurationChanged = _class.instanceMethodId(
    r'onConfigurationChanged',
    r'(Landroid/content/res/Configuration;)V',
  );

  static final _onConfigurationChanged = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void onConfigurationChanged(android.content.res.Configuration configuration)`
  void onConfigurationChanged(
    jni$_.JObject? configuration,
  ) {
    final _$configuration = configuration?.reference ?? jni$_.jNullReference;
    _onConfigurationChanged(
            reference.pointer,
            _id_onConfigurationChanged as jni$_.JMethodIDPtr,
            _$configuration.pointer)
        .check();
  }

  static final _id_onCreate = _class.instanceMethodId(
    r'onCreate',
    r'()V',
  );

  static final _onCreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onCreate()`
  void onCreate() {
    _onCreate(reference.pointer, _id_onCreate as jni$_.JMethodIDPtr).check();
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r'onLowMemory',
    r'()V',
  );

  static final _onLowMemory = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onLowMemory()`
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onTerminate = _class.instanceMethodId(
    r'onTerminate',
    r'()V',
  );

  static final _onTerminate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void onTerminate()`
  void onTerminate() {
    _onTerminate(reference.pointer, _id_onTerminate as jni$_.JMethodIDPtr)
        .check();
  }

  static final _id_onTrimMemory = _class.instanceMethodId(
    r'onTrimMemory',
    r'(I)V',
  );

  static final _onTrimMemory = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public void onTrimMemory(int i)`
  void onTrimMemory(
    int i,
  ) {
    _onTrimMemory(reference.pointer, _id_onTrimMemory as jni$_.JMethodIDPtr, i)
        .check();
  }

  static final _id_registerActivityLifecycleCallbacks = _class.instanceMethodId(
    r'registerActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _registerActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void registerActivityLifecycleCallbacks(
    Application$ActivityLifecycleCallbacks? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks =
        activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _registerActivityLifecycleCallbacks(
            reference.pointer,
            _id_registerActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
            _$activityLifecycleCallbacks.pointer)
        .check();
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r'registerComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _registerComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void registerComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_registerOnProvideAssistDataListener =
      _class.instanceMethodId(
    r'registerOnProvideAssistDataListener',
    r'(Landroid/app/Application$OnProvideAssistDataListener;)V',
  );

  static final _registerOnProvideAssistDataListener =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void registerOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener onProvideAssistDataListener)`
  void registerOnProvideAssistDataListener(
    Application$OnProvideAssistDataListener? onProvideAssistDataListener,
  ) {
    final _$onProvideAssistDataListener =
        onProvideAssistDataListener?.reference ?? jni$_.jNullReference;
    _registerOnProvideAssistDataListener(
            reference.pointer,
            _id_registerOnProvideAssistDataListener as jni$_.JMethodIDPtr,
            _$onProvideAssistDataListener.pointer)
        .check();
  }

  static final _id_unregisterActivityLifecycleCallbacks =
      _class.instanceMethodId(
    r'unregisterActivityLifecycleCallbacks',
    r'(Landroid/app/Application$ActivityLifecycleCallbacks;)V',
  );

  static final _unregisterActivityLifecycleCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)`
  void unregisterActivityLifecycleCallbacks(
    Application$ActivityLifecycleCallbacks? activityLifecycleCallbacks,
  ) {
    final _$activityLifecycleCallbacks =
        activityLifecycleCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterActivityLifecycleCallbacks(
            reference.pointer,
            _id_unregisterActivityLifecycleCallbacks as jni$_.JMethodIDPtr,
            _$activityLifecycleCallbacks.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r'unregisterComponentCallbacks',
    r'(Landroid/content/ComponentCallbacks;)V',
  );

  static final _unregisterComponentCallbacks =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)`
  void unregisterComponentCallbacks(
    jni$_.JObject? componentCallbacks,
  ) {
    final _$componentCallbacks =
        componentCallbacks?.reference ?? jni$_.jNullReference;
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni$_.JMethodIDPtr,
            _$componentCallbacks.pointer)
        .check();
  }

  static final _id_unregisterOnProvideAssistDataListener =
      _class.instanceMethodId(
    r'unregisterOnProvideAssistDataListener',
    r'(Landroid/app/Application$OnProvideAssistDataListener;)V',
  );

  static final _unregisterOnProvideAssistDataListener =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JThrowablePtr Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallVoidMethod')
          .asFunction<
              jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void unregisterOnProvideAssistDataListener(android.app.Application$OnProvideAssistDataListener onProvideAssistDataListener)`
  void unregisterOnProvideAssistDataListener(
    Application$OnProvideAssistDataListener? onProvideAssistDataListener,
  ) {
    final _$onProvideAssistDataListener =
        onProvideAssistDataListener?.reference ?? jni$_.jNullReference;
    _unregisterOnProvideAssistDataListener(
            reference.pointer,
            _id_unregisterOnProvideAssistDataListener as jni$_.JMethodIDPtr,
            _$onProvideAssistDataListener.pointer)
        .check();
  }
}

final class $Application$NullableType extends jni$_.JObjType<Application?> {
  @jni$_.internal
  const $Application$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Application;';

  @jni$_.internal
  @core$_.override
  Application? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Application.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Application?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Application$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Application$NullableType) &&
        other is $Application$NullableType;
  }
}

final class $Application$Type extends jni$_.JObjType<Application> {
  @jni$_.internal
  const $Application$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Landroid/app/Application;';

  @jni$_.internal
  @core$_.override
  Application fromReference(jni$_.JReference reference) =>
      Application.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Application?> get nullableType =>
      const $Application$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Application$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Application$Type) &&
        other is $Application$Type;
  }
}
