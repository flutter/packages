// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v24.2.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

enum GetCredentialFailureType {
  /// Indicates that a credential was returned, but it was not of the expected
  /// type.
  unexpectedCredentialType,

  /// Indicates that a server client ID was not provided.
  missingServerClientId,

  /// The request was internally interrupted.
  interrupted,

  /// The request was canceled by the user.
  canceled,

  /// No matching credential was found.
  noCredential,

  /// The provider was not properly configured.
  providerConfigurationIssue,

  /// The credential manager is not supported on this device.
  unsupported,

  /// The request failed for an unknown reason.
  unknown,
}

enum AuthorizeFailureType {
  /// Indicates that the requested types are not currently authorized.
  ///
  /// This is returned only if promptIfUnauthorized is false, indicating that
  /// the user would need to be prompted for authorization.
  unauthorized,

  /// Indicates that the call to AuthorizationClient.authorize itself failed.
  authorizeFailure,

  /// Corresponds to SendIntentException, indicating that the pending intent is
  /// no longer available.
  pendingIntentException,

  /// Corresponds to an SendIntentException in onActivityResult, indicating that
  /// either authorization failed, or the result was not available for some
  /// reason.
  apiException,

  /// Indicates that the user needs to be prompted for authorization, but there
  /// is no current activity to prompt in.
  noActivity,
}

/// The information necessary to build a an authorization request.
///
/// Corresponds to the native AuthorizationRequest object, but only contains
/// the fields used by this plugin.
class PlatformAuthorizationRequest {
  PlatformAuthorizationRequest({
    required this.scopes,
    this.hostedDomain,
    this.accountEmail,
    this.serverClientIdForForcedRefreshToken,
  });

  List<String> scopes;

  String? hostedDomain;

  String? accountEmail;

  /// If set, adds a call to requestOfflineAccess(this string, true);
  String? serverClientIdForForcedRefreshToken;

  Object encode() {
    return <Object?>[
      scopes,
      hostedDomain,
      accountEmail,
      serverClientIdForForcedRefreshToken,
    ];
  }

  static PlatformAuthorizationRequest decode(Object result) {
    result as List<Object?>;
    return PlatformAuthorizationRequest(
      scopes: (result[0] as List<Object?>?)!.cast<String>(),
      hostedDomain: result[1] as String?,
      accountEmail: result[2] as String?,
      serverClientIdForForcedRefreshToken: result[3] as String?,
    );
  }
}

/// The information necessary to build a credential request.
///
/// Combines the parts of the native GetCredentialRequest and CredentialOption
/// classes that are used for this plugin.
class GetCredentialRequestParams {
  GetCredentialRequestParams({
    required this.useButtonFlow,
    required this.googleIdOptionParams,
    this.serverClientId,
    this.nonce,
  });

  /// Whether to use the Sign in with Google button flow
  /// (GetSignInWithGoogleOption), corresponding to an explicit sign-in request,
  /// or not (GetGoogleIdOption), corresponding to an implicit potential
  /// sign-in.
  bool useButtonFlow;

  /// Parameters specific to GetGoogleIdOption.
  ///
  /// Ignored if useButtonFlow is true.
  GetCredentialRequestGoogleIdOptionParams googleIdOptionParams;

  String? serverClientId;

  String? nonce;

  Object encode() {
    return <Object?>[
      useButtonFlow,
      googleIdOptionParams,
      serverClientId,
      nonce,
    ];
  }

  static GetCredentialRequestParams decode(Object result) {
    result as List<Object?>;
    return GetCredentialRequestParams(
      useButtonFlow: result[0]! as bool,
      googleIdOptionParams:
          result[1]! as GetCredentialRequestGoogleIdOptionParams,
      serverClientId: result[2] as String?,
      nonce: result[3] as String?,
    );
  }
}

class GetCredentialRequestGoogleIdOptionParams {
  GetCredentialRequestGoogleIdOptionParams({
    required this.filterToAuthorized,
    required this.autoSelectEnabled,
  });

  bool filterToAuthorized;

  bool autoSelectEnabled;

  Object encode() {
    return <Object?>[
      filterToAuthorized,
      autoSelectEnabled,
    ];
  }

  static GetCredentialRequestGoogleIdOptionParams decode(Object result) {
    result as List<Object?>;
    return GetCredentialRequestGoogleIdOptionParams(
      filterToAuthorized: result[0]! as bool,
      autoSelectEnabled: result[1]! as bool,
    );
  }
}

/// Pigeon equivalent of the native GoogleIdTokenCredential.
class PlatformGoogleIdTokenCredential {
  PlatformGoogleIdTokenCredential({
    this.displayName,
    this.familyName,
    this.givenName,
    required this.id,
    required this.idToken,
    this.profilePictureUri,
  });

  String? displayName;

  String? familyName;

  String? givenName;

  String id;

  String idToken;

  String? profilePictureUri;

  Object encode() {
    return <Object?>[
      displayName,
      familyName,
      givenName,
      id,
      idToken,
      profilePictureUri,
    ];
  }

  static PlatformGoogleIdTokenCredential decode(Object result) {
    result as List<Object?>;
    return PlatformGoogleIdTokenCredential(
      displayName: result[0] as String?,
      familyName: result[1] as String?,
      givenName: result[2] as String?,
      id: result[3]! as String,
      idToken: result[4]! as String,
      profilePictureUri: result[5] as String?,
    );
  }
}

/// The response from a `getCredential` call.
///
/// This is not the same as a native GetCredentialResponse since modeling the
/// response type hierarchy and two-part callback in this interface layer would
/// add a lot of complexity that is not needed for the plugin's use case. It is
/// instead a processed version of the results of those callbacks.
sealed class GetCredentialResult {}

/// An authentication failure.
class GetCredentialFailure extends GetCredentialResult {
  GetCredentialFailure({
    required this.type,
    this.message,
    this.details,
  });

  /// The type of failure.
  GetCredentialFailureType type;

  /// The message associated with the failure, if any.
  String? message;

  /// Extra details about the failure, if any.
  String? details;

  Object encode() {
    return <Object?>[
      type,
      message,
      details,
    ];
  }

  static GetCredentialFailure decode(Object result) {
    result as List<Object?>;
    return GetCredentialFailure(
      type: result[0]! as GetCredentialFailureType,
      message: result[1] as String?,
      details: result[2] as String?,
    );
  }
}

/// A successful authentication result.
class GetCredentialSuccess extends GetCredentialResult {
  GetCredentialSuccess({
    required this.credential,
  });

  PlatformGoogleIdTokenCredential credential;

  Object encode() {
    return <Object?>[
      credential,
    ];
  }

  static GetCredentialSuccess decode(Object result) {
    result as List<Object?>;
    return GetCredentialSuccess(
      credential: result[0]! as PlatformGoogleIdTokenCredential,
    );
  }
}

/// The response from an `authorize` call.
sealed class AuthorizeResult {}

/// An authorization failure
class AuthorizeFailure extends AuthorizeResult {
  AuthorizeFailure({
    required this.type,
    this.message,
    this.details,
  });

  /// The type of failure.
  AuthorizeFailureType type;

  /// The message associated with the failure, if any.
  String? message;

  /// Extra details about the failure, if any.
  String? details;

  Object encode() {
    return <Object?>[
      type,
      message,
      details,
    ];
  }

  static AuthorizeFailure decode(Object result) {
    result as List<Object?>;
    return AuthorizeFailure(
      type: result[0]! as AuthorizeFailureType,
      message: result[1] as String?,
      details: result[2] as String?,
    );
  }
}

/// A successful authorization result.
///
/// Corresponds to a native AuthorizationResult.
class PlatformAuthorizationResult extends AuthorizeResult {
  PlatformAuthorizationResult({
    this.accessToken,
    this.serverAuthCode,
    required this.grantedScopes,
  });

  String? accessToken;

  String? serverAuthCode;

  List<String> grantedScopes;

  Object encode() {
    return <Object?>[
      accessToken,
      serverAuthCode,
      grantedScopes,
    ];
  }

  static PlatformAuthorizationResult decode(Object result) {
    result as List<Object?>;
    return PlatformAuthorizationResult(
      accessToken: result[0] as String?,
      serverAuthCode: result[1] as String?,
      grantedScopes: (result[2] as List<Object?>?)!.cast<String>(),
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is GetCredentialFailureType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is AuthorizeFailureType) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else if (value is PlatformAuthorizationRequest) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is GetCredentialRequestParams) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is GetCredentialRequestGoogleIdOptionParams) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PlatformGoogleIdTokenCredential) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is GetCredentialFailure) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is GetCredentialSuccess) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is AuthorizeFailure) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PlatformAuthorizationResult) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GetCredentialFailureType.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : AuthorizeFailureType.values[value];
      case 131:
        return PlatformAuthorizationRequest.decode(readValue(buffer)!);
      case 132:
        return GetCredentialRequestParams.decode(readValue(buffer)!);
      case 133:
        return GetCredentialRequestGoogleIdOptionParams.decode(
            readValue(buffer)!);
      case 134:
        return PlatformGoogleIdTokenCredential.decode(readValue(buffer)!);
      case 135:
        return GetCredentialFailure.decode(readValue(buffer)!);
      case 136:
        return GetCredentialSuccess.decode(readValue(buffer)!);
      case 137:
        return AuthorizeFailure.decode(readValue(buffer)!);
      case 138:
        return PlatformAuthorizationResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class GoogleSignInApi {
  /// Constructor for [GoogleSignInApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  GoogleSignInApi(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Returns the server client ID parsed from google-services.json by the
  /// google-services Gradle script, if any.
  Future<String?> getGoogleServicesJsonServerClientId() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_android.GoogleSignInApi.getGoogleServicesJsonServerClientId$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  /// Requests an authentication credential (sign in) via CredentialManager's
  /// getCredential.
  Future<GetCredentialResult> getCredential(
      GetCredentialRequestParams params) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_android.GoogleSignInApi.getCredential$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[params]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as GetCredentialResult?)!;
    }
  }

  /// Clears CredentialManager credential state.
  Future<void> clearCredentialState() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_android.GoogleSignInApi.clearCredentialState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Requests authorization tokens via AuthorizationClient.
  Future<AuthorizeResult> authorize(PlatformAuthorizationRequest params,
      {required bool promptIfUnauthorized}) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_android.GoogleSignInApi.authorize$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[params, promptIfUnauthorized]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as AuthorizeResult?)!;
    }
  }
}
