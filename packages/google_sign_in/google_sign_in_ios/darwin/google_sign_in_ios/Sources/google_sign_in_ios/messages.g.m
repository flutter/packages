// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "./include/google_sign_in_ios/messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface FSIInitParams ()
+ (FSIInitParams *)fromList:(NSArray *)list;
+ (nullable FSIInitParams *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FSIUserData ()
+ (FSIUserData *)fromList:(NSArray *)list;
+ (nullable FSIUserData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface FSITokenData ()
+ (FSITokenData *)fromList:(NSArray *)list;
+ (nullable FSITokenData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FSIInitParams
+ (instancetype)makeWithScopes:(NSArray<NSString *> *)scopes
                  hostedDomain:(nullable NSString *)hostedDomain
                      clientId:(nullable NSString *)clientId
                serverClientId:(nullable NSString *)serverClientId {
  FSIInitParams *pigeonResult = [[FSIInitParams alloc] init];
  pigeonResult.scopes = scopes;
  pigeonResult.hostedDomain = hostedDomain;
  pigeonResult.clientId = clientId;
  pigeonResult.serverClientId = serverClientId;
  return pigeonResult;
}
+ (FSIInitParams *)fromList:(NSArray *)list {
  FSIInitParams *pigeonResult = [[FSIInitParams alloc] init];
  pigeonResult.scopes = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.scopes != nil, @"");
  pigeonResult.hostedDomain = GetNullableObjectAtIndex(list, 1);
  pigeonResult.clientId = GetNullableObjectAtIndex(list, 2);
  pigeonResult.serverClientId = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable FSIInitParams *)nullableFromList:(NSArray *)list {
  return (list) ? [FSIInitParams fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.scopes ?: [NSNull null]),
    (self.hostedDomain ?: [NSNull null]),
    (self.clientId ?: [NSNull null]),
    (self.serverClientId ?: [NSNull null]),
  ];
}
@end

@implementation FSIUserData
+ (instancetype)makeWithDisplayName:(nullable NSString *)displayName
                              email:(NSString *)email
                             userId:(NSString *)userId
                           photoUrl:(nullable NSString *)photoUrl
                     serverAuthCode:(nullable NSString *)serverAuthCode
                            idToken:(nullable NSString *)idToken {
  FSIUserData *pigeonResult = [[FSIUserData alloc] init];
  pigeonResult.displayName = displayName;
  pigeonResult.email = email;
  pigeonResult.userId = userId;
  pigeonResult.photoUrl = photoUrl;
  pigeonResult.serverAuthCode = serverAuthCode;
  pigeonResult.idToken = idToken;
  return pigeonResult;
}
+ (FSIUserData *)fromList:(NSArray *)list {
  FSIUserData *pigeonResult = [[FSIUserData alloc] init];
  pigeonResult.displayName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.email = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.email != nil, @"");
  pigeonResult.userId = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.userId != nil, @"");
  pigeonResult.photoUrl = GetNullableObjectAtIndex(list, 3);
  pigeonResult.serverAuthCode = GetNullableObjectAtIndex(list, 4);
  pigeonResult.idToken = GetNullableObjectAtIndex(list, 5);
  return pigeonResult;
}
+ (nullable FSIUserData *)nullableFromList:(NSArray *)list {
  return (list) ? [FSIUserData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.displayName ?: [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.userId ?: [NSNull null]),
    (self.photoUrl ?: [NSNull null]),
    (self.serverAuthCode ?: [NSNull null]),
    (self.idToken ?: [NSNull null]),
  ];
}
@end

@implementation FSITokenData
+ (instancetype)makeWithIdToken:(nullable NSString *)idToken
                    accessToken:(nullable NSString *)accessToken {
  FSITokenData *pigeonResult = [[FSITokenData alloc] init];
  pigeonResult.idToken = idToken;
  pigeonResult.accessToken = accessToken;
  return pigeonResult;
}
+ (FSITokenData *)fromList:(NSArray *)list {
  FSITokenData *pigeonResult = [[FSITokenData alloc] init];
  pigeonResult.idToken = GetNullableObjectAtIndex(list, 0);
  pigeonResult.accessToken = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable FSITokenData *)nullableFromList:(NSArray *)list {
  return (list) ? [FSITokenData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.idToken ?: [NSNull null]),
    (self.accessToken ?: [NSNull null]),
  ];
}
@end

@interface FSIGoogleSignInApiCodecReader : FlutterStandardReader
@end
@implementation FSIGoogleSignInApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128:
      return [FSIInitParams fromList:[self readValue]];
    case 129:
      return [FSITokenData fromList:[self readValue]];
    case 130:
      return [FSIUserData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FSIGoogleSignInApiCodecWriter : FlutterStandardWriter
@end
@implementation FSIGoogleSignInApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FSIInitParams class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FSITokenData class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FSIUserData class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FSIGoogleSignInApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FSIGoogleSignInApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FSIGoogleSignInApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FSIGoogleSignInApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FSIGoogleSignInApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FSIGoogleSignInApiCodecReaderWriter *readerWriter =
        [[FSIGoogleSignInApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FSIGoogleSignInApiSetup(id<FlutterBinaryMessenger> binaryMessenger,
                             NSObject<FSIGoogleSignInApi> *api) {
  /// Initializes a sign in request with the given parameters.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.init"
        binaryMessenger:binaryMessenger
                  codec:FSIGoogleSignInApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeSignInWithParameters:error:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to "
                @"@selector(initializeSignInWithParameters:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FSIInitParams *arg_params = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api initializeSignInWithParameters:arg_params error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Starts a silent sign in.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signInSilently"
        binaryMessenger:binaryMessenger
                  codec:FSIGoogleSignInApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signInSilentlyWithCompletion:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to "
                @"@selector(signInSilentlyWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api signInSilentlyWithCompletion:^(FSIUserData *_Nullable output,
                                            FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Starts a sign in with user interaction.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signIn"
        binaryMessenger:binaryMessenger
                  codec:FSIGoogleSignInApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signInWithCompletion:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to @selector(signInWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api signInWithCompletion:^(FSIUserData *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Requests the access token for the current sign in.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.getAccessToken"
        binaryMessenger:binaryMessenger
                  codec:FSIGoogleSignInApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAccessTokenWithCompletion:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to "
                @"@selector(getAccessTokenWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getAccessTokenWithCompletion:^(FSITokenData *_Nullable output,
                                            FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Signs out the current user.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signOut"
        binaryMessenger:binaryMessenger
                  codec:FSIGoogleSignInApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signOutWithError:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to @selector(signOutWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api signOutWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Revokes scope grants to the application.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.disconnect"
        binaryMessenger:binaryMessenger
                  codec:FSIGoogleSignInApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(disconnectWithCompletion:)],
          @"FSIGoogleSignInApi api (%@) doesn't respond to @selector(disconnectWithCompletion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api disconnectWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Returns whether the user is currently signed in.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.isSignedIn"
        binaryMessenger:binaryMessenger
                  codec:FSIGoogleSignInApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isSignedInWithError:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to @selector(isSignedInWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api isSignedInWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Requests access to the given scopes.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:@"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.requestScopes"
        binaryMessenger:binaryMessenger
                  codec:FSIGoogleSignInApiGetCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(requestScopes:completion:)],
          @"FSIGoogleSignInApi api (%@) doesn't respond to @selector(requestScopes:completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_scopes = GetNullableObjectAtIndex(args, 0);
        [api requestScopes:arg_scopes
                completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
                  callback(wrapResult(output, error));
                }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
