// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "./include/google_sign_in_ios/messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

/// Enum mapping of known codes from
/// https://developers.google.com/identity/sign-in/ios/reference/Enums/GIDSignInErrorCode
@implementation FSIGoogleSignInErrorCodeBox
- (instancetype)initWithValue:(FSIGoogleSignInErrorCode)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface FSIPlatformConfigurationParams ()
+ (FSIPlatformConfigurationParams *)fromList:(NSArray<id> *)list;
+ (nullable FSIPlatformConfigurationParams *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FSIUserData ()
+ (FSIUserData *)fromList:(NSArray<id> *)list;
+ (nullable FSIUserData *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FSISignInResult ()
+ (FSISignInResult *)fromList:(NSArray<id> *)list;
+ (nullable FSISignInResult *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FSISignInFailure ()
+ (FSISignInFailure *)fromList:(NSArray<id> *)list;
+ (nullable FSISignInFailure *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FSISignInSuccess ()
+ (FSISignInSuccess *)fromList:(NSArray<id> *)list;
+ (nullable FSISignInSuccess *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation FSIPlatformConfigurationParams
+ (instancetype)makeWithClientId:(nullable NSString *)clientId
                  serverClientId:(nullable NSString *)serverClientId
                    hostedDomain:(nullable NSString *)hostedDomain {
  FSIPlatformConfigurationParams *pigeonResult = [[FSIPlatformConfigurationParams alloc] init];
  pigeonResult.clientId = clientId;
  pigeonResult.serverClientId = serverClientId;
  pigeonResult.hostedDomain = hostedDomain;
  return pigeonResult;
}
+ (FSIPlatformConfigurationParams *)fromList:(NSArray<id> *)list {
  FSIPlatformConfigurationParams *pigeonResult = [[FSIPlatformConfigurationParams alloc] init];
  pigeonResult.clientId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.serverClientId = GetNullableObjectAtIndex(list, 1);
  pigeonResult.hostedDomain = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable FSIPlatformConfigurationParams *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FSIPlatformConfigurationParams fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.clientId ?: [NSNull null],
    self.serverClientId ?: [NSNull null],
    self.hostedDomain ?: [NSNull null],
  ];
}
@end

@implementation FSIUserData
+ (instancetype)makeWithDisplayName:(nullable NSString *)displayName
                              email:(NSString *)email
                             userId:(NSString *)userId
                           photoUrl:(nullable NSString *)photoUrl
                            idToken:(nullable NSString *)idToken {
  FSIUserData *pigeonResult = [[FSIUserData alloc] init];
  pigeonResult.displayName = displayName;
  pigeonResult.email = email;
  pigeonResult.userId = userId;
  pigeonResult.photoUrl = photoUrl;
  pigeonResult.idToken = idToken;
  return pigeonResult;
}
+ (FSIUserData *)fromList:(NSArray<id> *)list {
  FSIUserData *pigeonResult = [[FSIUserData alloc] init];
  pigeonResult.displayName = GetNullableObjectAtIndex(list, 0);
  pigeonResult.email = GetNullableObjectAtIndex(list, 1);
  pigeonResult.userId = GetNullableObjectAtIndex(list, 2);
  pigeonResult.photoUrl = GetNullableObjectAtIndex(list, 3);
  pigeonResult.idToken = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable FSIUserData *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FSIUserData fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.displayName ?: [NSNull null],
    self.email ?: [NSNull null],
    self.userId ?: [NSNull null],
    self.photoUrl ?: [NSNull null],
    self.idToken ?: [NSNull null],
  ];
}
@end

@implementation FSISignInResult
+ (instancetype)makeWithSuccess:(nullable FSISignInSuccess *)success
                          error:(nullable FSISignInFailure *)error {
  FSISignInResult *pigeonResult = [[FSISignInResult alloc] init];
  pigeonResult.success = success;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (FSISignInResult *)fromList:(NSArray<id> *)list {
  FSISignInResult *pigeonResult = [[FSISignInResult alloc] init];
  pigeonResult.success = GetNullableObjectAtIndex(list, 0);
  pigeonResult.error = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable FSISignInResult *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FSISignInResult fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.success ?: [NSNull null],
    self.error ?: [NSNull null],
  ];
}
@end

@implementation FSISignInFailure
+ (instancetype)makeWithType:(FSIGoogleSignInErrorCode)type
                     message:(nullable NSString *)message
                     details:(nullable id)details {
  FSISignInFailure *pigeonResult = [[FSISignInFailure alloc] init];
  pigeonResult.type = type;
  pigeonResult.message = message;
  pigeonResult.details = details;
  return pigeonResult;
}
+ (FSISignInFailure *)fromList:(NSArray<id> *)list {
  FSISignInFailure *pigeonResult = [[FSISignInFailure alloc] init];
  FSIGoogleSignInErrorCodeBox *boxedFSIGoogleSignInErrorCode = GetNullableObjectAtIndex(list, 0);
  pigeonResult.type = boxedFSIGoogleSignInErrorCode.value;
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  pigeonResult.details = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable FSISignInFailure *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FSISignInFailure fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[FSIGoogleSignInErrorCodeBox alloc] initWithValue:self.type],
    self.message ?: [NSNull null],
    self.details ?: [NSNull null],
  ];
}
@end

@implementation FSISignInSuccess
+ (instancetype)makeWithUser:(FSIUserData *)user
                 accessToken:(NSString *)accessToken
               grantedScopes:(NSArray<NSString *> *)grantedScopes
              serverAuthCode:(nullable NSString *)serverAuthCode {
  FSISignInSuccess *pigeonResult = [[FSISignInSuccess alloc] init];
  pigeonResult.user = user;
  pigeonResult.accessToken = accessToken;
  pigeonResult.grantedScopes = grantedScopes;
  pigeonResult.serverAuthCode = serverAuthCode;
  return pigeonResult;
}
+ (FSISignInSuccess *)fromList:(NSArray<id> *)list {
  FSISignInSuccess *pigeonResult = [[FSISignInSuccess alloc] init];
  pigeonResult.user = GetNullableObjectAtIndex(list, 0);
  pigeonResult.accessToken = GetNullableObjectAtIndex(list, 1);
  pigeonResult.grantedScopes = GetNullableObjectAtIndex(list, 2);
  pigeonResult.serverAuthCode = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable FSISignInSuccess *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FSISignInSuccess fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.user ?: [NSNull null],
    self.accessToken ?: [NSNull null],
    self.grantedScopes ?: [NSNull null],
    self.serverAuthCode ?: [NSNull null],
  ];
}
@end

@interface FSIMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation FSIMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil
                 ? nil
                 : [[FSIGoogleSignInErrorCodeBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 130:
      return [FSIPlatformConfigurationParams fromList:[self readValue]];
    case 131:
      return [FSIUserData fromList:[self readValue]];
    case 132:
      return [FSISignInResult fromList:[self readValue]];
    case 133:
      return [FSISignInFailure fromList:[self readValue]];
    case 134:
      return [FSISignInSuccess fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FSIMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation FSIMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FSIGoogleSignInErrorCodeBox class]]) {
    FSIGoogleSignInErrorCodeBox *box = (FSIGoogleSignInErrorCodeBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FSIPlatformConfigurationParams class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FSIUserData class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FSISignInResult class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FSISignInFailure class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FSISignInSuccess class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FSIMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FSIMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FSIMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FSIMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FSIGetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FSIMessagesPigeonCodecReaderWriter *readerWriter =
        [[FSIMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpFSIGoogleSignInApi(id<FlutterBinaryMessenger> binaryMessenger,
                             NSObject<FSIGoogleSignInApi> *api) {
  SetUpFSIGoogleSignInApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFSIGoogleSignInApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                       NSObject<FSIGoogleSignInApi> *api,
                                       NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0
                             ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
                             : @"";
  /// Configures the sign in object with application-level parameters.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:
                                @"%@%@",
                                @"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.configure",
                                messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FSIGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(configureWithParameters:error:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to "
                @"@selector(configureWithParameters:error:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FSIPlatformConfigurationParams *arg_params = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api configureWithParameters:arg_params error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Attempts to restore an existing sign-in, if any, with minimal user
  /// interaction.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString stringWithFormat:@"%@%@",
                                                   @"dev.flutter.pigeon.google_sign_in_ios."
                                                   @"GoogleSignInApi.restorePreviousSignIn",
                                                   messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FSIGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(restorePreviousSignInWithCompletion:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to "
                @"@selector(restorePreviousSignInWithCompletion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api restorePreviousSignInWithCompletion:^(FSISignInResult *_Nullable output,
                                                   FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Starts a sign in with user interaction.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:
               [NSString
                   stringWithFormat:@"%@%@",
                                    @"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signIn",
                                    messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FSIGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signInWithScopeHint:nonce:completion:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to "
                @"@selector(signInWithScopeHint:nonce:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<NSString *> *arg_scopeHint = GetNullableObjectAtIndex(args, 0);
        NSString *arg_nonce = GetNullableObjectAtIndex(args, 1);
        [api signInWithScopeHint:arg_scopeHint
                           nonce:arg_nonce
                      completion:^(FSISignInResult *_Nullable output,
                                   FlutterError *_Nullable error) {
                        callback(wrapResult(output, error));
                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Requests the access token for the current sign in.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.google_sign_in_ios."
                                             @"GoogleSignInApi.getRefreshedAuthorizationTokens",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FSIGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(refreshedAuthorizationTokensForUser:completion:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to "
                @"@selector(refreshedAuthorizationTokensForUser:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_userId = GetNullableObjectAtIndex(args, 0);
        [api refreshedAuthorizationTokensForUser:arg_userId
                                      completion:^(FSISignInResult *_Nullable output,
                                                   FlutterError *_Nullable error) {
                                        callback(wrapResult(output, error));
                                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Requests authorization of the given additional scopes.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:
                                @"%@%@",
                                @"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.addScopes",
                                messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FSIGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addScopes:forUser:completion:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to "
                @"@selector(addScopes:forUser:completion:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSArray<NSString *> *arg_scopes = GetNullableObjectAtIndex(args, 0);
        NSString *arg_userId = GetNullableObjectAtIndex(args, 1);
        [api addScopes:arg_scopes
               forUser:arg_userId
            completion:^(FSISignInResult *_Nullable output, FlutterError *_Nullable error) {
              callback(wrapResult(output, error));
            }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Signs out the current user.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:
                                @"%@%@",
                                @"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signOut",
                                messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FSIGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(signOutWithError:)],
                @"FSIGoogleSignInApi api (%@) doesn't respond to @selector(signOutWithError:)",
                api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api signOutWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  /// Revokes scope grants to the application.
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:
                                @"%@%@",
                                @"dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.disconnect",
                                messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:FSIGetMessagesCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector(disconnectWithCompletion:)],
          @"FSIGoogleSignInApi api (%@) doesn't respond to @selector(disconnectWithCompletion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api disconnectWithCompletion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
