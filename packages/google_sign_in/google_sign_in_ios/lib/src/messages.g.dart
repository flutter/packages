// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

/// Enum mapping of known codes from
/// https://developers.google.com/identity/sign-in/ios/reference/Enums/GIDSignInErrorCode
enum GoogleSignInErrorCode {
  /// Either the underlying kGIDSignInErrorCodeUnknown, or a code that isn't
  /// a known code mapped to a value below.
  unknown,

  /// kGIDSignInErrorCodeKeychain; an error reading or writing to keychain.
  keychainError,

  /// kGIDSignInErrorCodeHasNoAuthInKeychain; no auth present in the keychain.
  ///
  /// For restorePreviousSignIn, this indicates that there is no sign in to
  /// restore.
  noAuthInKeychain,

  /// kGIDSignInErrorCodeCanceled; the request was canceled by the user.
  canceled,

  /// kGIDSignInErrorCodeEMM; an enterprise management error occurred.
  eemError,

  /// kGIDSignInErrorCodeScopesAlreadyGranted; the requested scopes have already
  /// been granted.
  scopesAlreadyGranted,

  /// kGIDSignInErrorCodeMismatchWithCurrentUser; an operation was requested on
  /// a non-current user.
  userMismatch,
}

class PlatformConfigurationParams {
  PlatformConfigurationParams({
    this.clientId,
    this.serverClientId,
    this.hostedDomain,
  });

  String? clientId;

  String? serverClientId;

  String? hostedDomain;

  Object encode() {
    return <Object?>[
      clientId,
      serverClientId,
      hostedDomain,
    ];
  }

  static PlatformConfigurationParams decode(Object result) {
    result as List<Object?>;
    return PlatformConfigurationParams(
      clientId: result[0] as String?,
      serverClientId: result[1] as String?,
      hostedDomain: result[2] as String?,
    );
  }
}

/// Pigeon version of GoogleSignInUserData + AuthenticationTokenData.
///
/// See GoogleSignInUserData and AuthenticationTokenData for details.
class UserData {
  UserData({
    this.displayName,
    required this.email,
    required this.userId,
    this.photoUrl,
    this.idToken,
  });

  String? displayName;

  String email;

  String userId;

  String? photoUrl;

  String? idToken;

  Object encode() {
    return <Object?>[
      displayName,
      email,
      userId,
      photoUrl,
      idToken,
    ];
  }

  static UserData decode(Object result) {
    result as List<Object?>;
    return UserData(
      displayName: result[0] as String?,
      email: result[1]! as String,
      userId: result[2]! as String,
      photoUrl: result[3] as String?,
      idToken: result[4] as String?,
    );
  }
}

/// The response from an auth call.
class SignInResult {
  SignInResult({
    this.success,
    this.error,
  });

  /// The success result, if any.
  ///
  /// Exactly one of success and error will be non-nil.
  SignInSuccess? success;

  /// The error result, if any.
  ///
  /// Exactly one of success and error will be non-nil.
  SignInFailure? error;

  Object encode() {
    return <Object?>[
      success,
      error,
    ];
  }

  static SignInResult decode(Object result) {
    result as List<Object?>;
    return SignInResult(
      success: result[0] as SignInSuccess?,
      error: result[1] as SignInFailure?,
    );
  }
}

/// An sign in failure.
class SignInFailure {
  SignInFailure({
    required this.type,
    this.message,
    this.details,
  });

  /// The type of failure.
  GoogleSignInErrorCode type;

  /// The message associated with the failure, if any.
  String? message;

  /// Extra details about the failure, if any.
  Object? details;

  Object encode() {
    return <Object?>[
      type,
      message,
      details,
    ];
  }

  static SignInFailure decode(Object result) {
    result as List<Object?>;
    return SignInFailure(
      type: result[0]! as GoogleSignInErrorCode,
      message: result[1] as String?,
      details: result[2],
    );
  }
}

/// A successful auth result.
///
/// Corresponds to the information in a native GIDSignInResult. Because of the
/// structure of the Google Sign In SDK, this has information corresponding to
/// both authn and authz steps, even though incremental authorization is
/// supported.
class SignInSuccess {
  SignInSuccess({
    required this.user,
    required this.accessToken,
    required this.grantedScopes,
    this.serverAuthCode,
  });

  UserData user;

  String accessToken;

  List<String> grantedScopes;

  String? serverAuthCode;

  Object encode() {
    return <Object?>[
      user,
      accessToken,
      grantedScopes,
      serverAuthCode,
    ];
  }

  static SignInSuccess decode(Object result) {
    result as List<Object?>;
    return SignInSuccess(
      user: result[0]! as UserData,
      accessToken: result[1]! as String,
      grantedScopes: (result[2] as List<Object?>?)!.cast<String>(),
      serverAuthCode: result[3] as String?,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is GoogleSignInErrorCode) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is PlatformConfigurationParams) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is UserData) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is SignInResult) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is SignInFailure) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is SignInSuccess) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GoogleSignInErrorCode.values[value];
      case 130:
        return PlatformConfigurationParams.decode(readValue(buffer)!);
      case 131:
        return UserData.decode(readValue(buffer)!);
      case 132:
        return SignInResult.decode(readValue(buffer)!);
      case 133:
        return SignInFailure.decode(readValue(buffer)!);
      case 134:
        return SignInSuccess.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class GoogleSignInApi {
  /// Constructor for [GoogleSignInApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  GoogleSignInApi(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Configures the sign in object with application-level parameters.
  Future<void> configure(PlatformConfigurationParams params) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.configure$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[params]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Attempts to restore an existing sign-in, if any, with minimal user
  /// interaction.
  Future<SignInResult> restorePreviousSignIn() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.restorePreviousSignIn$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as SignInResult?)!;
    }
  }

  /// Starts a sign in with user interaction.
  Future<SignInResult> signIn(List<String> scopeHint, String? nonce) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signIn$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[scopeHint, nonce]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as SignInResult?)!;
    }
  }

  /// Requests the access token for the current sign in.
  Future<SignInResult> getRefreshedAuthorizationTokens(String userId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.getRefreshedAuthorizationTokens$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[userId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as SignInResult?)!;
    }
  }

  /// Requests authorization of the given additional scopes.
  Future<SignInResult> addScopes(List<String> scopes, String userId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.addScopes$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[scopes, userId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as SignInResult?)!;
    }
  }

  /// Signs out the current user.
  Future<void> signOut() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signOut$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Revokes scope grants to the application.
  Future<void> disconnect() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.disconnect$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
