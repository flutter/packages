// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// Pigeon version of SignInInitParams.
///
/// See SignInInitParams for details.
class InitParams {
  InitParams({
    required this.scopes,
    this.hostedDomain,
    this.clientId,
    this.serverClientId,
  });

  List<String?> scopes;

  String? hostedDomain;

  String? clientId;

  String? serverClientId;

  Object encode() {
    return <Object?>[
      scopes,
      hostedDomain,
      clientId,
      serverClientId,
    ];
  }

  static InitParams decode(Object result) {
    result as List<Object?>;
    return InitParams(
      scopes: (result[0] as List<Object?>?)!.cast<String?>(),
      hostedDomain: result[1] as String?,
      clientId: result[2] as String?,
      serverClientId: result[3] as String?,
    );
  }
}

/// Pigeon version of GoogleSignInUserData.
///
/// See GoogleSignInUserData for details.
class UserData {
  UserData({
    this.displayName,
    required this.email,
    required this.userId,
    this.photoUrl,
    this.serverAuthCode,
    this.idToken,
  });

  String? displayName;

  String email;

  String userId;

  String? photoUrl;

  String? serverAuthCode;

  String? idToken;

  Object encode() {
    return <Object?>[
      displayName,
      email,
      userId,
      photoUrl,
      serverAuthCode,
      idToken,
    ];
  }

  static UserData decode(Object result) {
    result as List<Object?>;
    return UserData(
      displayName: result[0] as String?,
      email: result[1]! as String,
      userId: result[2]! as String,
      photoUrl: result[3] as String?,
      serverAuthCode: result[4] as String?,
      idToken: result[5] as String?,
    );
  }
}

/// Pigeon version of GoogleSignInTokenData.
///
/// See GoogleSignInTokenData for details.
class TokenData {
  TokenData({
    this.idToken,
    this.accessToken,
  });

  String? idToken;

  String? accessToken;

  Object encode() {
    return <Object?>[
      idToken,
      accessToken,
    ];
  }

  static TokenData decode(Object result) {
    result as List<Object?>;
    return TokenData(
      idToken: result[0] as String?,
      accessToken: result[1] as String?,
    );
  }
}

class _GoogleSignInApiCodec extends StandardMessageCodec {
  const _GoogleSignInApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is InitParams) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is TokenData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is UserData) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return InitParams.decode(readValue(buffer)!);
      case 129:
        return TokenData.decode(readValue(buffer)!);
      case 130:
        return UserData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class GoogleSignInApi {
  /// Constructor for [GoogleSignInApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  GoogleSignInApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _GoogleSignInApiCodec();

  /// Initializes a sign in request with the given parameters.
  Future<void> init(InitParams arg_params) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.init', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_params]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Starts a silent sign in.
  Future<UserData> signInSilently() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signInSilently',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as UserData?)!;
    }
  }

  /// Starts a sign in with user interaction.
  Future<UserData> signIn() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signIn', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as UserData?)!;
    }
  }

  /// Requests the access token for the current sign in.
  Future<TokenData> getAccessToken() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.getAccessToken',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as TokenData?)!;
    }
  }

  /// Signs out the current user.
  Future<void> signOut() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.signOut', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Revokes scope grants to the application.
  Future<void> disconnect() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.disconnect',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  /// Returns whether the user is currently signed in.
  Future<bool> isSignedIn() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.isSignedIn',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  /// Requests access to the given scopes.
  Future<bool> requestScopes(List<String?> arg_scopes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.google_sign_in_ios.GoogleSignInApi.requestScopes',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_scopes]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }
}
