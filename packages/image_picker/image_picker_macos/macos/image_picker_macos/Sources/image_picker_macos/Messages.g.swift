// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.6.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// The common options between [ImageSelectionOptions], [VideoSelectionOptions]
/// and [MediaSelectionOptions].
///
/// Generated class from Pigeon that represents data sent in messages.
struct GeneralOptions {
  /// The value `0` means no limit.
  var limit: Int64



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> GeneralOptions? {
    let limit = pigeonVar_list[0] as! Int64

    return GeneralOptions(
      limit: limit
    )
  }
  func toList() -> [Any?] {
    return [
      limit
    ]
  }
}

/// Represents the maximum size with [width] and [height] dimensions.
///
/// Generated class from Pigeon that represents data sent in messages.
struct MaxSize {
  var width: Double? = nil
  var height: Double? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MaxSize? {
    let width: Double? = nilOrValue(pigeonVar_list[0])
    let height: Double? = nilOrValue(pigeonVar_list[1])

    return MaxSize(
      width: width,
      height: height
    )
  }
  func toList() -> [Any?] {
    return [
      width,
      height,
    ]
  }
}

/// Options for image selection and output.
///
/// Generated class from Pigeon that represents data sent in messages.
struct ImageSelectionOptions {
  /// If set, the max size that the image should be resized to fit in.
  var maxSize: MaxSize? = nil
  /// The quality of the output image, from 0-100.
  ///
  /// 100 indicates original quality.
  var quality: Int64



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ImageSelectionOptions? {
    let maxSize: MaxSize? = nilOrValue(pigeonVar_list[0])
    let quality = pigeonVar_list[1] as! Int64

    return ImageSelectionOptions(
      maxSize: maxSize,
      quality: quality
    )
  }
  func toList() -> [Any?] {
    return [
      maxSize,
      quality,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MediaSelectionOptions {
  var imageSelectionOptions: ImageSelectionOptions



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> MediaSelectionOptions? {
    let imageSelectionOptions = pigeonVar_list[0] as! ImageSelectionOptions

    return MediaSelectionOptions(
      imageSelectionOptions: imageSelectionOptions
    )
  }
  func toList() -> [Any?] {
    return [
      imageSelectionOptions
    ]
  }
}

private class messagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return GeneralOptions.fromList(self.readValue() as! [Any?])
    case 130:
      return MaxSize.fromList(self.readValue() as! [Any?])
    case 131:
      return ImageSelectionOptions.fromList(self.readValue() as! [Any?])
    case 132:
      return MediaSelectionOptions.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class messagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? GeneralOptions {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? MaxSize {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ImageSelectionOptions {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? MediaSelectionOptions {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class messagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return messagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return messagesPigeonCodecWriter(data: data)
  }
}

class messagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = messagesPigeonCodec(readerWriter: messagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol ImagePickerApi {
  func supportsPHPicker() throws -> Bool
  func pickImages(options: ImageSelectionOptions, generalOptions: GeneralOptions, completion: @escaping (Result<[String], Error>) -> Void)
  /// Currently, multi-video selection is unimplemented.
  func pickVideos(generalOptions: GeneralOptions, completion: @escaping (Result<[String], Error>) -> Void)
  func pickMedia(options: MediaSelectionOptions, generalOptions: GeneralOptions, completion: @escaping (Result<[String], Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class ImagePickerApiSetup {
  static var codec: FlutterStandardMessageCodec { messagesPigeonCodec.shared }
  /// Sets up an instance of `ImagePickerApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: ImagePickerApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let supportsPHPickerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.image_picker_macos.ImagePickerApi.supportsPHPicker\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      supportsPHPickerChannel.setMessageHandler { _, reply in
        do {
          let result = try api.supportsPHPicker()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      supportsPHPickerChannel.setMessageHandler(nil)
    }
    let pickImagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.image_picker_macos.ImagePickerApi.pickImages\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pickImagesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg = args[0] as! ImageSelectionOptions
        let generalOptionsArg = args[1] as! GeneralOptions
        api.pickImages(options: optionsArg, generalOptions: generalOptionsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      pickImagesChannel.setMessageHandler(nil)
    }
    /// Currently, multi-video selection is unimplemented.
    let pickVideosChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.image_picker_macos.ImagePickerApi.pickVideos\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pickVideosChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let generalOptionsArg = args[0] as! GeneralOptions
        api.pickVideos(generalOptions: generalOptionsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      pickVideosChannel.setMessageHandler(nil)
    }
    let pickMediaChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.image_picker_macos.ImagePickerApi.pickMedia\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      pickMediaChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg = args[0] as! MediaSelectionOptions
        let generalOptionsArg = args[1] as! GeneralOptions
        api.pickMedia(options: optionsArg, generalOptions: generalOptionsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      pickMediaChannel.setMessageHandler(nil)
    }
  }
}
