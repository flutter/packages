// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.4.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

/// Pigeon version of Java BillingClient.ProductType.
enum PlatformProductType {
  inapp,
  subs,
}

/// Pigeon version of billing_client_wrapper.dart's BillingChoiceMode.
enum PlatformBillingChoiceMode {
  /// Billing through google play.
  ///
  /// Default state.
  playBillingOnly,

  /// Billing through app provided flow.
  alternativeBillingOnly,

  /// Users can choose Play billing or alternative billing.
  userChoiceBilling,
}

/// Pigeon version of Java Purchase.PurchaseState.
enum PlatformPurchaseState {
  unspecified,
  purchased,
  pending,
}

/// Pigeon version of Java ProductDetails.RecurrenceMode.
enum PlatformRecurrenceMode {
  finiteRecurring,
  infiniteRecurring,
  nonRecurring,
}

/// Pigeon version of Java QueryProductDetailsParams.Product.
class PlatformQueryProduct {
  PlatformQueryProduct({
    required this.productId,
    required this.productType,
  });

  String productId;

  PlatformProductType productType;

  Object encode() {
    return <Object?>[
      productId,
      productType,
    ];
  }

  static PlatformQueryProduct decode(Object result) {
    result as List<Object?>;
    return PlatformQueryProduct(
      productId: result[0]! as String,
      productType: result[1]! as PlatformProductType,
    );
  }
}

/// Pigeon version of Java AccountIdentifiers.
class PlatformAccountIdentifiers {
  PlatformAccountIdentifiers({
    this.obfuscatedAccountId,
    this.obfuscatedProfileId,
  });

  String? obfuscatedAccountId;

  String? obfuscatedProfileId;

  Object encode() {
    return <Object?>[
      obfuscatedAccountId,
      obfuscatedProfileId,
    ];
  }

  static PlatformAccountIdentifiers decode(Object result) {
    result as List<Object?>;
    return PlatformAccountIdentifiers(
      obfuscatedAccountId: result[0] as String?,
      obfuscatedProfileId: result[1] as String?,
    );
  }
}

/// Pigeon version of Java BillingResult.
class PlatformBillingResult {
  PlatformBillingResult({
    required this.responseCode,
    required this.debugMessage,
  });

  int responseCode;

  String debugMessage;

  Object encode() {
    return <Object?>[
      responseCode,
      debugMessage,
    ];
  }

  static PlatformBillingResult decode(Object result) {
    result as List<Object?>;
    return PlatformBillingResult(
      responseCode: result[0]! as int,
      debugMessage: result[1]! as String,
    );
  }
}

/// Pigeon version of Java ProductDetails.OneTimePurchaseOfferDetails.
class PlatformOneTimePurchaseOfferDetails {
  PlatformOneTimePurchaseOfferDetails({
    required this.priceAmountMicros,
    required this.formattedPrice,
    required this.priceCurrencyCode,
  });

  int priceAmountMicros;

  String formattedPrice;

  String priceCurrencyCode;

  Object encode() {
    return <Object?>[
      priceAmountMicros,
      formattedPrice,
      priceCurrencyCode,
    ];
  }

  static PlatformOneTimePurchaseOfferDetails decode(Object result) {
    result as List<Object?>;
    return PlatformOneTimePurchaseOfferDetails(
      priceAmountMicros: result[0]! as int,
      formattedPrice: result[1]! as String,
      priceCurrencyCode: result[2]! as String,
    );
  }
}

/// Pigeon version of Java ProductDetails.
class PlatformProductDetails {
  PlatformProductDetails({
    required this.description,
    required this.name,
    required this.productId,
    required this.productType,
    required this.title,
    this.oneTimePurchaseOfferDetails,
    this.subscriptionOfferDetails,
  });

  String description;

  String name;

  String productId;

  PlatformProductType productType;

  String title;

  PlatformOneTimePurchaseOfferDetails? oneTimePurchaseOfferDetails;

  List<PlatformSubscriptionOfferDetails>? subscriptionOfferDetails;

  Object encode() {
    return <Object?>[
      description,
      name,
      productId,
      productType,
      title,
      oneTimePurchaseOfferDetails,
      subscriptionOfferDetails,
    ];
  }

  static PlatformProductDetails decode(Object result) {
    result as List<Object?>;
    return PlatformProductDetails(
      description: result[0]! as String,
      name: result[1]! as String,
      productId: result[2]! as String,
      productType: result[3]! as PlatformProductType,
      title: result[4]! as String,
      oneTimePurchaseOfferDetails:
          result[5] as PlatformOneTimePurchaseOfferDetails?,
      subscriptionOfferDetails: (result[6] as List<Object?>?)
          ?.cast<PlatformSubscriptionOfferDetails>(),
    );
  }
}

/// Pigeon version of ProductDetailsResponseWrapper, which contains the
/// components of the Java ProductDetailsResponseListener callback.
class PlatformProductDetailsResponse {
  PlatformProductDetailsResponse({
    required this.billingResult,
    required this.productDetails,
  });

  PlatformBillingResult billingResult;

  List<PlatformProductDetails> productDetails;

  Object encode() {
    return <Object?>[
      billingResult,
      productDetails,
    ];
  }

  static PlatformProductDetailsResponse decode(Object result) {
    result as List<Object?>;
    return PlatformProductDetailsResponse(
      billingResult: result[0]! as PlatformBillingResult,
      productDetails:
          (result[1] as List<Object?>?)!.cast<PlatformProductDetails>(),
    );
  }
}

/// Pigeon version of AlternativeBillingOnlyReportingDetailsWrapper, which
/// contains the components of the Java
/// AlternativeBillingOnlyReportingDetailsListener callback.
class PlatformAlternativeBillingOnlyReportingDetailsResponse {
  PlatformAlternativeBillingOnlyReportingDetailsResponse({
    required this.billingResult,
    required this.externalTransactionToken,
  });

  PlatformBillingResult billingResult;

  String externalTransactionToken;

  Object encode() {
    return <Object?>[
      billingResult,
      externalTransactionToken,
    ];
  }

  static PlatformAlternativeBillingOnlyReportingDetailsResponse decode(
      Object result) {
    result as List<Object?>;
    return PlatformAlternativeBillingOnlyReportingDetailsResponse(
      billingResult: result[0]! as PlatformBillingResult,
      externalTransactionToken: result[1]! as String,
    );
  }
}

/// Pigeon version of BillingConfigWrapper, which contains the components of the
/// Java BillingConfigResponseListener callback.
class PlatformBillingConfigResponse {
  PlatformBillingConfigResponse({
    required this.billingResult,
    required this.countryCode,
  });

  PlatformBillingResult billingResult;

  String countryCode;

  Object encode() {
    return <Object?>[
      billingResult,
      countryCode,
    ];
  }

  static PlatformBillingConfigResponse decode(Object result) {
    result as List<Object?>;
    return PlatformBillingConfigResponse(
      billingResult: result[0]! as PlatformBillingResult,
      countryCode: result[1]! as String,
    );
  }
}

/// Pigeon version of Java BillingFlowParams.
class PlatformBillingFlowParams {
  PlatformBillingFlowParams({
    required this.product,
    required this.prorationMode,
    required this.replacementMode,
    this.offerToken,
    this.accountId,
    this.obfuscatedProfileId,
    this.oldProduct,
    this.purchaseToken,
  });

  String product;

  int prorationMode;

  int replacementMode;

  String? offerToken;

  String? accountId;

  String? obfuscatedProfileId;

  String? oldProduct;

  String? purchaseToken;

  Object encode() {
    return <Object?>[
      product,
      prorationMode,
      replacementMode,
      offerToken,
      accountId,
      obfuscatedProfileId,
      oldProduct,
      purchaseToken,
    ];
  }

  static PlatformBillingFlowParams decode(Object result) {
    result as List<Object?>;
    return PlatformBillingFlowParams(
      product: result[0]! as String,
      prorationMode: result[1]! as int,
      replacementMode: result[2]! as int,
      offerToken: result[3] as String?,
      accountId: result[4] as String?,
      obfuscatedProfileId: result[5] as String?,
      oldProduct: result[6] as String?,
      purchaseToken: result[7] as String?,
    );
  }
}

/// Pigeon version of Java ProductDetails.PricingPhase.
class PlatformPricingPhase {
  PlatformPricingPhase({
    required this.billingCycleCount,
    required this.recurrenceMode,
    required this.priceAmountMicros,
    required this.billingPeriod,
    required this.formattedPrice,
    required this.priceCurrencyCode,
  });

  int billingCycleCount;

  PlatformRecurrenceMode recurrenceMode;

  int priceAmountMicros;

  String billingPeriod;

  String formattedPrice;

  String priceCurrencyCode;

  Object encode() {
    return <Object?>[
      billingCycleCount,
      recurrenceMode,
      priceAmountMicros,
      billingPeriod,
      formattedPrice,
      priceCurrencyCode,
    ];
  }

  static PlatformPricingPhase decode(Object result) {
    result as List<Object?>;
    return PlatformPricingPhase(
      billingCycleCount: result[0]! as int,
      recurrenceMode: result[1]! as PlatformRecurrenceMode,
      priceAmountMicros: result[2]! as int,
      billingPeriod: result[3]! as String,
      formattedPrice: result[4]! as String,
      priceCurrencyCode: result[5]! as String,
    );
  }
}

/// Pigeon version of Java Purchase.
///
/// See also PurchaseWrapper on the Dart side.
class PlatformPurchase {
  PlatformPurchase({
    this.orderId,
    required this.packageName,
    required this.purchaseTime,
    required this.purchaseToken,
    required this.signature,
    required this.products,
    required this.isAutoRenewing,
    required this.originalJson,
    required this.developerPayload,
    required this.isAcknowledged,
    required this.quantity,
    required this.purchaseState,
    this.accountIdentifiers,
  });

  String? orderId;

  String packageName;

  int purchaseTime;

  String purchaseToken;

  String signature;

  List<String> products;

  bool isAutoRenewing;

  String originalJson;

  String developerPayload;

  bool isAcknowledged;

  int quantity;

  PlatformPurchaseState purchaseState;

  PlatformAccountIdentifiers? accountIdentifiers;

  Object encode() {
    return <Object?>[
      orderId,
      packageName,
      purchaseTime,
      purchaseToken,
      signature,
      products,
      isAutoRenewing,
      originalJson,
      developerPayload,
      isAcknowledged,
      quantity,
      purchaseState,
      accountIdentifiers,
    ];
  }

  static PlatformPurchase decode(Object result) {
    result as List<Object?>;
    return PlatformPurchase(
      orderId: result[0] as String?,
      packageName: result[1]! as String,
      purchaseTime: result[2]! as int,
      purchaseToken: result[3]! as String,
      signature: result[4]! as String,
      products: (result[5] as List<Object?>?)!.cast<String>(),
      isAutoRenewing: result[6]! as bool,
      originalJson: result[7]! as String,
      developerPayload: result[8]! as String,
      isAcknowledged: result[9]! as bool,
      quantity: result[10]! as int,
      purchaseState: result[11]! as PlatformPurchaseState,
      accountIdentifiers: result[12] as PlatformAccountIdentifiers?,
    );
  }
}

/// Pigeon version of PurchaseHistoryRecord.
///
/// See also PurchaseHistoryRecordWrapper on the Dart side.
class PlatformPurchaseHistoryRecord {
  PlatformPurchaseHistoryRecord({
    required this.quantity,
    required this.purchaseTime,
    this.developerPayload,
    required this.originalJson,
    required this.purchaseToken,
    required this.signature,
    required this.products,
  });

  int quantity;

  int purchaseTime;

  String? developerPayload;

  String originalJson;

  String purchaseToken;

  String signature;

  List<String> products;

  Object encode() {
    return <Object?>[
      quantity,
      purchaseTime,
      developerPayload,
      originalJson,
      purchaseToken,
      signature,
      products,
    ];
  }

  static PlatformPurchaseHistoryRecord decode(Object result) {
    result as List<Object?>;
    return PlatformPurchaseHistoryRecord(
      quantity: result[0]! as int,
      purchaseTime: result[1]! as int,
      developerPayload: result[2] as String?,
      originalJson: result[3]! as String,
      purchaseToken: result[4]! as String,
      signature: result[5]! as String,
      products: (result[6] as List<Object?>?)!.cast<String>(),
    );
  }
}

/// Pigeon version of PurchasesHistoryResult, which contains the components of
/// the Java PurchaseHistoryResponseListener callback.
class PlatformPurchaseHistoryResponse {
  PlatformPurchaseHistoryResponse({
    required this.billingResult,
    required this.purchases,
  });

  PlatformBillingResult billingResult;

  List<PlatformPurchaseHistoryRecord> purchases;

  Object encode() {
    return <Object?>[
      billingResult,
      purchases,
    ];
  }

  static PlatformPurchaseHistoryResponse decode(Object result) {
    result as List<Object?>;
    return PlatformPurchaseHistoryResponse(
      billingResult: result[0]! as PlatformBillingResult,
      purchases:
          (result[1] as List<Object?>?)!.cast<PlatformPurchaseHistoryRecord>(),
    );
  }
}

/// Pigeon version of PurchasesResultWrapper, which contains the components of
/// the Java PurchasesResponseListener callback.
class PlatformPurchasesResponse {
  PlatformPurchasesResponse({
    required this.billingResult,
    required this.purchases,
  });

  PlatformBillingResult billingResult;

  List<PlatformPurchase> purchases;

  Object encode() {
    return <Object?>[
      billingResult,
      purchases,
    ];
  }

  static PlatformPurchasesResponse decode(Object result) {
    result as List<Object?>;
    return PlatformPurchasesResponse(
      billingResult: result[0]! as PlatformBillingResult,
      purchases: (result[1] as List<Object?>?)!.cast<PlatformPurchase>(),
    );
  }
}

/// Pigeon version of Java ProductDetails.SubscriptionOfferDetails.
class PlatformSubscriptionOfferDetails {
  PlatformSubscriptionOfferDetails({
    required this.basePlanId,
    this.offerId,
    required this.offerToken,
    required this.offerTags,
    required this.pricingPhases,
  });

  String basePlanId;

  String? offerId;

  String offerToken;

  List<String> offerTags;

  List<PlatformPricingPhase> pricingPhases;

  Object encode() {
    return <Object?>[
      basePlanId,
      offerId,
      offerToken,
      offerTags,
      pricingPhases,
    ];
  }

  static PlatformSubscriptionOfferDetails decode(Object result) {
    result as List<Object?>;
    return PlatformSubscriptionOfferDetails(
      basePlanId: result[0]! as String,
      offerId: result[1] as String?,
      offerToken: result[2]! as String,
      offerTags: (result[3] as List<Object?>?)!.cast<String>(),
      pricingPhases:
          (result[4] as List<Object?>?)!.cast<PlatformPricingPhase>(),
    );
  }
}

/// Pigeon version of UserChoiceDetailsWrapper and Java UserChoiceDetails.
class PlatformUserChoiceDetails {
  PlatformUserChoiceDetails({
    this.originalExternalTransactionId,
    required this.externalTransactionToken,
    required this.products,
  });

  String? originalExternalTransactionId;

  String externalTransactionToken;

  List<PlatformUserChoiceProduct> products;

  Object encode() {
    return <Object?>[
      originalExternalTransactionId,
      externalTransactionToken,
      products,
    ];
  }

  static PlatformUserChoiceDetails decode(Object result) {
    result as List<Object?>;
    return PlatformUserChoiceDetails(
      originalExternalTransactionId: result[0] as String?,
      externalTransactionToken: result[1]! as String,
      products:
          (result[2] as List<Object?>?)!.cast<PlatformUserChoiceProduct>(),
    );
  }
}

/// Pigeon version of UserChoiseDetails.Product.
class PlatformUserChoiceProduct {
  PlatformUserChoiceProduct({
    required this.id,
    this.offerToken,
    required this.type,
  });

  String id;

  String? offerToken;

  PlatformProductType type;

  Object encode() {
    return <Object?>[
      id,
      offerToken,
      type,
    ];
  }

  static PlatformUserChoiceProduct decode(Object result) {
    result as List<Object?>;
    return PlatformUserChoiceProduct(
      id: result[0]! as String,
      offerToken: result[1] as String?,
      type: result[2]! as PlatformProductType,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is PlatformProductType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is PlatformBillingChoiceMode) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else if (value is PlatformPurchaseState) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    } else if (value is PlatformRecurrenceMode) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    } else if (value is PlatformQueryProduct) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PlatformAccountIdentifiers) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is PlatformBillingResult) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PlatformOneTimePurchaseOfferDetails) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is PlatformProductDetails) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is PlatformProductDetailsResponse) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value
        is PlatformAlternativeBillingOnlyReportingDetailsResponse) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is PlatformBillingConfigResponse) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is PlatformBillingFlowParams) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is PlatformPricingPhase) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is PlatformPurchase) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is PlatformPurchaseHistoryRecord) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is PlatformPurchaseHistoryResponse) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is PlatformPurchasesResponse) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is PlatformSubscriptionOfferDetails) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is PlatformUserChoiceDetails) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is PlatformUserChoiceProduct) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlatformProductType.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlatformBillingChoiceMode.values[value];
      case 131:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlatformPurchaseState.values[value];
      case 132:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlatformRecurrenceMode.values[value];
      case 133:
        return PlatformQueryProduct.decode(readValue(buffer)!);
      case 134:
        return PlatformAccountIdentifiers.decode(readValue(buffer)!);
      case 135:
        return PlatformBillingResult.decode(readValue(buffer)!);
      case 136:
        return PlatformOneTimePurchaseOfferDetails.decode(readValue(buffer)!);
      case 137:
        return PlatformProductDetails.decode(readValue(buffer)!);
      case 138:
        return PlatformProductDetailsResponse.decode(readValue(buffer)!);
      case 139:
        return PlatformAlternativeBillingOnlyReportingDetailsResponse.decode(
            readValue(buffer)!);
      case 140:
        return PlatformBillingConfigResponse.decode(readValue(buffer)!);
      case 141:
        return PlatformBillingFlowParams.decode(readValue(buffer)!);
      case 142:
        return PlatformPricingPhase.decode(readValue(buffer)!);
      case 143:
        return PlatformPurchase.decode(readValue(buffer)!);
      case 144:
        return PlatformPurchaseHistoryRecord.decode(readValue(buffer)!);
      case 145:
        return PlatformPurchaseHistoryResponse.decode(readValue(buffer)!);
      case 146:
        return PlatformPurchasesResponse.decode(readValue(buffer)!);
      case 147:
        return PlatformSubscriptionOfferDetails.decode(readValue(buffer)!);
      case 148:
        return PlatformUserChoiceDetails.decode(readValue(buffer)!);
      case 149:
        return PlatformUserChoiceProduct.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class InAppPurchaseApi {
  /// Constructor for [InAppPurchaseApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  InAppPurchaseApi(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  /// Wraps BillingClient#isReady.
  Future<bool> isReady() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.isReady$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Wraps BillingClient#startConnection(BillingClientStateListener).
  Future<PlatformBillingResult> startConnection(
      int callbackHandle, PlatformBillingChoiceMode billingMode) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.startConnection$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[callbackHandle, billingMode]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformBillingResult?)!;
    }
  }

  /// Wraps BillingClient#endConnection(BillingClientStateListener).
  Future<void> endConnection() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.endConnection$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Wraps BillingClient#getBillingConfigAsync(GetBillingConfigParams, BillingConfigResponseListener).
  Future<PlatformBillingConfigResponse> getBillingConfigAsync() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.getBillingConfigAsync$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformBillingConfigResponse?)!;
    }
  }

  /// Wraps BillingClient#launchBillingFlow(Activity, BillingFlowParams).
  Future<PlatformBillingResult> launchBillingFlow(
      PlatformBillingFlowParams params) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.launchBillingFlow$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[params]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformBillingResult?)!;
    }
  }

  /// Wraps BillingClient#acknowledgePurchase(AcknowledgePurchaseParams, AcknowledgePurchaseResponseListener).
  Future<PlatformBillingResult> acknowledgePurchase(
      String purchaseToken) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.acknowledgePurchase$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[purchaseToken]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformBillingResult?)!;
    }
  }

  /// Wraps BillingClient#consumeAsync(ConsumeParams, ConsumeResponseListener).
  Future<PlatformBillingResult> consumeAsync(String purchaseToken) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.consumeAsync$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[purchaseToken]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformBillingResult?)!;
    }
  }

  /// Wraps BillingClient#queryPurchasesAsync(QueryPurchaseParams, PurchaseResponseListener).
  Future<PlatformPurchasesResponse> queryPurchasesAsync(
      PlatformProductType productType) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.queryPurchasesAsync$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[productType]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformPurchasesResponse?)!;
    }
  }

  /// Wraps BillingClient#queryPurchaseHistoryAsync(QueryPurchaseHistoryParams, PurchaseHistoryResponseListener).
  Future<PlatformPurchaseHistoryResponse> queryPurchaseHistoryAsync(
      PlatformProductType productType) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.queryPurchaseHistoryAsync$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[productType]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformPurchaseHistoryResponse?)!;
    }
  }

  /// Wraps BillingClient#queryProductDetailsAsync(QueryProductDetailsParams, ProductDetailsResponseListener).
  Future<PlatformProductDetailsResponse> queryProductDetailsAsync(
      List<PlatformQueryProduct> products) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.queryProductDetailsAsync$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[products]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformProductDetailsResponse?)!;
    }
  }

  /// Wraps BillingClient#isFeatureSupported(String).
  Future<bool> isFeatureSupported(String feature) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.isFeatureSupported$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[feature]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Wraps BillingClient#isAlternativeBillingOnlyAvailableAsync().
  Future<PlatformBillingResult> isAlternativeBillingOnlyAvailableAsync() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.isAlternativeBillingOnlyAvailableAsync$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformBillingResult?)!;
    }
  }

  /// Wraps BillingClient#showAlternativeBillingOnlyInformationDialog().
  Future<PlatformBillingResult>
      showAlternativeBillingOnlyInformationDialog() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.showAlternativeBillingOnlyInformationDialog$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as PlatformBillingResult?)!;
    }
  }

  /// Wraps BillingClient#createAlternativeBillingOnlyReportingDetailsAsync(AlternativeBillingOnlyReportingDetailsListener).
  Future<PlatformAlternativeBillingOnlyReportingDetailsResponse>
      createAlternativeBillingOnlyReportingDetailsAsync() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseApi.createAlternativeBillingOnlyReportingDetailsAsync$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0]
          as PlatformAlternativeBillingOnlyReportingDetailsResponse?)!;
    }
  }
}

abstract class InAppPurchaseCallbackApi {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  /// Called for BillingClientStateListener#onBillingServiceDisconnected().
  void onBillingServiceDisconnected(int callbackHandle);

  /// Called for PurchasesUpdatedListener#onPurchasesUpdated(BillingResult, List<Purchase>).
  void onPurchasesUpdated(PlatformPurchasesResponse update);

  /// Called for UserChoiceBillingListener#userSelectedAlternativeBilling(UserChoiceDetails).
  void userSelectedalternativeBilling(PlatformUserChoiceDetails details);

  static void setUp(
    InAppPurchaseCallbackApi? api, {
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    messageChannelSuffix =
        messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.onBillingServiceDisconnected$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.onBillingServiceDisconnected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_callbackHandle = (args[0] as int?);
          assert(arg_callbackHandle != null,
              'Argument for dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.onBillingServiceDisconnected was null, expected non-null int.');
          try {
            api.onBillingServiceDisconnected(arg_callbackHandle!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.onPurchasesUpdated$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.onPurchasesUpdated was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlatformPurchasesResponse? arg_update =
              (args[0] as PlatformPurchasesResponse?);
          assert(arg_update != null,
              'Argument for dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.onPurchasesUpdated was null, expected non-null PlatformPurchasesResponse.');
          try {
            api.onPurchasesUpdated(arg_update!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<
          Object?> pigeonVar_channel = BasicMessageChannel<
              Object?>(
          'dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.userSelectedalternativeBilling$messageChannelSuffix',
          pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.userSelectedalternativeBilling was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PlatformUserChoiceDetails? arg_details =
              (args[0] as PlatformUserChoiceDetails?);
          assert(arg_details != null,
              'Argument for dev.flutter.pigeon.in_app_purchase_android.InAppPurchaseCallbackApi.userSelectedalternativeBilling was null, expected non-null PlatformUserChoiceDetails.');
          try {
            api.userSelectedalternativeBilling(arg_details!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          } catch (e) {
            return wrapResponse(
                error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
