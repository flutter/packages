// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import <Foundation/Foundation.h>

@protocol FlutterBinaryMessenger;
@protocol FlutterMessageCodec;
@class FlutterError;
@class FlutterStandardTypedData;

NS_ASSUME_NONNULL_BEGIN

@class FVPPlatformVideoViewCreationParams;
@class FVPCreationOptions;
@class FVPTexturePlayerIds;
@class FVPAudioTrackMessage;
@class FVPAssetAudioTrackData;
@class FVPMediaSelectionAudioTrackData;
@class FVPNativeAudioTrackData;

/// Information passed to the platform view creation.
@interface FVPPlatformVideoViewCreationParams : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSInteger )playerId;
@property(nonatomic, assign) NSInteger  playerId;
@end

@interface FVPCreationOptions : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithUri:(NSString *)uri
    httpHeaders:(NSDictionary<NSString *, NSString *> *)httpHeaders;
@property(nonatomic, copy) NSString * uri;
@property(nonatomic, copy) NSDictionary<NSString *, NSString *> * httpHeaders;
@end

@interface FVPTexturePlayerIds : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithPlayerId:(NSInteger )playerId
    textureId:(NSInteger )textureId;
@property(nonatomic, assign) NSInteger  playerId;
@property(nonatomic, assign) NSInteger  textureId;
@end

/// Represents an audio track in a video.
@interface FVPAudioTrackMessage : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithId:(NSString *)id
    label:(NSString *)label
    language:(NSString *)language
    isSelected:(BOOL )isSelected
    bitrate:(nullable NSNumber *)bitrate
    sampleRate:(nullable NSNumber *)sampleRate
    channelCount:(nullable NSNumber *)channelCount
    codec:(nullable NSString *)codec;
@property(nonatomic, copy) NSString * id;
@property(nonatomic, copy) NSString * label;
@property(nonatomic, copy) NSString * language;
@property(nonatomic, assign) BOOL  isSelected;
@property(nonatomic, strong, nullable) NSNumber * bitrate;
@property(nonatomic, strong, nullable) NSNumber * sampleRate;
@property(nonatomic, strong, nullable) NSNumber * channelCount;
@property(nonatomic, copy, nullable) NSString * codec;
@end

/// Raw audio track data from AVAssetTrack (for regular assets).
@interface FVPAssetAudioTrackData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithTrackId:(NSInteger )trackId
    label:(nullable NSString *)label
    language:(nullable NSString *)language
    isSelected:(BOOL )isSelected
    bitrate:(nullable NSNumber *)bitrate
    sampleRate:(nullable NSNumber *)sampleRate
    channelCount:(nullable NSNumber *)channelCount
    codec:(nullable NSString *)codec;
@property(nonatomic, assign) NSInteger  trackId;
@property(nonatomic, copy, nullable) NSString * label;
@property(nonatomic, copy, nullable) NSString * language;
@property(nonatomic, assign) BOOL  isSelected;
@property(nonatomic, strong, nullable) NSNumber * bitrate;
@property(nonatomic, strong, nullable) NSNumber * sampleRate;
@property(nonatomic, strong, nullable) NSNumber * channelCount;
@property(nonatomic, copy, nullable) NSString * codec;
@end

/// Raw audio track data from AVMediaSelectionOption (for HLS streams).
@interface FVPMediaSelectionAudioTrackData : NSObject
/// `init` unavailable to enforce nonnull fields, see the `make` class method.
- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)makeWithIndex:(NSInteger )index
    displayName:(nullable NSString *)displayName
    languageCode:(nullable NSString *)languageCode
    isSelected:(BOOL )isSelected
    commonMetadataTitle:(nullable NSString *)commonMetadataTitle;
@property(nonatomic, assign) NSInteger  index;
@property(nonatomic, copy, nullable) NSString * displayName;
@property(nonatomic, copy, nullable) NSString * languageCode;
@property(nonatomic, assign) BOOL  isSelected;
@property(nonatomic, copy, nullable) NSString * commonMetadataTitle;
@end

/// Container for raw audio track data from native platforms.
@interface FVPNativeAudioTrackData : NSObject
+ (instancetype)makeWithAssetTracks:(nullable NSArray<FVPAssetAudioTrackData *> *)assetTracks
    mediaSelectionTracks:(nullable NSArray<FVPMediaSelectionAudioTrackData *> *)mediaSelectionTracks;
/// Asset-based tracks (for regular video files)
@property(nonatomic, copy, nullable) NSArray<FVPAssetAudioTrackData *> * assetTracks;
/// Media selection-based tracks (for HLS streams)
@property(nonatomic, copy, nullable) NSArray<FVPMediaSelectionAudioTrackData *> * mediaSelectionTracks;
@end

/// The codec used by all APIs.
NSObject<FlutterMessageCodec> *FVPGetMessagesCodec(void);

@protocol FVPAVFoundationVideoPlayerApi
- (void)initialize:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)createPlatformViewPlayerWithOptions:(FVPCreationOptions *)params error:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FVPTexturePlayerIds *)createTexturePlayerWithOptions:(FVPCreationOptions *)creationOptions error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setMixWithOthers:(BOOL)mixWithOthers error:(FlutterError *_Nullable *_Nonnull)error;
- (nullable NSString *)fileURLForAssetWithName:(NSString *)asset package:(nullable NSString *)package error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFVPAVFoundationVideoPlayerApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FVPAVFoundationVideoPlayerApi> *_Nullable api);

extern void SetUpFVPAVFoundationVideoPlayerApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FVPAVFoundationVideoPlayerApi> *_Nullable api, NSString *messageChannelSuffix);


@protocol FVPVideoPlayerInstanceApi
- (void)setLooping:(BOOL)looping error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setVolume:(double)volume error:(FlutterError *_Nullable *_Nonnull)error;
- (void)setPlaybackSpeed:(double)speed error:(FlutterError *_Nullable *_Nonnull)error;
- (void)playWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable NSNumber *)position:(FlutterError *_Nullable *_Nonnull)error;
- (void)seekTo:(NSInteger)position completion:(void (^)(FlutterError *_Nullable))completion;
- (void)pauseWithError:(FlutterError *_Nullable *_Nonnull)error;
- (void)disposeWithError:(FlutterError *_Nullable *_Nonnull)error;
/// @return `nil` only when `error != nil`.
- (nullable FVPNativeAudioTrackData *)getAudioTracks:(FlutterError *_Nullable *_Nonnull)error;
- (void)selectAudioTrack:(NSString *)trackId error:(FlutterError *_Nullable *_Nonnull)error;
@end

extern void SetUpFVPVideoPlayerInstanceApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FVPVideoPlayerInstanceApi> *_Nullable api);

extern void SetUpFVPVideoPlayerInstanceApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FVPVideoPlayerInstanceApi> *_Nullable api, NSString *messageChannelSuffix);

NS_ASSUME_NONNULL_END
