// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "./include/video_player_avfoundation/messages.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

/// Pigeon equivalent of VideoViewType.
@implementation FVPPlatformVideoViewTypeBox
- (instancetype)initWithValue:(FVPPlatformVideoViewType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface FVPPlatformVideoViewCreationParams ()
+ (FVPPlatformVideoViewCreationParams *)fromList:(NSArray<id> *)list;
+ (nullable FVPPlatformVideoViewCreationParams *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FVPCreationOptions ()
+ (FVPCreationOptions *)fromList:(NSArray<id> *)list;
+ (nullable FVPCreationOptions *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FVPAudioTrackMessage ()
+ (FVPAudioTrackMessage *)fromList:(NSArray<id> *)list;
+ (nullable FVPAudioTrackMessage *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FVPAssetAudioTrackData ()
+ (FVPAssetAudioTrackData *)fromList:(NSArray<id> *)list;
+ (nullable FVPAssetAudioTrackData *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FVPMediaSelectionAudioTrackData ()
+ (FVPMediaSelectionAudioTrackData *)fromList:(NSArray<id> *)list;
+ (nullable FVPMediaSelectionAudioTrackData *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@interface FVPNativeAudioTrackData ()
+ (FVPNativeAudioTrackData *)fromList:(NSArray<id> *)list;
+ (nullable FVPNativeAudioTrackData *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation FVPPlatformVideoViewCreationParams
+ (instancetype)makeWithPlayerId:(NSInteger )playerId {
  FVPPlatformVideoViewCreationParams* pigeonResult = [[FVPPlatformVideoViewCreationParams alloc] init];
  pigeonResult.playerId = playerId;
  return pigeonResult;
}
+ (FVPPlatformVideoViewCreationParams *)fromList:(NSArray<id> *)list {
  FVPPlatformVideoViewCreationParams *pigeonResult = [[FVPPlatformVideoViewCreationParams alloc] init];
  pigeonResult.playerId = [GetNullableObjectAtIndex(list, 0) integerValue];
  return pigeonResult;
}
+ (nullable FVPPlatformVideoViewCreationParams *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FVPPlatformVideoViewCreationParams fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.playerId),
  ];
}
@end

@implementation FVPCreationOptions
+ (instancetype)makeWithUri:(NSString *)uri
    httpHeaders:(NSDictionary<NSString *, NSString *> *)httpHeaders
    viewType:(FVPPlatformVideoViewType)viewType {
  FVPCreationOptions* pigeonResult = [[FVPCreationOptions alloc] init];
  pigeonResult.uri = uri;
  pigeonResult.httpHeaders = httpHeaders;
  pigeonResult.viewType = viewType;
  return pigeonResult;
}
+ (FVPCreationOptions *)fromList:(NSArray<id> *)list {
  FVPCreationOptions *pigeonResult = [[FVPCreationOptions alloc] init];
  pigeonResult.uri = GetNullableObjectAtIndex(list, 0);
  pigeonResult.httpHeaders = GetNullableObjectAtIndex(list, 1);
  FVPPlatformVideoViewTypeBox *boxedFVPPlatformVideoViewType = GetNullableObjectAtIndex(list, 2);
  pigeonResult.viewType = boxedFVPPlatformVideoViewType.value;
  return pigeonResult;
}
+ (nullable FVPCreationOptions *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FVPCreationOptions fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.uri ?: [NSNull null],
    self.httpHeaders ?: [NSNull null],
    [[FVPPlatformVideoViewTypeBox alloc] initWithValue:self.viewType],
  ];
}
@end

@implementation FVPAudioTrackMessage
+ (instancetype)makeWithId:(NSString *)id
    label:(NSString *)label
    language:(NSString *)language
    isSelected:(BOOL )isSelected
    bitrate:(nullable NSNumber *)bitrate
    sampleRate:(nullable NSNumber *)sampleRate
    channelCount:(nullable NSNumber *)channelCount
    codec:(nullable NSString *)codec {
  FVPAudioTrackMessage* pigeonResult = [[FVPAudioTrackMessage alloc] init];
  pigeonResult.id = id;
  pigeonResult.label = label;
  pigeonResult.language = language;
  pigeonResult.isSelected = isSelected;
  pigeonResult.bitrate = bitrate;
  pigeonResult.sampleRate = sampleRate;
  pigeonResult.channelCount = channelCount;
  pigeonResult.codec = codec;
  return pigeonResult;
}
+ (FVPAudioTrackMessage *)fromList:(NSArray<id> *)list {
  FVPAudioTrackMessage *pigeonResult = [[FVPAudioTrackMessage alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.label = GetNullableObjectAtIndex(list, 1);
  pigeonResult.language = GetNullableObjectAtIndex(list, 2);
  pigeonResult.isSelected = [GetNullableObjectAtIndex(list, 3) boolValue];
  pigeonResult.bitrate = GetNullableObjectAtIndex(list, 4);
  pigeonResult.sampleRate = GetNullableObjectAtIndex(list, 5);
  pigeonResult.channelCount = GetNullableObjectAtIndex(list, 6);
  pigeonResult.codec = GetNullableObjectAtIndex(list, 7);
  return pigeonResult;
}
+ (nullable FVPAudioTrackMessage *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FVPAudioTrackMessage fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.id ?: [NSNull null],
    self.label ?: [NSNull null],
    self.language ?: [NSNull null],
    @(self.isSelected),
    self.bitrate ?: [NSNull null],
    self.sampleRate ?: [NSNull null],
    self.channelCount ?: [NSNull null],
    self.codec ?: [NSNull null],
  ];
}
@end

@implementation FVPAssetAudioTrackData
+ (instancetype)makeWithTrackId:(NSInteger )trackId
    label:(nullable NSString *)label
    language:(nullable NSString *)language
    isSelected:(BOOL )isSelected
    bitrate:(nullable NSNumber *)bitrate
    sampleRate:(nullable NSNumber *)sampleRate
    channelCount:(nullable NSNumber *)channelCount
    codec:(nullable NSString *)codec {
  FVPAssetAudioTrackData* pigeonResult = [[FVPAssetAudioTrackData alloc] init];
  pigeonResult.trackId = trackId;
  pigeonResult.label = label;
  pigeonResult.language = language;
  pigeonResult.isSelected = isSelected;
  pigeonResult.bitrate = bitrate;
  pigeonResult.sampleRate = sampleRate;
  pigeonResult.channelCount = channelCount;
  pigeonResult.codec = codec;
  return pigeonResult;
}
+ (FVPAssetAudioTrackData *)fromList:(NSArray<id> *)list {
  FVPAssetAudioTrackData *pigeonResult = [[FVPAssetAudioTrackData alloc] init];
  pigeonResult.trackId = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.label = GetNullableObjectAtIndex(list, 1);
  pigeonResult.language = GetNullableObjectAtIndex(list, 2);
  pigeonResult.isSelected = [GetNullableObjectAtIndex(list, 3) boolValue];
  pigeonResult.bitrate = GetNullableObjectAtIndex(list, 4);
  pigeonResult.sampleRate = GetNullableObjectAtIndex(list, 5);
  pigeonResult.channelCount = GetNullableObjectAtIndex(list, 6);
  pigeonResult.codec = GetNullableObjectAtIndex(list, 7);
  return pigeonResult;
}
+ (nullable FVPAssetAudioTrackData *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FVPAssetAudioTrackData fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.trackId),
    self.label ?: [NSNull null],
    self.language ?: [NSNull null],
    @(self.isSelected),
    self.bitrate ?: [NSNull null],
    self.sampleRate ?: [NSNull null],
    self.channelCount ?: [NSNull null],
    self.codec ?: [NSNull null],
  ];
}
@end

@implementation FVPMediaSelectionAudioTrackData
+ (instancetype)makeWithIndex:(NSInteger )index
    displayName:(nullable NSString *)displayName
    languageCode:(nullable NSString *)languageCode
    isSelected:(BOOL )isSelected
    commonMetadataTitle:(nullable NSString *)commonMetadataTitle {
  FVPMediaSelectionAudioTrackData* pigeonResult = [[FVPMediaSelectionAudioTrackData alloc] init];
  pigeonResult.index = index;
  pigeonResult.displayName = displayName;
  pigeonResult.languageCode = languageCode;
  pigeonResult.isSelected = isSelected;
  pigeonResult.commonMetadataTitle = commonMetadataTitle;
  return pigeonResult;
}
+ (FVPMediaSelectionAudioTrackData *)fromList:(NSArray<id> *)list {
  FVPMediaSelectionAudioTrackData *pigeonResult = [[FVPMediaSelectionAudioTrackData alloc] init];
  pigeonResult.index = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.displayName = GetNullableObjectAtIndex(list, 1);
  pigeonResult.languageCode = GetNullableObjectAtIndex(list, 2);
  pigeonResult.isSelected = [GetNullableObjectAtIndex(list, 3) boolValue];
  pigeonResult.commonMetadataTitle = GetNullableObjectAtIndex(list, 4);
  return pigeonResult;
}
+ (nullable FVPMediaSelectionAudioTrackData *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FVPMediaSelectionAudioTrackData fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.index),
    self.displayName ?: [NSNull null],
    self.languageCode ?: [NSNull null],
    @(self.isSelected),
    self.commonMetadataTitle ?: [NSNull null],
  ];
}
@end

@implementation FVPNativeAudioTrackData
+ (instancetype)makeWithAssetTracks:(nullable NSArray<FVPAssetAudioTrackData *> *)assetTracks
    mediaSelectionTracks:(nullable NSArray<FVPMediaSelectionAudioTrackData *> *)mediaSelectionTracks {
  FVPNativeAudioTrackData* pigeonResult = [[FVPNativeAudioTrackData alloc] init];
  pigeonResult.assetTracks = assetTracks;
  pigeonResult.mediaSelectionTracks = mediaSelectionTracks;
  return pigeonResult;
}
+ (FVPNativeAudioTrackData *)fromList:(NSArray<id> *)list {
  FVPNativeAudioTrackData *pigeonResult = [[FVPNativeAudioTrackData alloc] init];
  pigeonResult.assetTracks = GetNullableObjectAtIndex(list, 0);
  pigeonResult.mediaSelectionTracks = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable FVPNativeAudioTrackData *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [FVPNativeAudioTrackData fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    self.assetTracks ?: [NSNull null],
    self.mediaSelectionTracks ?: [NSNull null],
  ];
}
@end

@interface FVPMessagesPigeonCodecReader : FlutterStandardReader
@end
@implementation FVPMessagesPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      return enumAsNumber == nil ? nil : [[FVPPlatformVideoViewTypeBox alloc] initWithValue:[enumAsNumber integerValue]];
    }
    case 130: 
      return [FVPPlatformVideoViewCreationParams fromList:[self readValue]];
    case 131: 
      return [FVPCreationOptions fromList:[self readValue]];
    case 132: 
      return [FVPAudioTrackMessage fromList:[self readValue]];
    case 133: 
      return [FVPAssetAudioTrackData fromList:[self readValue]];
    case 134: 
      return [FVPMediaSelectionAudioTrackData fromList:[self readValue]];
    case 135: 
      return [FVPNativeAudioTrackData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface FVPMessagesPigeonCodecWriter : FlutterStandardWriter
@end
@implementation FVPMessagesPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[FVPPlatformVideoViewTypeBox class]]) {
    FVPPlatformVideoViewTypeBox *box = (FVPPlatformVideoViewTypeBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[FVPPlatformVideoViewCreationParams class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FVPCreationOptions class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FVPAudioTrackMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FVPAssetAudioTrackData class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FVPMediaSelectionAudioTrackData class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[FVPNativeAudioTrackData class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface FVPMessagesPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FVPMessagesPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FVPMessagesPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FVPMessagesPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FVPGetMessagesCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FVPMessagesPigeonCodecReaderWriter *readerWriter = [[FVPMessagesPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpFVPAVFoundationVideoPlayerApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FVPAVFoundationVideoPlayerApi> *api) {
  SetUpFVPAVFoundationVideoPlayerApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFVPAVFoundationVideoPlayerApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FVPAVFoundationVideoPlayerApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.AVFoundationVideoPlayerApi.initialize", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initialize:)], @"FVPAVFoundationVideoPlayerApi api (%@) doesn't respond to @selector(initialize:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api initialize:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.AVFoundationVideoPlayerApi.create", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(createWithOptions:error:)], @"FVPAVFoundationVideoPlayerApi api (%@) doesn't respond to @selector(createWithOptions:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        FVPCreationOptions *arg_creationOptions = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api createWithOptions:arg_creationOptions error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.AVFoundationVideoPlayerApi.dispose", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disposePlayer:error:)], @"FVPAVFoundationVideoPlayerApi api (%@) doesn't respond to @selector(disposePlayer:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_playerId = [GetNullableObjectAtIndex(args, 0) integerValue];
        FlutterError *error;
        [api disposePlayer:arg_playerId error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.AVFoundationVideoPlayerApi.setMixWithOthers", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setMixWithOthers:error:)], @"FVPAVFoundationVideoPlayerApi api (%@) doesn't respond to @selector(setMixWithOthers:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_mixWithOthers = [GetNullableObjectAtIndex(args, 0) boolValue];
        FlutterError *error;
        [api setMixWithOthers:arg_mixWithOthers error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.AVFoundationVideoPlayerApi.getAssetUrl", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fileURLForAssetWithName:package:error:)], @"FVPAVFoundationVideoPlayerApi api (%@) doesn't respond to @selector(fileURLForAssetWithName:package:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_asset = GetNullableObjectAtIndex(args, 0);
        NSString *arg_package = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSString *output = [api fileURLForAssetWithName:arg_asset package:arg_package error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
void SetUpFVPVideoPlayerInstanceApi(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FVPVideoPlayerInstanceApi> *api) {
  SetUpFVPVideoPlayerInstanceApiWithSuffix(binaryMessenger, api, @"");
}

void SetUpFVPVideoPlayerInstanceApiWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FVPVideoPlayerInstanceApi> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.VideoPlayerInstanceApi.setLooping", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLooping:error:)], @"FVPVideoPlayerInstanceApi api (%@) doesn't respond to @selector(setLooping:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        BOOL arg_looping = [GetNullableObjectAtIndex(args, 0) boolValue];
        FlutterError *error;
        [api setLooping:arg_looping error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.VideoPlayerInstanceApi.setVolume", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVolume:error:)], @"FVPVideoPlayerInstanceApi api (%@) doesn't respond to @selector(setVolume:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_volume = [GetNullableObjectAtIndex(args, 0) doubleValue];
        FlutterError *error;
        [api setVolume:arg_volume error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.VideoPlayerInstanceApi.setPlaybackSpeed", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setPlaybackSpeed:error:)], @"FVPVideoPlayerInstanceApi api (%@) doesn't respond to @selector(setPlaybackSpeed:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        double arg_speed = [GetNullableObjectAtIndex(args, 0) doubleValue];
        FlutterError *error;
        [api setPlaybackSpeed:arg_speed error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.VideoPlayerInstanceApi.play", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(playWithError:)], @"FVPVideoPlayerInstanceApi api (%@) doesn't respond to @selector(playWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api playWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.VideoPlayerInstanceApi.getPosition", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(position:)], @"FVPVideoPlayerInstanceApi api (%@) doesn't respond to @selector(position:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api position:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.VideoPlayerInstanceApi.seekTo", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(seekTo:completion:)], @"FVPVideoPlayerInstanceApi api (%@) doesn't respond to @selector(seekTo:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSInteger arg_position = [GetNullableObjectAtIndex(args, 0) integerValue];
        [api seekTo:arg_position completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.VideoPlayerInstanceApi.pause", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseWithError:)], @"FVPVideoPlayerInstanceApi api (%@) doesn't respond to @selector(pauseWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api pauseWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.video_player_avfoundation.VideoPlayerInstanceApi.getAudioTracks", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:FVPGetMessagesCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getAudioTracks:)], @"FVPVideoPlayerInstanceApi api (%@) doesn't respond to @selector(getAudioTracks:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        FVPNativeAudioTrackData *output = [api getAudioTracks:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
