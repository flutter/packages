// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

/// Error class for passing custom error details to Dart side.
final class JniTestsError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "JniTestsError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
var instancesOfJniHostIntegrationCoreApi = [String: JniHostIntegrationCoreApiSetup?]()
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
@objc protocol JniHostIntegrationCoreApi {
  func noop()
  @objc func echoInt(anInt: Int64) -> NSNumber?
  func echoDouble(aDouble: Double) -> NSNumber?
  func echoBool(aBool: Bool) -> NSNumber?
  func echoString(aString: String) -> String?
}

/// Generated setup class from Pigeon to register implemented JniHostIntegrationCoreApi classes.
@objc class JniHostIntegrationCoreApiSetup: NSObject, JniHostIntegrationCoreApi {
  private var api: JniHostIntegrationCoreApi?
  override init() {}
  static func register(name: String, api: JniHostIntegrationCoreApi?) {
    let wrapper = JniHostIntegrationCoreApiSetup()
    wrapper.api = api
    instancesOfJniHostIntegrationCoreApi[name] = wrapper
  }
  @objc static func getInstance(name: String) -> JniHostIntegrationCoreApiSetup? {
    return instancesOfJniHostIntegrationCoreApi[name] ?? nil
  }
  func noop() {
    return api!.noop()
  }
  func echoInt(anInt: Int64) -> NSNumber? {
    return api!.echoInt(anInt: anInt)
  }
  func echoDouble(aDouble: Double) -> NSNumber? {
    return api!.echoDouble(aDouble: aDouble)
  }
  func echoBool(aBool: Bool) -> Bool? {
    return api!.echoBool(aBool: aBool)
  }
  func echoString(aString: String) -> String? {
    return api!.echoString(aString: aString)
  }
}
