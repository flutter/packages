// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

import androidx.annotation.Keep

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class NiTestsError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()

private fun deepEqualsNiTests(a: Any?, b: Any?): Boolean {
  if (a is ByteArray && b is ByteArray) {
    return a.contentEquals(b)
  }
  if (a is IntArray && b is IntArray) {
    return a.contentEquals(b)
  }
  if (a is LongArray && b is LongArray) {
    return a.contentEquals(b)
  }
  if (a is DoubleArray && b is DoubleArray) {
    return a.contentEquals(b)
  }
  if (a is Array<*> && b is Array<*>) {
    return a.size == b.size && a.indices.all { deepEqualsNiTests(a[it], b[it]) }
  }
  if (a is Map<*, *> && b is Map<*, *>) {
    return a.size == b.size &&
        a.keys.all { (b as Map<Any?, Any?>).containsKey(it) && deepEqualsNiTests(a[it], b[it]) }
  }
  return a == b
}

const val defaultInstanceName = "PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u"

enum class NIAnEnum(val raw: Int) {
  ONE(0),
  TWO(1),
  THREE(2),
  FORTY_TWO(3),
  FOUR_HUNDRED_TWENTY_TWO(4);

  companion object {
    fun ofRaw(raw: Int): NIAnEnum? {
      return entries.firstOrNull { it.raw == raw }
    }
  }
}

enum class NIAnotherEnum(val raw: Int) {
  JUST_IN_CASE(0);

  companion object {
    fun ofRaw(raw: Int): NIAnotherEnum? {
      return entries.firstOrNull { it.raw == raw }
    }
  }
}

/**
 * A class containing all supported types.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class NIAllTypes(
    val aBool: Boolean,
    val anInt: Long,
    val anInt64: Long,
    val aDouble: Double,
    val anEnum: NIAnEnum,
    val anotherEnum: NIAnotherEnum,
    val aString: String,
    val anObject: Any,
    val list: List<Any?>,
    val stringList: List<String>,
    val intList: List<Long>,
    val doubleList: List<Double>,
    val boolList: List<Boolean>,
    val map: Map<Any, Any?>,
    val stringMap: Map<String, String>
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NIAllTypes {
      val aBool = pigeonVar_list[0] as Boolean
      val anInt = pigeonVar_list[1] as Long
      val anInt64 = pigeonVar_list[2] as Long
      val aDouble = pigeonVar_list[3] as Double
      val anEnum = pigeonVar_list[4] as NIAnEnum
      val anotherEnum = pigeonVar_list[5] as NIAnotherEnum
      val aString = pigeonVar_list[6] as String
      val anObject = pigeonVar_list[7] as Any
      val list = pigeonVar_list[8] as List<Any?>
      val stringList = pigeonVar_list[9] as List<String>
      val intList = pigeonVar_list[10] as List<Long>
      val doubleList = pigeonVar_list[11] as List<Double>
      val boolList = pigeonVar_list[12] as List<Boolean>
      val map = pigeonVar_list[13] as Map<Any, Any?>
      val stringMap = pigeonVar_list[14] as Map<String, String>
      return NIAllTypes(
          aBool,
          anInt,
          anInt64,
          aDouble,
          anEnum,
          anotherEnum,
          aString,
          anObject,
          list,
          stringList,
          intList,
          doubleList,
          boolList,
          map,
          stringMap)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        aBool,
        anInt,
        anInt64,
        aDouble,
        anEnum,
        anotherEnum,
        aString,
        anObject,
        list,
        stringList,
        intList,
        doubleList,
        boolList,
        map,
        stringMap,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is NIAllTypes) {
      return false
    }
    if (this === other) {
      return true
    }
    return aBool == other.aBool &&
        anInt == other.anInt &&
        anInt64 == other.anInt64 &&
        aDouble == other.aDouble &&
        anEnum == other.anEnum &&
        anotherEnum == other.anotherEnum &&
        aString == other.aString &&
        anObject == other.anObject &&
        deepEqualsNiTests(list, other.list) &&
        deepEqualsNiTests(stringList, other.stringList) &&
        deepEqualsNiTests(intList, other.intList) &&
        deepEqualsNiTests(doubleList, other.doubleList) &&
        deepEqualsNiTests(boolList, other.boolList) &&
        deepEqualsNiTests(map, other.map) &&
        deepEqualsNiTests(stringMap, other.stringMap)
  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * A class containing all supported nullable types. The primary purpose for this class is to ensure
 * coverage of Swift structs with nullable items, as the primary [NIAllNullableTypes] class is being
 * used to test Swift classes.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class NIAllNullableTypesWithoutRecursion(
    val aNullableBool: Boolean? = null,
    val aNullableInt: Long? = null,
    val aNullableInt64: Long? = null,
    val aNullableDouble: Double? = null,
    val aNullableEnum: NIAnEnum? = null,
    val anotherNullableEnum: NIAnotherEnum? = null,
    val aNullableString: String? = null,
    val aNullableObject: Any? = null,
    val list: List<Any?>? = null,
    val map: Map<Any, Any?>? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NIAllNullableTypesWithoutRecursion {
      val aNullableBool = pigeonVar_list[0] as Boolean?
      val aNullableInt = pigeonVar_list[1] as Long?
      val aNullableInt64 = pigeonVar_list[2] as Long?
      val aNullableDouble = pigeonVar_list[3] as Double?
      val aNullableEnum = pigeonVar_list[4] as NIAnEnum?
      val anotherNullableEnum = pigeonVar_list[5] as NIAnotherEnum?
      val aNullableString = pigeonVar_list[6] as String?
      val aNullableObject = pigeonVar_list[7]
      val list = pigeonVar_list[8] as List<Any?>?
      val map = pigeonVar_list[9] as Map<Any, Any?>?
      return NIAllNullableTypesWithoutRecursion(
          aNullableBool,
          aNullableInt,
          aNullableInt64,
          aNullableDouble,
          aNullableEnum,
          anotherNullableEnum,
          aNullableString,
          aNullableObject,
          list,
          map)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        aNullableBool,
        aNullableInt,
        aNullableInt64,
        aNullableDouble,
        aNullableEnum,
        anotherNullableEnum,
        aNullableString,
        aNullableObject,
        list,
        map,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is NIAllNullableTypesWithoutRecursion) {
      return false
    }
    if (this === other) {
      return true
    }
    return aNullableBool == other.aNullableBool &&
        aNullableInt == other.aNullableInt &&
        aNullableInt64 == other.aNullableInt64 &&
        aNullableDouble == other.aNullableDouble &&
        aNullableEnum == other.aNullableEnum &&
        anotherNullableEnum == other.anotherNullableEnum &&
        aNullableString == other.aNullableString &&
        aNullableObject == other.aNullableObject &&
        deepEqualsNiTests(list, other.list) &&
        deepEqualsNiTests(map, other.map)
  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * A class for testing nested class handling.
 *
 * This is needed to test nested nullable and non-nullable classes, `NIAllNullableTypes` is
 * non-nullable here as it is easier to instantiate than `NIAllTypes` when testing doesn't require
 * both (ie. testing null classes).
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class NIAllClassesWrapper(
    val allNullableTypesWithoutRecursion: NIAllNullableTypesWithoutRecursion? = null,
    val allTypes: NIAllTypes? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NIAllClassesWrapper {
      val allNullableTypesWithoutRecursion =
          pigeonVar_list[0] as NIAllNullableTypesWithoutRecursion?
      val allTypes = pigeonVar_list[1] as NIAllTypes?
      return NIAllClassesWrapper(allNullableTypesWithoutRecursion, allTypes)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        allNullableTypesWithoutRecursion,
        allTypes,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is NIAllClassesWrapper) {
      return false
    }
    if (this === other) {
      return true
    }
    return allNullableTypesWithoutRecursion == other.allNullableTypesWithoutRecursion &&
        allTypes == other.allTypes
  }

  override fun hashCode(): Int = toList().hashCode()
}

val NIHostIntegrationCoreApiInstances: MutableMap<String, NIHostIntegrationCoreApiRegistrar> =
    mutableMapOf()

@Keep
abstract class NIHostIntegrationCoreApi {
  /** A no-op function taking no arguments and returning no value, to sanity test basic calling. */
  abstract fun noop()
  /** Returns the passed object, to test serialization and deserialization. */
  abstract fun echoAllTypes(everything: NIAllTypes): NIAllTypes
  /** Returns passed in int. */
  abstract fun echoInt(anInt: Long): Long
  /** Returns passed in double. */
  abstract fun echoDouble(aDouble: Double): Double
  /** Returns the passed in boolean. */
  abstract fun echoBool(aBool: Boolean): Boolean
  /** Returns the passed in string. */
  abstract fun echoString(aString: String): String
  /** Returns the passed in generic Object. */
  abstract fun echoObject(anObject: Any): Any
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoList(list: List<Any?>): List<Any?>
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoStringList(stringList: List<String?>): List<String?>
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoIntList(intList: List<Long?>): List<Long?>
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoDoubleList(doubleList: List<Double?>): List<Double?>
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoBoolList(boolList: List<Boolean?>): List<Boolean?>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoMap(map: Map<Any?, Any?>): Map<Any?, Any?>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoStringMap(stringMap: Map<String?, String?>): Map<String?, String?>
  /**
   * Returns the passed map, to test serialization and deserialization. Returns the passed class to
   * test nested class serialization and deserialization.
   */
  abstract fun echoClassWrapper(wrapper: NIAllClassesWrapper): NIAllClassesWrapper
  /** Returns the passed enum to test serialization and deserialization. */
  abstract fun echoEnum(anEnum: NIAnEnum): NIAnEnum
  /** Returns the passed enum to test serialization and deserialization. */
  abstract fun echoAnotherEnum(anotherEnum: NIAnotherEnum): NIAnotherEnum
  /**
   * Returns the passed object, to test serialization and deserialization. Returns the passed
   * object, to test serialization and deserialization.
   */
  abstract fun echoAllNullableTypesWithoutRecursion(
      everything: NIAllNullableTypesWithoutRecursion?
  ): NIAllNullableTypesWithoutRecursion?
  /**
   * Returns the inner `aString` value from the wrapped object, to test sending of nested objects.
   */
  abstract fun extractNestedNullableString(wrapper: NIAllClassesWrapper): String?
  /**
   * Returns the inner `aString` value from the wrapped object, to test sending of nested objects.
   */
  abstract fun createNestedNullableString(nullableString: String?): NIAllClassesWrapper
  /** Returns passed in arguments of multiple types. */
  abstract fun sendMultipleNullableTypesWithoutRecursion(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): NIAllNullableTypesWithoutRecursion
  /** Returns passed in int. */
  abstract fun echoNullableInt(aNullableInt: Long?): Long?
  /** Returns passed in double. */
  abstract fun echoNullableDouble(aNullableDouble: Double?): Double?
  /** Returns the passed in boolean. */
  abstract fun echoNullableBool(aNullableBool: Boolean?): Boolean?
  /** Returns the passed in string. */
  abstract fun echoNullableString(aNullableString: String?): String?
  /** Returns the passed in generic Object. */
  abstract fun echoNullableObject(aNullableObject: Any?): Any?
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoNullableList(aNullableList: List<Any?>?): List<Any?>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableMap(map: Map<Any?, Any?>?): Map<Any?, Any?>?

  abstract fun echoNullableEnum(anEnum: NIAnEnum?): NIAnEnum?

  abstract fun echoAnotherNullableEnum(anotherEnum: NIAnotherEnum?): NIAnotherEnum?
}

@Keep
class NIHostIntegrationCoreApiRegistrar : NIHostIntegrationCoreApi() {
  var api: NIHostIntegrationCoreApi? = null

  fun register(
      api: NIHostIntegrationCoreApi,
      name: String = defaultInstanceName
  ): NIHostIntegrationCoreApiRegistrar {
    this.api = api
    NIHostIntegrationCoreApiInstances[name] = this
    return this
  }

  @Keep
  fun getInstance(name: String): NIHostIntegrationCoreApiRegistrar? {
    return NIHostIntegrationCoreApiInstances[name]
  }
  /** A no-op function taking no arguments and returning no value, to sanity test basic calling. */
  override fun noop() {
    api?.let {
      try {
        return api!!.noop()
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed object, to test serialization and deserialization. */
  override fun echoAllTypes(everything: NIAllTypes): NIAllTypes {
    api?.let {
      try {
        return api!!.echoAllTypes(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in int. */
  override fun echoInt(anInt: Long): Long {
    api?.let {
      try {
        return api!!.echoInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in double. */
  override fun echoDouble(aDouble: Double): Double {
    api?.let {
      try {
        return api!!.echoDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in boolean. */
  override fun echoBool(aBool: Boolean): Boolean {
    api?.let {
      try {
        return api!!.echoBool(aBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in string. */
  override fun echoString(aString: String): String {
    api?.let {
      try {
        return api!!.echoString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in generic Object. */
  override fun echoObject(anObject: Any): Any {
    api?.let {
      try {
        return api!!.echoObject(anObject)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoList(list: List<Any?>): List<Any?> {
    api?.let {
      try {
        return api!!.echoList(list)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoStringList(stringList: List<String?>): List<String?> {
    api?.let {
      try {
        return api!!.echoStringList(stringList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoIntList(intList: List<Long?>): List<Long?> {
    api?.let {
      try {
        return api!!.echoIntList(intList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoDoubleList(doubleList: List<Double?>): List<Double?> {
    api?.let {
      try {
        return api!!.echoDoubleList(doubleList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoBoolList(boolList: List<Boolean?>): List<Boolean?> {
    api?.let {
      try {
        return api!!.echoBoolList(boolList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoMap(map: Map<Any?, Any?>): Map<Any?, Any?> {
    api?.let {
      try {
        return api!!.echoMap(map)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoStringMap(stringMap: Map<String?, String?>): Map<String?, String?> {
    api?.let {
      try {
        return api!!.echoStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /**
   * Returns the passed map, to test serialization and deserialization. Returns the passed class to
   * test nested class serialization and deserialization.
   */
  override fun echoClassWrapper(wrapper: NIAllClassesWrapper): NIAllClassesWrapper {
    api?.let {
      try {
        return api!!.echoClassWrapper(wrapper)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed enum to test serialization and deserialization. */
  override fun echoEnum(anEnum: NIAnEnum): NIAnEnum {
    api?.let {
      try {
        return api!!.echoEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed enum to test serialization and deserialization. */
  override fun echoAnotherEnum(anotherEnum: NIAnotherEnum): NIAnotherEnum {
    api?.let {
      try {
        return api!!.echoAnotherEnum(anotherEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /**
   * Returns the passed object, to test serialization and deserialization. Returns the passed
   * object, to test serialization and deserialization.
   */
  override fun echoAllNullableTypesWithoutRecursion(
      everything: NIAllNullableTypesWithoutRecursion?
  ): NIAllNullableTypesWithoutRecursion? {
    api?.let {
      try {
        return api!!.echoAllNullableTypesWithoutRecursion(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /**
   * Returns the inner `aString` value from the wrapped object, to test sending of nested objects.
   */
  override fun extractNestedNullableString(wrapper: NIAllClassesWrapper): String? {
    api?.let {
      try {
        return api!!.extractNestedNullableString(wrapper)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /**
   * Returns the inner `aString` value from the wrapped object, to test sending of nested objects.
   */
  override fun createNestedNullableString(nullableString: String?): NIAllClassesWrapper {
    api?.let {
      try {
        return api!!.createNestedNullableString(nullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in arguments of multiple types. */
  override fun sendMultipleNullableTypesWithoutRecursion(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): NIAllNullableTypesWithoutRecursion {
    api?.let {
      try {
        return api!!.sendMultipleNullableTypesWithoutRecursion(
            aNullableBool, aNullableInt, aNullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in int. */
  override fun echoNullableInt(aNullableInt: Long?): Long? {
    api?.let {
      try {
        return api!!.echoNullableInt(aNullableInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in double. */
  override fun echoNullableDouble(aNullableDouble: Double?): Double? {
    api?.let {
      try {
        return api!!.echoNullableDouble(aNullableDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in boolean. */
  override fun echoNullableBool(aNullableBool: Boolean?): Boolean? {
    api?.let {
      try {
        return api!!.echoNullableBool(aNullableBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in string. */
  override fun echoNullableString(aNullableString: String?): String? {
    api?.let {
      try {
        return api!!.echoNullableString(aNullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in generic Object. */
  override fun echoNullableObject(aNullableObject: Any?): Any? {
    api?.let {
      try {
        return api!!.echoNullableObject(aNullableObject)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoNullableList(aNullableList: List<Any?>?): List<Any?>? {
    api?.let {
      try {
        return api!!.echoNullableList(aNullableList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableMap(map: Map<Any?, Any?>?): Map<Any?, Any?>? {
    api?.let {
      try {
        return api!!.echoNullableMap(map)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }

  override fun echoNullableEnum(anEnum: NIAnEnum?): NIAnEnum? {
    api?.let {
      try {
        return api!!.echoNullableEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }

  override fun echoAnotherNullableEnum(anotherEnum: NIAnotherEnum?): NIAnotherEnum? {
    api?.let {
      try {
        return api!!.echoAnotherNullableEnum(anotherEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
}
