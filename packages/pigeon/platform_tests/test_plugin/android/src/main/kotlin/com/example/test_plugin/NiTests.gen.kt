// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

import androidx.annotation.Keep

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class NiTestsError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()

private fun deepEqualsNiTests(a: Any?, b: Any?): Boolean {
  if (a is ByteArray && b is ByteArray) {
    return a.contentEquals(b)
  }
  if (a is IntArray && b is IntArray) {
    return a.contentEquals(b)
  }
  if (a is LongArray && b is LongArray) {
    return a.contentEquals(b)
  }
  if (a is DoubleArray && b is DoubleArray) {
    return a.contentEquals(b)
  }
  if (a is Array<*> && b is Array<*>) {
    return a.size == b.size && a.indices.all { deepEqualsNiTests(a[it], b[it]) }
  }
  if (a is Map<*, *> && b is Map<*, *>) {
    return a.size == b.size &&
        a.keys.all { (b as Map<Any?, Any?>).containsKey(it) && deepEqualsNiTests(a[it], b[it]) }
  }
  return a == b
}

const val defaultInstanceName = "PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u"

enum class NIAnEnum(val raw: Int) {
  ONE(0),
  TWO(1),
  THREE(2),
  FORTY_TWO(3),
  FOUR_HUNDRED_TWENTY_TWO(4);

  companion object {
    fun ofRaw(raw: Int): NIAnEnum? {
      return entries.firstOrNull { it.raw == raw }
    }
  }
}

/**
 * A class containing all supported types.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class NIAllTypes(
    val aBool: Boolean,
    val anInt: Long,
    val anInt64: Long,
    val aDouble: Double,
    val anEnum: NIAnEnum,
    val aString: String,
    val list: List<Any?>,
    val map: Map<Any, Any?>
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NIAllTypes {
      val aBool = pigeonVar_list[0] as Boolean
      val anInt = pigeonVar_list[1] as Long
      val anInt64 = pigeonVar_list[2] as Long
      val aDouble = pigeonVar_list[3] as Double
      val anEnum = pigeonVar_list[4] as NIAnEnum
      val aString = pigeonVar_list[5] as String
      val list = pigeonVar_list[6] as List<Any?>
      val map = pigeonVar_list[7] as Map<Any, Any?>
      return NIAllTypes(aBool, anInt, anInt64, aDouble, anEnum, aString, list, map)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        aBool,
        anInt,
        anInt64,
        aDouble,
        anEnum,
        aString,
        list,
        map,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is NIAllTypes) {
      return false
    }
    if (this === other) {
      return true
    }
    return aBool == other.aBool &&
        anInt == other.anInt &&
        anInt64 == other.anInt64 &&
        aDouble == other.aDouble &&
        anEnum == other.anEnum &&
        aString == other.aString &&
        deepEqualsNiTests(list, other.list) &&
        deepEqualsNiTests(map, other.map)
  }

  override fun hashCode(): Int = toList().hashCode()
}

val NIHostIntegrationCoreApiInstances: MutableMap<String, NIHostIntegrationCoreApiRegistrar> =
    mutableMapOf()

@Keep
abstract class NIHostIntegrationCoreApi {
  /** A no-op function taking no arguments and returning no value, to sanity test basic calling. */
  abstract fun noop()
  /** Returns the passed object, to test serialization and deserialization. */
  abstract fun echoAllTypes(everything: NIAllTypes): NIAllTypes
  /** Returns passed in int. */
  abstract fun echoInt(anInt: Long): Long
  /** Returns passed in double. */
  abstract fun echoDouble(aDouble: Double): Double
  /** Returns the passed in boolean. */
  abstract fun echoBool(aBool: Boolean): Boolean
  /** Returns the passed in string. */
  abstract fun echoString(aString: String): String
  /** Returns the passed in generic Object. */
  abstract fun echoObject(anObject: Any): Any
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoList(list: List<Any?>): List<Any?>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoMap(map: Map<Any?, Any?>): Map<Any?, Any?>
  /** Returns the passed enum to test serialization and deserialization. */
  abstract fun echoEnum(anEnum: NIAnEnum): NIAnEnum
}

@Keep
class NIHostIntegrationCoreApiRegistrar : NIHostIntegrationCoreApi() {
  var api: NIHostIntegrationCoreApi? = null

  fun register(
      api: NIHostIntegrationCoreApi,
      name: String = defaultInstanceName
  ): NIHostIntegrationCoreApiRegistrar {
    this.api = api
    NIHostIntegrationCoreApiInstances[name] = this
    return this
  }

  @Keep
  fun getInstance(name: String): NIHostIntegrationCoreApiRegistrar? {
    return NIHostIntegrationCoreApiInstances[name]
  }
  /** A no-op function taking no arguments and returning no value, to sanity test basic calling. */
  override fun noop() {
    api?.let {
      try {
        return api!!.noop()
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed object, to test serialization and deserialization. */
  override fun echoAllTypes(everything: NIAllTypes): NIAllTypes {
    api?.let {
      try {
        return api!!.echoAllTypes(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in int. */
  override fun echoInt(anInt: Long): Long {
    api?.let {
      try {
        return api!!.echoInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in double. */
  override fun echoDouble(aDouble: Double): Double {
    api?.let {
      try {
        return api!!.echoDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in boolean. */
  override fun echoBool(aBool: Boolean): Boolean {
    api?.let {
      try {
        return api!!.echoBool(aBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in string. */
  override fun echoString(aString: String): String {
    api?.let {
      try {
        return api!!.echoString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in generic Object. */
  override fun echoObject(anObject: Any): Any {
    api?.let {
      try {
        return api!!.echoObject(anObject)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoList(list: List<Any?>): List<Any?> {
    api?.let {
      try {
        return api!!.echoList(list)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoMap(map: Map<Any?, Any?>): Map<Any?, Any?> {
    api?.let {
      try {
        return api!!.echoMap(map)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed enum to test serialization and deserialization. */
  override fun echoEnum(anEnum: NIAnEnum): NIAnEnum {
    api?.let {
      try {
        return api!!.echoEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("NIHostIntegrationCoreApi has not been set")
  }
}
