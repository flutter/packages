// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

import androidx.annotation.Keep

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class JniTestsError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()

const val defaultInstanceName = "PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u"

enum class JniAnEnum(val raw: Int) {
  ONE(0),
  TWO(1),
  THREE(2),
  FORTY_TWO(3),
  FOUR_HUNDRED_TWENTY_TWO(4);

  companion object {
    fun ofRaw(raw: Int): JniAnEnum? {
      return entries.firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class BasicClass(
    val aBool: Boolean,
    val anInt: Long,
    val anInt64: Long,
    val aDouble: Double,
    val anEnum: JniAnEnum,
    val aString: String
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): BasicClass {
      val aBool = pigeonVar_list[0] as Boolean
      val anInt = pigeonVar_list[1] as Long
      val anInt64 = pigeonVar_list[2] as Long
      val aDouble = pigeonVar_list[3] as Double
      val anEnum = pigeonVar_list[4] as JniAnEnum
      val aString = pigeonVar_list[5] as String
      return BasicClass(aBool, anInt, anInt64, aDouble, anEnum, aString)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        aBool,
        anInt,
        anInt64,
        aDouble,
        anEnum,
        aString,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is BasicClass) {
      return false
    }
    if (this === other) {
      return true
    }
    return aBool == other.aBool &&
        anInt == other.anInt &&
        anInt64 == other.anInt64 &&
        aDouble == other.aDouble &&
        anEnum == other.anEnum &&
        aString == other.aString
  }

  override fun hashCode(): Int = toList().hashCode()
}

val JniHostIntegrationCoreApiInstances: MutableMap<String, JniHostIntegrationCoreApiRegistrar> =
    mutableMapOf()

@Keep
abstract class JniHostIntegrationCoreApi {
  abstract fun noop()

  abstract fun echoInt(anInt: Long): Long

  abstract fun echoDouble(aDouble: Double): Double

  abstract fun echoBool(aBool: Boolean): Boolean

  abstract fun echoString(aString: String): String

  abstract fun echoBasicClass(aBasicClass: BasicClass): BasicClass

  abstract fun echoEnum(anEnum: JniAnEnum): JniAnEnum

  abstract fun echoObject(anObject: Any): Any
}

@Keep
class JniHostIntegrationCoreApiRegistrar : JniHostIntegrationCoreApi() {
  var api: JniHostIntegrationCoreApi? = null

  fun register(
      api: JniHostIntegrationCoreApi,
      name: String = defaultInstanceName
  ): JniHostIntegrationCoreApiRegistrar {
    this.api = api
    JniHostIntegrationCoreApiInstances[name] = this
    return this
  }

  @Keep
  fun getInstance(name: String): JniHostIntegrationCoreApiRegistrar? {
    return JniHostIntegrationCoreApiInstances[name]
  }

  override fun noop() {
    api?.let {
      try {
        return api!!.noop()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoInt(anInt: Long): Long {
    api?.let {
      try {
        return api!!.echoInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoDouble(aDouble: Double): Double {
    api?.let {
      try {
        return api!!.echoDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoBool(aBool: Boolean): Boolean {
    api?.let {
      try {
        return api!!.echoBool(aBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoString(aString: String): String {
    api?.let {
      try {
        return api!!.echoString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoBasicClass(aBasicClass: BasicClass): BasicClass {
    api?.let {
      try {
        return api!!.echoBasicClass(aBasicClass)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoEnum(anEnum: JniAnEnum): JniAnEnum {
    api?.let {
      try {
        return api!!.echoEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoObject(anObject: Any): Any {
    api?.let {
      try {
        return api!!.echoObject(anObject)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
}
