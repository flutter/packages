// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

import androidx.annotation.Keep

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class JniTestsError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()

const val defaultInstanceName = "PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u"
val JniHostIntegrationCoreApiInstances: MutableMap<String, JniHostIntegrationCoreApiRegistrar> =
    mutableMapOf()

@Keep
abstract class JniHostIntegrationCoreApi {
  abstract fun noop()

  abstract fun echoInt(anInt: Long): Long

  abstract fun echoDouble(aDouble: Double): Double

  abstract fun echoBool(aBool: Boolean): Boolean

  abstract fun echoString(aString: String): String
}

@Keep
class JniHostIntegrationCoreApiRegistrar : JniHostIntegrationCoreApi() {
  var api: JniHostIntegrationCoreApi? = null

  fun register(
      api: JniHostIntegrationCoreApi,
      name: String = defaultInstanceName
  ): JniHostIntegrationCoreApiRegistrar {
    this.api = api
    JniHostIntegrationCoreApiInstances[name] = this
    return this
  }

  @Keep
  fun getInstance(name: String): JniHostIntegrationCoreApiRegistrar? {
    return JniHostIntegrationCoreApiInstances[name]
  }

  override fun noop() {
    api?.let {
      try {
        return api!!.noop()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoInt(anInt: Long): Long {
    api?.let {
      try {
        return api!!.echoInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoDouble(aDouble: Double): Double {
    api?.let {
      try {
        return api!!.echoDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoBool(aBool: Boolean): Boolean {
    api?.let {
      try {
        return api!!.echoBool(aBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoString(aString: String): String {
    api?.let {
      try {
        return api!!.echoString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
}
