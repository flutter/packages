// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

import androidx.annotation.Keep
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun createConnectionError(channelName: String): JniTestsError {
  return JniTestsError(
      "channel-error", "Unable to establish connection on channel: '$channelName'.", "")
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 *
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class JniTestsError(
    val code: String,
    override val message: String? = null,
    val details: Any? = null
) : Throwable()

private fun deepEqualsJniTests(a: Any?, b: Any?): Boolean {
  if (a is ByteArray && b is ByteArray) {
    return a.contentEquals(b)
  }
  if (a is IntArray && b is IntArray) {
    return a.contentEquals(b)
  }
  if (a is LongArray && b is LongArray) {
    return a.contentEquals(b)
  }
  if (a is DoubleArray && b is DoubleArray) {
    return a.contentEquals(b)
  }
  if (a is Array<*> && b is Array<*>) {
    return a.size == b.size && a.indices.all { deepEqualsJniTests(a[it], b[it]) }
  }
  if (a is Map<*, *> && b is Map<*, *>) {
    return a.size == b.size &&
        a.keys.all { (b as Map<Any?, Any?>).containsKey(it) && deepEqualsJniTests(a[it], b[it]) }
  }
  return a == b
}

const val defaultInstanceName = "PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u"

enum class JniAnEnum(val raw: Int) {
  ONE(0),
  TWO(1),
  THREE(2),
  FORTY_TWO(3),
  FOUR_HUNDRED_TWENTY_TWO(4);

  companion object {
    fun ofRaw(raw: Int): JniAnEnum? {
      return entries.firstOrNull { it.raw == raw }
    }
  }
}

enum class JniAnotherEnum(val raw: Int) {
  JUST_IN_CASE(0);

  companion object {
    fun ofRaw(raw: Int): JniAnotherEnum? {
      return entries.firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class JniUnusedClass(val aField: Any? = null) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): JniUnusedClass {
      val aField = pigeonVar_list[0]
      return JniUnusedClass(aField)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        aField,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is JniUnusedClass) {
      return false
    }
    if (this === other) {
      return true
    }
    return aField == other.aField
  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * A class containing all supported types.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class JniAllTypes(
    val aBool: Boolean,
    val anInt: Long,
    val anInt64: Long,
    val aDouble: Double,
    val aByteArray: ByteArray,
    val a4ByteArray: IntArray,
    val a8ByteArray: LongArray,
    val aFloatArray: DoubleArray,
    val anEnum: JniAnEnum,
    val anotherEnum: JniAnotherEnum,
    val aString: String,
    val anObject: Any,
    val list: List<Any?>,
    val stringList: List<String>,
    val intList: List<Long>,
    val doubleList: List<Double>,
    val boolList: List<Boolean>,
    val enumList: List<JniAnEnum>,
    val objectList: List<Any>,
    val listList: List<List<Any?>>,
    val mapList: List<Map<Any?, Any?>>,
    val map: Map<Any, Any?>,
    val stringMap: Map<String, String>,
    val intMap: Map<Long, Long>,
    val enumMap: Map<JniAnEnum, JniAnEnum>,
    val objectMap: Map<Any, Any>,
    val listMap: Map<Long, List<Any?>>,
    val mapMap: Map<Long, Map<Any?, Any?>>
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): JniAllTypes {
      val aBool = pigeonVar_list[0] as Boolean
      val anInt = pigeonVar_list[1] as Long
      val anInt64 = pigeonVar_list[2] as Long
      val aDouble = pigeonVar_list[3] as Double
      val aByteArray = pigeonVar_list[4] as ByteArray
      val a4ByteArray = pigeonVar_list[5] as IntArray
      val a8ByteArray = pigeonVar_list[6] as LongArray
      val aFloatArray = pigeonVar_list[7] as DoubleArray
      val anEnum = pigeonVar_list[8] as JniAnEnum
      val anotherEnum = pigeonVar_list[9] as JniAnotherEnum
      val aString = pigeonVar_list[10] as String
      val anObject = pigeonVar_list[11] as Any
      val list = pigeonVar_list[12] as List<Any?>
      val stringList = pigeonVar_list[13] as List<String>
      val intList = pigeonVar_list[14] as List<Long>
      val doubleList = pigeonVar_list[15] as List<Double>
      val boolList = pigeonVar_list[16] as List<Boolean>
      val enumList = pigeonVar_list[17] as List<JniAnEnum>
      val objectList = pigeonVar_list[18] as List<Any>
      val listList = pigeonVar_list[19] as List<List<Any?>>
      val mapList = pigeonVar_list[20] as List<Map<Any?, Any?>>
      val map = pigeonVar_list[21] as Map<Any, Any?>
      val stringMap = pigeonVar_list[22] as Map<String, String>
      val intMap = pigeonVar_list[23] as Map<Long, Long>
      val enumMap = pigeonVar_list[24] as Map<JniAnEnum, JniAnEnum>
      val objectMap = pigeonVar_list[25] as Map<Any, Any>
      val listMap = pigeonVar_list[26] as Map<Long, List<Any?>>
      val mapMap = pigeonVar_list[27] as Map<Long, Map<Any?, Any?>>
      return JniAllTypes(
          aBool,
          anInt,
          anInt64,
          aDouble,
          aByteArray,
          a4ByteArray,
          a8ByteArray,
          aFloatArray,
          anEnum,
          anotherEnum,
          aString,
          anObject,
          list,
          stringList,
          intList,
          doubleList,
          boolList,
          enumList,
          objectList,
          listList,
          mapList,
          map,
          stringMap,
          intMap,
          enumMap,
          objectMap,
          listMap,
          mapMap)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        aBool,
        anInt,
        anInt64,
        aDouble,
        aByteArray,
        a4ByteArray,
        a8ByteArray,
        aFloatArray,
        anEnum,
        anotherEnum,
        aString,
        anObject,
        list,
        stringList,
        intList,
        doubleList,
        boolList,
        enumList,
        objectList,
        listList,
        mapList,
        map,
        stringMap,
        intMap,
        enumMap,
        objectMap,
        listMap,
        mapMap,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is JniAllTypes) {
      return false
    }
    if (this === other) {
      return true
    }
    return aBool == other.aBool &&
        anInt == other.anInt &&
        anInt64 == other.anInt64 &&
        aDouble == other.aDouble &&
        deepEqualsJniTests(aByteArray, other.aByteArray) &&
        deepEqualsJniTests(a4ByteArray, other.a4ByteArray) &&
        deepEqualsJniTests(a8ByteArray, other.a8ByteArray) &&
        deepEqualsJniTests(aFloatArray, other.aFloatArray) &&
        anEnum == other.anEnum &&
        anotherEnum == other.anotherEnum &&
        aString == other.aString &&
        anObject == other.anObject &&
        deepEqualsJniTests(list, other.list) &&
        deepEqualsJniTests(stringList, other.stringList) &&
        deepEqualsJniTests(intList, other.intList) &&
        deepEqualsJniTests(doubleList, other.doubleList) &&
        deepEqualsJniTests(boolList, other.boolList) &&
        deepEqualsJniTests(enumList, other.enumList) &&
        deepEqualsJniTests(objectList, other.objectList) &&
        deepEqualsJniTests(listList, other.listList) &&
        deepEqualsJniTests(mapList, other.mapList) &&
        deepEqualsJniTests(map, other.map) &&
        deepEqualsJniTests(stringMap, other.stringMap) &&
        deepEqualsJniTests(intMap, other.intMap) &&
        deepEqualsJniTests(enumMap, other.enumMap) &&
        deepEqualsJniTests(objectMap, other.objectMap) &&
        deepEqualsJniTests(listMap, other.listMap) &&
        deepEqualsJniTests(mapMap, other.mapMap)
  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * A class containing all supported nullable types.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class JniAllNullableTypes(
    val aNullableBool: Boolean? = null,
    val aNullableInt: Long? = null,
    val aNullableInt64: Long? = null,
    val aNullableDouble: Double? = null,
    val aNullableByteArray: ByteArray? = null,
    val aNullable4ByteArray: IntArray? = null,
    val aNullable8ByteArray: LongArray? = null,
    val aNullableFloatArray: DoubleArray? = null,
    val aNullableEnum: JniAnEnum? = null,
    val anotherNullableEnum: JniAnotherEnum? = null,
    val aNullableString: String? = null,
    val aNullableObject: Any? = null,
    val allNullableTypes: JniAllNullableTypes? = null,
    val list: List<Any?>? = null,
    val stringList: List<String?>? = null,
    val intList: List<Long?>? = null,
    val doubleList: List<Double?>? = null,
    val boolList: List<Boolean?>? = null,
    val enumList: List<JniAnEnum?>? = null,
    val objectList: List<Any?>? = null,
    val listList: List<List<Any?>?>? = null,
    val mapList: List<Map<Any?, Any?>?>? = null,
    val recursiveClassList: List<JniAllNullableTypes?>? = null,
    val map: Map<Any, Any?>? = null,
    val stringMap: Map<String?, String?>? = null,
    val intMap: Map<Long?, Long?>? = null,
    val enumMap: Map<JniAnEnum?, JniAnEnum?>? = null,
    val objectMap: Map<Any?, Any?>? = null,
    val listMap: Map<Long?, List<Any?>?>? = null,
    val mapMap: Map<Long?, Map<Any?, Any?>?>? = null,
    val recursiveClassMap: Map<Long?, JniAllNullableTypes?>? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): JniAllNullableTypes {
      val aNullableBool = pigeonVar_list[0] as Boolean?
      val aNullableInt = pigeonVar_list[1] as Long?
      val aNullableInt64 = pigeonVar_list[2] as Long?
      val aNullableDouble = pigeonVar_list[3] as Double?
      val aNullableByteArray = pigeonVar_list[4] as ByteArray?
      val aNullable4ByteArray = pigeonVar_list[5] as IntArray?
      val aNullable8ByteArray = pigeonVar_list[6] as LongArray?
      val aNullableFloatArray = pigeonVar_list[7] as DoubleArray?
      val aNullableEnum = pigeonVar_list[8] as JniAnEnum?
      val anotherNullableEnum = pigeonVar_list[9] as JniAnotherEnum?
      val aNullableString = pigeonVar_list[10] as String?
      val aNullableObject = pigeonVar_list[11]
      val allNullableTypes = pigeonVar_list[12] as JniAllNullableTypes?
      val list = pigeonVar_list[13] as List<Any?>?
      val stringList = pigeonVar_list[14] as List<String?>?
      val intList = pigeonVar_list[15] as List<Long?>?
      val doubleList = pigeonVar_list[16] as List<Double?>?
      val boolList = pigeonVar_list[17] as List<Boolean?>?
      val enumList = pigeonVar_list[18] as List<JniAnEnum?>?
      val objectList = pigeonVar_list[19] as List<Any?>?
      val listList = pigeonVar_list[20] as List<List<Any?>?>?
      val mapList = pigeonVar_list[21] as List<Map<Any?, Any?>?>?
      val recursiveClassList = pigeonVar_list[22] as List<JniAllNullableTypes?>?
      val map = pigeonVar_list[23] as Map<Any, Any?>?
      val stringMap = pigeonVar_list[24] as Map<String?, String?>?
      val intMap = pigeonVar_list[25] as Map<Long?, Long?>?
      val enumMap = pigeonVar_list[26] as Map<JniAnEnum?, JniAnEnum?>?
      val objectMap = pigeonVar_list[27] as Map<Any?, Any?>?
      val listMap = pigeonVar_list[28] as Map<Long?, List<Any?>?>?
      val mapMap = pigeonVar_list[29] as Map<Long?, Map<Any?, Any?>?>?
      val recursiveClassMap = pigeonVar_list[30] as Map<Long?, JniAllNullableTypes?>?
      return JniAllNullableTypes(
          aNullableBool,
          aNullableInt,
          aNullableInt64,
          aNullableDouble,
          aNullableByteArray,
          aNullable4ByteArray,
          aNullable8ByteArray,
          aNullableFloatArray,
          aNullableEnum,
          anotherNullableEnum,
          aNullableString,
          aNullableObject,
          allNullableTypes,
          list,
          stringList,
          intList,
          doubleList,
          boolList,
          enumList,
          objectList,
          listList,
          mapList,
          recursiveClassList,
          map,
          stringMap,
          intMap,
          enumMap,
          objectMap,
          listMap,
          mapMap,
          recursiveClassMap)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        aNullableBool,
        aNullableInt,
        aNullableInt64,
        aNullableDouble,
        aNullableByteArray,
        aNullable4ByteArray,
        aNullable8ByteArray,
        aNullableFloatArray,
        aNullableEnum,
        anotherNullableEnum,
        aNullableString,
        aNullableObject,
        allNullableTypes,
        list,
        stringList,
        intList,
        doubleList,
        boolList,
        enumList,
        objectList,
        listList,
        mapList,
        recursiveClassList,
        map,
        stringMap,
        intMap,
        enumMap,
        objectMap,
        listMap,
        mapMap,
        recursiveClassMap,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is JniAllNullableTypes) {
      return false
    }
    if (this === other) {
      return true
    }
    return aNullableBool == other.aNullableBool &&
        aNullableInt == other.aNullableInt &&
        aNullableInt64 == other.aNullableInt64 &&
        aNullableDouble == other.aNullableDouble &&
        deepEqualsJniTests(aNullableByteArray, other.aNullableByteArray) &&
        deepEqualsJniTests(aNullable4ByteArray, other.aNullable4ByteArray) &&
        deepEqualsJniTests(aNullable8ByteArray, other.aNullable8ByteArray) &&
        deepEqualsJniTests(aNullableFloatArray, other.aNullableFloatArray) &&
        aNullableEnum == other.aNullableEnum &&
        anotherNullableEnum == other.anotherNullableEnum &&
        aNullableString == other.aNullableString &&
        aNullableObject == other.aNullableObject &&
        allNullableTypes == other.allNullableTypes &&
        deepEqualsJniTests(list, other.list) &&
        deepEqualsJniTests(stringList, other.stringList) &&
        deepEqualsJniTests(intList, other.intList) &&
        deepEqualsJniTests(doubleList, other.doubleList) &&
        deepEqualsJniTests(boolList, other.boolList) &&
        deepEqualsJniTests(enumList, other.enumList) &&
        deepEqualsJniTests(objectList, other.objectList) &&
        deepEqualsJniTests(listList, other.listList) &&
        deepEqualsJniTests(mapList, other.mapList) &&
        deepEqualsJniTests(recursiveClassList, other.recursiveClassList) &&
        deepEqualsJniTests(map, other.map) &&
        deepEqualsJniTests(stringMap, other.stringMap) &&
        deepEqualsJniTests(intMap, other.intMap) &&
        deepEqualsJniTests(enumMap, other.enumMap) &&
        deepEqualsJniTests(objectMap, other.objectMap) &&
        deepEqualsJniTests(listMap, other.listMap) &&
        deepEqualsJniTests(mapMap, other.mapMap) &&
        deepEqualsJniTests(recursiveClassMap, other.recursiveClassMap)
  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * The primary purpose for this class is to ensure coverage of Swift structs with nullable items, as
 * the primary [JniAllNullableTypes] class is being used to test Swift classes.
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class JniAllNullableTypesWithoutRecursion(
    val aNullableBool: Boolean? = null,
    val aNullableInt: Long? = null,
    val aNullableInt64: Long? = null,
    val aNullableDouble: Double? = null,
    val aNullableByteArray: ByteArray? = null,
    val aNullable4ByteArray: IntArray? = null,
    val aNullable8ByteArray: LongArray? = null,
    val aNullableFloatArray: DoubleArray? = null,
    val aNullableEnum: JniAnEnum? = null,
    val anotherNullableEnum: JniAnotherEnum? = null,
    val aNullableString: String? = null,
    val aNullableObject: Any? = null,
    val list: List<Any?>? = null,
    val stringList: List<String?>? = null,
    val intList: List<Long?>? = null,
    val doubleList: List<Double?>? = null,
    val boolList: List<Boolean?>? = null,
    val enumList: List<JniAnEnum?>? = null,
    val objectList: List<Any?>? = null,
    val listList: List<List<Any?>?>? = null,
    val mapList: List<Map<Any?, Any?>?>? = null,
    val map: Map<Any, Any?>? = null,
    val stringMap: Map<String?, String?>? = null,
    val intMap: Map<Long?, Long?>? = null,
    val enumMap: Map<JniAnEnum?, JniAnEnum?>? = null,
    val objectMap: Map<Any?, Any?>? = null,
    val listMap: Map<Long?, List<Any?>?>? = null,
    val mapMap: Map<Long?, Map<Any?, Any?>?>? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): JniAllNullableTypesWithoutRecursion {
      val aNullableBool = pigeonVar_list[0] as Boolean?
      val aNullableInt = pigeonVar_list[1] as Long?
      val aNullableInt64 = pigeonVar_list[2] as Long?
      val aNullableDouble = pigeonVar_list[3] as Double?
      val aNullableByteArray = pigeonVar_list[4] as ByteArray?
      val aNullable4ByteArray = pigeonVar_list[5] as IntArray?
      val aNullable8ByteArray = pigeonVar_list[6] as LongArray?
      val aNullableFloatArray = pigeonVar_list[7] as DoubleArray?
      val aNullableEnum = pigeonVar_list[8] as JniAnEnum?
      val anotherNullableEnum = pigeonVar_list[9] as JniAnotherEnum?
      val aNullableString = pigeonVar_list[10] as String?
      val aNullableObject = pigeonVar_list[11]
      val list = pigeonVar_list[12] as List<Any?>?
      val stringList = pigeonVar_list[13] as List<String?>?
      val intList = pigeonVar_list[14] as List<Long?>?
      val doubleList = pigeonVar_list[15] as List<Double?>?
      val boolList = pigeonVar_list[16] as List<Boolean?>?
      val enumList = pigeonVar_list[17] as List<JniAnEnum?>?
      val objectList = pigeonVar_list[18] as List<Any?>?
      val listList = pigeonVar_list[19] as List<List<Any?>?>?
      val mapList = pigeonVar_list[20] as List<Map<Any?, Any?>?>?
      val map = pigeonVar_list[21] as Map<Any, Any?>?
      val stringMap = pigeonVar_list[22] as Map<String?, String?>?
      val intMap = pigeonVar_list[23] as Map<Long?, Long?>?
      val enumMap = pigeonVar_list[24] as Map<JniAnEnum?, JniAnEnum?>?
      val objectMap = pigeonVar_list[25] as Map<Any?, Any?>?
      val listMap = pigeonVar_list[26] as Map<Long?, List<Any?>?>?
      val mapMap = pigeonVar_list[27] as Map<Long?, Map<Any?, Any?>?>?
      return JniAllNullableTypesWithoutRecursion(
          aNullableBool,
          aNullableInt,
          aNullableInt64,
          aNullableDouble,
          aNullableByteArray,
          aNullable4ByteArray,
          aNullable8ByteArray,
          aNullableFloatArray,
          aNullableEnum,
          anotherNullableEnum,
          aNullableString,
          aNullableObject,
          list,
          stringList,
          intList,
          doubleList,
          boolList,
          enumList,
          objectList,
          listList,
          mapList,
          map,
          stringMap,
          intMap,
          enumMap,
          objectMap,
          listMap,
          mapMap)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        aNullableBool,
        aNullableInt,
        aNullableInt64,
        aNullableDouble,
        aNullableByteArray,
        aNullable4ByteArray,
        aNullable8ByteArray,
        aNullableFloatArray,
        aNullableEnum,
        anotherNullableEnum,
        aNullableString,
        aNullableObject,
        list,
        stringList,
        intList,
        doubleList,
        boolList,
        enumList,
        objectList,
        listList,
        mapList,
        map,
        stringMap,
        intMap,
        enumMap,
        objectMap,
        listMap,
        mapMap,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is JniAllNullableTypesWithoutRecursion) {
      return false
    }
    if (this === other) {
      return true
    }
    return aNullableBool == other.aNullableBool &&
        aNullableInt == other.aNullableInt &&
        aNullableInt64 == other.aNullableInt64 &&
        aNullableDouble == other.aNullableDouble &&
        deepEqualsJniTests(aNullableByteArray, other.aNullableByteArray) &&
        deepEqualsJniTests(aNullable4ByteArray, other.aNullable4ByteArray) &&
        deepEqualsJniTests(aNullable8ByteArray, other.aNullable8ByteArray) &&
        deepEqualsJniTests(aNullableFloatArray, other.aNullableFloatArray) &&
        aNullableEnum == other.aNullableEnum &&
        anotherNullableEnum == other.anotherNullableEnum &&
        aNullableString == other.aNullableString &&
        aNullableObject == other.aNullableObject &&
        deepEqualsJniTests(list, other.list) &&
        deepEqualsJniTests(stringList, other.stringList) &&
        deepEqualsJniTests(intList, other.intList) &&
        deepEqualsJniTests(doubleList, other.doubleList) &&
        deepEqualsJniTests(boolList, other.boolList) &&
        deepEqualsJniTests(enumList, other.enumList) &&
        deepEqualsJniTests(objectList, other.objectList) &&
        deepEqualsJniTests(listList, other.listList) &&
        deepEqualsJniTests(mapList, other.mapList) &&
        deepEqualsJniTests(map, other.map) &&
        deepEqualsJniTests(stringMap, other.stringMap) &&
        deepEqualsJniTests(intMap, other.intMap) &&
        deepEqualsJniTests(enumMap, other.enumMap) &&
        deepEqualsJniTests(objectMap, other.objectMap) &&
        deepEqualsJniTests(listMap, other.listMap) &&
        deepEqualsJniTests(mapMap, other.mapMap)
  }

  override fun hashCode(): Int = toList().hashCode()
}

/**
 * A class for testing nested class handling.
 *
 * This is needed to test nested nullable and non-nullable classes, `JniAllNullableTypes` is
 * non-nullable here as it is easier to instantiate than `JniAllTypes` when testing doesn't require
 * both (ie. testing null classes).
 *
 * Generated class from Pigeon that represents data sent in messages.
 */
data class JniAllClassesWrapper(
    val allNullableTypes: JniAllNullableTypes,
    val allNullableTypesWithoutRecursion: JniAllNullableTypesWithoutRecursion? = null,
    val allTypes: JniAllTypes? = null,
    val classList: List<JniAllTypes?>,
    val nullableClassList: List<JniAllNullableTypesWithoutRecursion?>? = null,
    val classMap: Map<Long?, JniAllTypes?>,
    val nullableClassMap: Map<Long?, JniAllNullableTypesWithoutRecursion?>? = null
) {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): JniAllClassesWrapper {
      val allNullableTypes = pigeonVar_list[0] as JniAllNullableTypes
      val allNullableTypesWithoutRecursion =
          pigeonVar_list[1] as JniAllNullableTypesWithoutRecursion?
      val allTypes = pigeonVar_list[2] as JniAllTypes?
      val classList = pigeonVar_list[3] as List<JniAllTypes?>
      val nullableClassList = pigeonVar_list[4] as List<JniAllNullableTypesWithoutRecursion?>?
      val classMap = pigeonVar_list[5] as Map<Long?, JniAllTypes?>
      val nullableClassMap = pigeonVar_list[6] as Map<Long?, JniAllNullableTypesWithoutRecursion?>?
      return JniAllClassesWrapper(
          allNullableTypes,
          allNullableTypesWithoutRecursion,
          allTypes,
          classList,
          nullableClassList,
          classMap,
          nullableClassMap)
    }
  }

  fun toList(): List<Any?> {
    return listOf(
        allNullableTypes,
        allNullableTypesWithoutRecursion,
        allTypes,
        classList,
        nullableClassList,
        classMap,
        nullableClassMap,
    )
  }

  override fun equals(other: Any?): Boolean {
    if (other !is JniAllClassesWrapper) {
      return false
    }
    if (this === other) {
      return true
    }
    return allNullableTypes == other.allNullableTypes &&
        allNullableTypesWithoutRecursion == other.allNullableTypesWithoutRecursion &&
        allTypes == other.allTypes &&
        deepEqualsJniTests(classList, other.classList) &&
        deepEqualsJniTests(nullableClassList, other.nullableClassList) &&
        deepEqualsJniTests(classMap, other.classMap) &&
        deepEqualsJniTests(nullableClassMap, other.nullableClassMap)
  }

  override fun hashCode(): Int = toList().hashCode()
}

private open class JniTestsPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let { JniAnEnum.ofRaw(it.toInt()) }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let { JniAnotherEnum.ofRaw(it.toInt()) }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let { JniUnusedClass.fromList(it) }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let { JniAllTypes.fromList(it) }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let { JniAllNullableTypes.fromList(it) }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          JniAllNullableTypesWithoutRecursion.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let { JniAllClassesWrapper.fromList(it) }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }

  override fun writeValue(stream: ByteArrayOutputStream, value: Any?) {
    when (value) {
      is JniAnEnum -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is JniAnotherEnum -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is JniUnusedClass -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is JniAllTypes -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is JniAllNullableTypes -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is JniAllNullableTypesWithoutRecursion -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is JniAllClassesWrapper -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

val JniHostIntegrationCoreApiInstances: MutableMap<String, JniHostIntegrationCoreApiRegistrar> =
    mutableMapOf()

@Keep
abstract class JniHostIntegrationCoreApi {
  /** A no-op function taking no arguments and returning no value, to sanity test basic calling. */
  abstract fun noop()
  /** Returns the passed object, to test serialization and deserialization. */
  abstract fun echoAllTypes(everything: JniAllTypes): JniAllTypes
  /** Returns an error, to test error handling. */
  abstract fun throwError(): Any?
  /** Returns an error from a void function, to test error handling. */
  abstract fun throwErrorFromVoid()
  /** Returns a Flutter error, to test error handling. */
  abstract fun throwFlutterError(): Any?
  /** Returns passed in int. */
  abstract fun echoInt(anInt: Long): Long
  /** Returns passed in double. */
  abstract fun echoDouble(aDouble: Double): Double
  /** Returns the passed in boolean. */
  abstract fun echoBool(aBool: Boolean): Boolean
  /** Returns the passed in string. */
  abstract fun echoString(aString: String): String
  /** Returns the passed in Uint8List. */
  abstract fun echoUint8List(aUint8List: ByteArray): ByteArray
  /** Returns the passed in Int32List. */
  abstract fun echoInt32List(aInt32List: IntArray): IntArray
  /** Returns the passed in Int64List. */
  abstract fun echoInt64List(aInt64List: LongArray): LongArray
  /** Returns the passed in Float64List. */
  abstract fun echoFloat64List(aFloat64List: DoubleArray): DoubleArray
  /** Returns the passed in generic Object. */
  abstract fun echoObject(anObject: Any): Any
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoList(list: List<Any?>): List<Any?>
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoEnumList(enumList: List<JniAnEnum?>): List<JniAnEnum?>
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoClassList(classList: List<JniAllNullableTypes?>): List<JniAllNullableTypes?>
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoNonNullEnumList(enumList: List<JniAnEnum>): List<JniAnEnum>
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoNonNullClassList(classList: List<JniAllNullableTypes>): List<JniAllNullableTypes>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoMap(map: Map<Any?, Any?>): Map<Any?, Any?>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoStringMap(stringMap: Map<String?, String?>): Map<String?, String?>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoIntMap(intMap: Map<Long?, Long?>): Map<Long?, Long?>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoEnumMap(enumMap: Map<JniAnEnum?, JniAnEnum?>): Map<JniAnEnum?, JniAnEnum?>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>
  ): Map<Long?, JniAllNullableTypes?>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNonNullStringMap(stringMap: Map<String, String>): Map<String, String>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNonNullIntMap(intMap: Map<Long, Long>): Map<Long, Long>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNonNullEnumMap(enumMap: Map<JniAnEnum, JniAnEnum>): Map<JniAnEnum, JniAnEnum>
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNonNullClassMap(
      classMap: Map<Long, JniAllNullableTypes>
  ): Map<Long, JniAllNullableTypes>
  /** Returns the passed class to test nested class serialization and deserialization. */
  abstract fun echoClassWrapper(wrapper: JniAllClassesWrapper): JniAllClassesWrapper
  /** Returns the passed enum to test serialization and deserialization. */
  abstract fun echoEnum(anEnum: JniAnEnum): JniAnEnum
  /** Returns the passed enum to test serialization and deserialization. */
  abstract fun echoAnotherEnum(anotherEnum: JniAnotherEnum): JniAnotherEnum
  /** Returns the default string. */
  abstract fun echoNamedDefaultString(aString: String): String
  /** Returns passed in double. */
  abstract fun echoOptionalDefaultDouble(aDouble: Double): Double
  /** Returns passed in int. */
  abstract fun echoRequiredInt(anInt: Long): Long
  /** Returns the passed object, to test serialization and deserialization. */
  abstract fun echoAllNullableTypes(everything: JniAllNullableTypes?): JniAllNullableTypes?
  /** Returns the passed object, to test serialization and deserialization. */
  abstract fun echoAllNullableTypesWithoutRecursion(
      everything: JniAllNullableTypesWithoutRecursion?
  ): JniAllNullableTypesWithoutRecursion?
  /**
   * Returns the inner `aString` value from the wrapped object, to test sending of nested objects.
   */
  abstract fun extractNestedNullableString(wrapper: JniAllClassesWrapper): String?
  /**
   * Returns the inner `aString` value from the wrapped object, to test sending of nested objects.
   */
  abstract fun createNestedNullableString(nullableString: String?): JniAllClassesWrapper
  /** Returns passed in arguments of multiple types. */
  abstract fun sendMultipleNullableTypes(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypes
  /** Returns passed in arguments of multiple types. */
  abstract fun sendMultipleNullableTypesWithoutRecursion(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypesWithoutRecursion
  /** Returns passed in int. */
  abstract fun echoNullableInt(aNullableInt: Long?): Long?
  /** Returns passed in double. */
  abstract fun echoNullableDouble(aNullableDouble: Double?): Double?
  /** Returns the passed in boolean. */
  abstract fun echoNullableBool(aNullableBool: Boolean?): Boolean?
  /** Returns the passed in string. */
  abstract fun echoNullableString(aNullableString: String?): String?
  /** Returns the passed in Uint8List. */
  abstract fun echoNullableUint8List(aNullableUint8List: ByteArray?): ByteArray?
  /** Returns the passed in Int32List. */
  abstract fun echoNullableInt32List(aNullableInt32List: IntArray?): IntArray?
  /** Returns the passed in Int64List. */
  abstract fun echoNullableInt64List(aNullableInt64List: LongArray?): LongArray?
  /** Returns the passed in Float64List. */
  abstract fun echoNullableFloat64List(aNullableFloat64List: DoubleArray?): DoubleArray?
  /** Returns the passed in generic Object. */
  abstract fun echoNullableObject(aNullableObject: Any?): Any?
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoNullableList(aNullableList: List<Any?>?): List<Any?>?
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoNullableEnumList(enumList: List<JniAnEnum?>?): List<JniAnEnum?>?
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoNullableClassList(
      classList: List<JniAllNullableTypes?>?
  ): List<JniAllNullableTypes?>?
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoNullableNonNullEnumList(enumList: List<JniAnEnum>?): List<JniAnEnum>?
  /** Returns the passed list, to test serialization and deserialization. */
  abstract fun echoNullableNonNullClassList(
      classList: List<JniAllNullableTypes>?
  ): List<JniAllNullableTypes>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableMap(map: Map<Any?, Any?>?): Map<Any?, Any?>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableStringMap(stringMap: Map<String?, String?>?): Map<String?, String?>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableIntMap(intMap: Map<Long?, Long?>?): Map<Long?, Long?>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>?
  ): Map<JniAnEnum?, JniAnEnum?>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>?
  ): Map<Long?, JniAllNullableTypes?>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableNonNullStringMap(stringMap: Map<String, String>?): Map<String, String>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableNonNullIntMap(intMap: Map<Long, Long>?): Map<Long, Long>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableNonNullEnumMap(
      enumMap: Map<JniAnEnum, JniAnEnum>?
  ): Map<JniAnEnum, JniAnEnum>?
  /** Returns the passed map, to test serialization and deserialization. */
  abstract fun echoNullableNonNullClassMap(
      classMap: Map<Long, JniAllNullableTypes>?
  ): Map<Long, JniAllNullableTypes>?

  abstract fun echoNullableEnum(anEnum: JniAnEnum?): JniAnEnum?

  abstract fun echoAnotherNullableEnum(anotherEnum: JniAnotherEnum?): JniAnotherEnum?
  /** Returns passed in int. */
  abstract fun echoOptionalNullableInt(aNullableInt: Long?): Long?
  /** Returns the passed in string. */
  abstract fun echoNamedNullableString(aNullableString: String?): String?
  /**
   * A no-op function taking no arguments and returning no value, to sanity test basic asynchronous
   * calling.
   */
  abstract suspend fun noopAsync()
  /** Returns passed in int asynchronously. */
  abstract suspend fun echoAsyncInt(anInt: Long): Long
  /** Returns passed in double asynchronously. */
  abstract suspend fun echoAsyncDouble(aDouble: Double): Double
  /** Returns the passed in boolean asynchronously. */
  abstract suspend fun echoAsyncBool(aBool: Boolean): Boolean
  /** Returns the passed string asynchronously. */
  abstract suspend fun echoAsyncString(aString: String): String
  /** Returns the passed in Uint8List asynchronously. */
  abstract suspend fun echoAsyncUint8List(aUint8List: ByteArray): ByteArray
  /** Returns the passed in Int32List asynchronously. */
  abstract suspend fun echoAsyncInt32List(aInt32List: IntArray): IntArray
  /** Returns the passed in Int64List asynchronously. */
  abstract suspend fun echoAsyncInt64List(aInt64List: LongArray): LongArray
  /** Returns the passed in Float64List asynchronously. */
  abstract suspend fun echoAsyncFloat64List(aFloat64List: DoubleArray): DoubleArray
  /** Returns the passed in generic Object asynchronously. */
  abstract suspend fun echoAsyncObject(anObject: Any): Any
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncList(list: List<Any?>): List<Any?>
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncEnumList(enumList: List<JniAnEnum?>): List<JniAnEnum?>
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncClassList(
      classList: List<JniAllNullableTypes?>
  ): List<JniAllNullableTypes?>
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncMap(map: Map<Any?, Any?>): Map<Any?, Any?>
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncStringMap(stringMap: Map<String?, String?>): Map<String?, String?>
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncIntMap(intMap: Map<Long?, Long?>): Map<Long?, Long?>
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>
  ): Map<JniAnEnum?, JniAnEnum?>
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>
  ): Map<Long?, JniAllNullableTypes?>
  /** Returns the passed enum, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncEnum(anEnum: JniAnEnum): JniAnEnum
  /** Returns the passed enum, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAnotherAsyncEnum(anotherEnum: JniAnotherEnum): JniAnotherEnum
  /** Responds with an error from an async function returning a value. */
  abstract suspend fun throwAsyncError(): Any?
  /** Responds with an error from an async void function. */
  abstract suspend fun throwAsyncErrorFromVoid()
  /** Responds with a Flutter error from an async function returning a value. */
  abstract suspend fun throwAsyncFlutterError(): Any?
  /** Returns the passed object, to test async serialization and deserialization. */
  abstract suspend fun echoAsyncJniAllTypes(everything: JniAllTypes): JniAllTypes
  /** Returns the passed object, to test serialization and deserialization. */
  abstract suspend fun echoAsyncNullableJniAllNullableTypes(
      everything: JniAllNullableTypes?
  ): JniAllNullableTypes?
  /** Returns the passed object, to test serialization and deserialization. */
  abstract suspend fun echoAsyncNullableJniAllNullableTypesWithoutRecursion(
      everything: JniAllNullableTypesWithoutRecursion?
  ): JniAllNullableTypesWithoutRecursion?
  /** Returns passed in int asynchronously. */
  abstract suspend fun echoAsyncNullableInt(anInt: Long?): Long?
  /** Returns passed in double asynchronously. */
  abstract suspend fun echoAsyncNullableDouble(aDouble: Double?): Double?
  /** Returns the passed in boolean asynchronously. */
  abstract suspend fun echoAsyncNullableBool(aBool: Boolean?): Boolean?
  /** Returns the passed string asynchronously. */
  abstract suspend fun echoAsyncNullableString(aString: String?): String?
  /** Returns the passed in Uint8List asynchronously. */
  abstract suspend fun echoAsyncNullableUint8List(aUint8List: ByteArray?): ByteArray?
  /** Returns the passed in Int32List asynchronously. */
  abstract suspend fun echoAsyncNullableInt32List(aInt32List: IntArray?): IntArray?
  /** Returns the passed in Int64List asynchronously. */
  abstract suspend fun echoAsyncNullableInt64List(aInt64List: LongArray?): LongArray?
  /** Returns the passed in Float64List asynchronously. */
  abstract suspend fun echoAsyncNullableFloat64List(aFloat64List: DoubleArray?): DoubleArray?
  /** Returns the passed in generic Object asynchronously. */
  abstract suspend fun echoAsyncNullableObject(anObject: Any?): Any?
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncNullableList(list: List<Any?>?): List<Any?>?
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncNullableEnumList(enumList: List<JniAnEnum?>?): List<JniAnEnum?>?
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncNullableClassList(
      classList: List<JniAllNullableTypes?>?
  ): List<JniAllNullableTypes?>?
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncNullableMap(map: Map<Any?, Any?>?): Map<Any?, Any?>?
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncNullableStringMap(
      stringMap: Map<String?, String?>?
  ): Map<String?, String?>?
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncNullableIntMap(intMap: Map<Long?, Long?>?): Map<Long?, Long?>?
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncNullableEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>?
  ): Map<JniAnEnum?, JniAnEnum?>?
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncNullableClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>?
  ): Map<Long?, JniAllNullableTypes?>?
  /** Returns the passed enum, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAsyncNullableEnum(anEnum: JniAnEnum?): JniAnEnum?
  /** Returns the passed enum, to test asynchronous serialization and deserialization. */
  abstract suspend fun echoAnotherAsyncNullableEnum(anotherEnum: JniAnotherEnum?): JniAnotherEnum?

  abstract fun callFlutterNoop()

  abstract fun callFlutterThrowError(): Any?

  abstract fun callFlutterThrowErrorFromVoid()

  abstract fun callFlutterEchoJniAllTypes(everything: JniAllTypes): JniAllTypes

  abstract fun callFlutterEchoJniAllNullableTypes(
      everything: JniAllNullableTypes?
  ): JniAllNullableTypes?

  abstract fun callFlutterSendMultipleNullableTypes(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypes

  abstract fun callFlutterEchoJniAllNullableTypesWithoutRecursion(
      everything: JniAllNullableTypesWithoutRecursion?
  ): JniAllNullableTypesWithoutRecursion?

  abstract fun callFlutterSendMultipleNullableTypesWithoutRecursion(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypesWithoutRecursion

  abstract fun callFlutterEchoBool(aBool: Boolean): Boolean

  abstract fun callFlutterEchoInt(anInt: Long): Long

  abstract fun callFlutterEchoDouble(aDouble: Double): Double

  abstract fun callFlutterEchoString(aString: String): String

  abstract fun callFlutterEchoUint8List(list: ByteArray): ByteArray

  abstract fun callFlutterEchoList(list: List<Any?>): List<Any?>

  abstract fun callFlutterEchoEnumList(enumList: List<JniAnEnum?>): List<JniAnEnum?>

  abstract fun callFlutterEchoClassList(
      classList: List<JniAllNullableTypes?>
  ): List<JniAllNullableTypes?>

  abstract fun callFlutterEchoNonNullEnumList(enumList: List<JniAnEnum>): List<JniAnEnum>

  abstract fun callFlutterEchoNonNullClassList(
      classList: List<JniAllNullableTypes>
  ): List<JniAllNullableTypes>

  abstract fun callFlutterEchoMap(map: Map<Any?, Any?>): Map<Any?, Any?>

  abstract fun callFlutterEchoStringMap(stringMap: Map<String?, String?>): Map<String?, String?>

  abstract fun callFlutterEchoIntMap(intMap: Map<Long?, Long?>): Map<Long?, Long?>

  abstract fun callFlutterEchoEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>
  ): Map<JniAnEnum?, JniAnEnum?>

  abstract fun callFlutterEchoClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>
  ): Map<Long?, JniAllNullableTypes?>

  abstract fun callFlutterEchoNonNullStringMap(stringMap: Map<String, String>): Map<String, String>

  abstract fun callFlutterEchoNonNullIntMap(intMap: Map<Long, Long>): Map<Long, Long>

  abstract fun callFlutterEchoNonNullEnumMap(
      enumMap: Map<JniAnEnum, JniAnEnum>
  ): Map<JniAnEnum, JniAnEnum>

  abstract fun callFlutterEchoNonNullClassMap(
      classMap: Map<Long, JniAllNullableTypes>
  ): Map<Long, JniAllNullableTypes>

  abstract fun callFlutterEchoEnum(anEnum: JniAnEnum): JniAnEnum

  abstract fun callFlutterEchoJniAnotherEnum(anotherEnum: JniAnotherEnum): JniAnotherEnum

  abstract fun callFlutterEchoNullableBool(aBool: Boolean?): Boolean?

  abstract fun callFlutterEchoNullableInt(anInt: Long?): Long?

  abstract fun callFlutterEchoNullableDouble(aDouble: Double?): Double?

  abstract fun callFlutterEchoNullableString(aString: String?): String?

  abstract fun callFlutterEchoNullableUint8List(list: ByteArray?): ByteArray?

  abstract fun callFlutterEchoNullableList(list: List<Any?>?): List<Any?>?

  abstract fun callFlutterEchoNullableEnumList(enumList: List<JniAnEnum?>?): List<JniAnEnum?>?

  abstract fun callFlutterEchoNullableClassList(
      classList: List<JniAllNullableTypes?>?
  ): List<JniAllNullableTypes?>?

  abstract fun callFlutterEchoNullableNonNullEnumList(enumList: List<JniAnEnum>?): List<JniAnEnum>?

  abstract fun callFlutterEchoNullableNonNullClassList(
      classList: List<JniAllNullableTypes>?
  ): List<JniAllNullableTypes>?

  abstract fun callFlutterEchoNullableMap(map: Map<Any?, Any?>?): Map<Any?, Any?>?

  abstract fun callFlutterEchoNullableStringMap(
      stringMap: Map<String?, String?>?
  ): Map<String?, String?>?

  abstract fun callFlutterEchoNullableIntMap(intMap: Map<Long?, Long?>?): Map<Long?, Long?>?

  abstract fun callFlutterEchoNullableEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>?
  ): Map<JniAnEnum?, JniAnEnum?>?

  abstract fun callFlutterEchoNullableClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>?
  ): Map<Long?, JniAllNullableTypes?>?

  abstract fun callFlutterEchoNullableNonNullStringMap(
      stringMap: Map<String, String>?
  ): Map<String, String>?

  abstract fun callFlutterEchoNullableNonNullIntMap(intMap: Map<Long, Long>?): Map<Long, Long>?

  abstract fun callFlutterEchoNullableNonNullEnumMap(
      enumMap: Map<JniAnEnum, JniAnEnum>?
  ): Map<JniAnEnum, JniAnEnum>?

  abstract fun callFlutterEchoNullableNonNullClassMap(
      classMap: Map<Long, JniAllNullableTypes>?
  ): Map<Long, JniAllNullableTypes>?

  abstract fun callFlutterEchoNullableEnum(anEnum: JniAnEnum?): JniAnEnum?

  abstract fun callFlutterEchoAnotherNullableEnum(anotherEnum: JniAnotherEnum?): JniAnotherEnum?
}

@Keep
class JniHostIntegrationCoreApiRegistrar : JniHostIntegrationCoreApi() {
  var api: JniHostIntegrationCoreApi? = null

  fun register(
      api: JniHostIntegrationCoreApi,
      name: String = defaultInstanceName
  ): JniHostIntegrationCoreApiRegistrar {
    this.api = api
    JniHostIntegrationCoreApiInstances[name] = this
    return this
  }

  @Keep
  fun getInstance(name: String): JniHostIntegrationCoreApiRegistrar? {
    return JniHostIntegrationCoreApiInstances[name]
  }
  /** A no-op function taking no arguments and returning no value, to sanity test basic calling. */
  override fun noop() {
    api?.let {
      try {
        return api!!.noop()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed object, to test serialization and deserialization. */
  override fun echoAllTypes(everything: JniAllTypes): JniAllTypes {
    api?.let {
      try {
        return api!!.echoAllTypes(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns an error, to test error handling. */
  override fun throwError(): Any? {
    api?.let {
      try {
        return api!!.throwError()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns an error from a void function, to test error handling. */
  override fun throwErrorFromVoid() {
    api?.let {
      try {
        return api!!.throwErrorFromVoid()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns a Flutter error, to test error handling. */
  override fun throwFlutterError(): Any? {
    api?.let {
      try {
        return api!!.throwFlutterError()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in int. */
  override fun echoInt(anInt: Long): Long {
    api?.let {
      try {
        return api!!.echoInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in double. */
  override fun echoDouble(aDouble: Double): Double {
    api?.let {
      try {
        return api!!.echoDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in boolean. */
  override fun echoBool(aBool: Boolean): Boolean {
    api?.let {
      try {
        return api!!.echoBool(aBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in string. */
  override fun echoString(aString: String): String {
    api?.let {
      try {
        return api!!.echoString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Uint8List. */
  override fun echoUint8List(aUint8List: ByteArray): ByteArray {
    api?.let {
      try {
        return api!!.echoUint8List(aUint8List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Int32List. */
  override fun echoInt32List(aInt32List: IntArray): IntArray {
    api?.let {
      try {
        return api!!.echoInt32List(aInt32List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Int64List. */
  override fun echoInt64List(aInt64List: LongArray): LongArray {
    api?.let {
      try {
        return api!!.echoInt64List(aInt64List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Float64List. */
  override fun echoFloat64List(aFloat64List: DoubleArray): DoubleArray {
    api?.let {
      try {
        return api!!.echoFloat64List(aFloat64List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in generic Object. */
  override fun echoObject(anObject: Any): Any {
    api?.let {
      try {
        return api!!.echoObject(anObject)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoList(list: List<Any?>): List<Any?> {
    api?.let {
      try {
        return api!!.echoList(list)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoEnumList(enumList: List<JniAnEnum?>): List<JniAnEnum?> {
    api?.let {
      try {
        return api!!.echoEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoClassList(classList: List<JniAllNullableTypes?>): List<JniAllNullableTypes?> {
    api?.let {
      try {
        return api!!.echoClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoNonNullEnumList(enumList: List<JniAnEnum>): List<JniAnEnum> {
    api?.let {
      try {
        return api!!.echoNonNullEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoNonNullClassList(
      classList: List<JniAllNullableTypes>
  ): List<JniAllNullableTypes> {
    api?.let {
      try {
        return api!!.echoNonNullClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoMap(map: Map<Any?, Any?>): Map<Any?, Any?> {
    api?.let {
      try {
        return api!!.echoMap(map)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoStringMap(stringMap: Map<String?, String?>): Map<String?, String?> {
    api?.let {
      try {
        return api!!.echoStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoIntMap(intMap: Map<Long?, Long?>): Map<Long?, Long?> {
    api?.let {
      try {
        return api!!.echoIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoEnumMap(enumMap: Map<JniAnEnum?, JniAnEnum?>): Map<JniAnEnum?, JniAnEnum?> {
    api?.let {
      try {
        return api!!.echoEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>
  ): Map<Long?, JniAllNullableTypes?> {
    api?.let {
      try {
        return api!!.echoClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNonNullStringMap(stringMap: Map<String, String>): Map<String, String> {
    api?.let {
      try {
        return api!!.echoNonNullStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNonNullIntMap(intMap: Map<Long, Long>): Map<Long, Long> {
    api?.let {
      try {
        return api!!.echoNonNullIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNonNullEnumMap(enumMap: Map<JniAnEnum, JniAnEnum>): Map<JniAnEnum, JniAnEnum> {
    api?.let {
      try {
        return api!!.echoNonNullEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNonNullClassMap(
      classMap: Map<Long, JniAllNullableTypes>
  ): Map<Long, JniAllNullableTypes> {
    api?.let {
      try {
        return api!!.echoNonNullClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed class to test nested class serialization and deserialization. */
  override fun echoClassWrapper(wrapper: JniAllClassesWrapper): JniAllClassesWrapper {
    api?.let {
      try {
        return api!!.echoClassWrapper(wrapper)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed enum to test serialization and deserialization. */
  override fun echoEnum(anEnum: JniAnEnum): JniAnEnum {
    api?.let {
      try {
        return api!!.echoEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed enum to test serialization and deserialization. */
  override fun echoAnotherEnum(anotherEnum: JniAnotherEnum): JniAnotherEnum {
    api?.let {
      try {
        return api!!.echoAnotherEnum(anotherEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the default string. */
  override fun echoNamedDefaultString(aString: String): String {
    api?.let {
      try {
        return api!!.echoNamedDefaultString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in double. */
  override fun echoOptionalDefaultDouble(aDouble: Double): Double {
    api?.let {
      try {
        return api!!.echoOptionalDefaultDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in int. */
  override fun echoRequiredInt(anInt: Long): Long {
    api?.let {
      try {
        return api!!.echoRequiredInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed object, to test serialization and deserialization. */
  override fun echoAllNullableTypes(everything: JniAllNullableTypes?): JniAllNullableTypes? {
    api?.let {
      try {
        return api!!.echoAllNullableTypes(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed object, to test serialization and deserialization. */
  override fun echoAllNullableTypesWithoutRecursion(
      everything: JniAllNullableTypesWithoutRecursion?
  ): JniAllNullableTypesWithoutRecursion? {
    api?.let {
      try {
        return api!!.echoAllNullableTypesWithoutRecursion(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /**
   * Returns the inner `aString` value from the wrapped object, to test sending of nested objects.
   */
  override fun extractNestedNullableString(wrapper: JniAllClassesWrapper): String? {
    api?.let {
      try {
        return api!!.extractNestedNullableString(wrapper)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /**
   * Returns the inner `aString` value from the wrapped object, to test sending of nested objects.
   */
  override fun createNestedNullableString(nullableString: String?): JniAllClassesWrapper {
    api?.let {
      try {
        return api!!.createNestedNullableString(nullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in arguments of multiple types. */
  override fun sendMultipleNullableTypes(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypes {
    api?.let {
      try {
        return api!!.sendMultipleNullableTypes(aNullableBool, aNullableInt, aNullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in arguments of multiple types. */
  override fun sendMultipleNullableTypesWithoutRecursion(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypesWithoutRecursion {
    api?.let {
      try {
        return api!!.sendMultipleNullableTypesWithoutRecursion(
            aNullableBool, aNullableInt, aNullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in int. */
  override fun echoNullableInt(aNullableInt: Long?): Long? {
    api?.let {
      try {
        return api!!.echoNullableInt(aNullableInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in double. */
  override fun echoNullableDouble(aNullableDouble: Double?): Double? {
    api?.let {
      try {
        return api!!.echoNullableDouble(aNullableDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in boolean. */
  override fun echoNullableBool(aNullableBool: Boolean?): Boolean? {
    api?.let {
      try {
        return api!!.echoNullableBool(aNullableBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in string. */
  override fun echoNullableString(aNullableString: String?): String? {
    api?.let {
      try {
        return api!!.echoNullableString(aNullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Uint8List. */
  override fun echoNullableUint8List(aNullableUint8List: ByteArray?): ByteArray? {
    api?.let {
      try {
        return api!!.echoNullableUint8List(aNullableUint8List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Int32List. */
  override fun echoNullableInt32List(aNullableInt32List: IntArray?): IntArray? {
    api?.let {
      try {
        return api!!.echoNullableInt32List(aNullableInt32List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Int64List. */
  override fun echoNullableInt64List(aNullableInt64List: LongArray?): LongArray? {
    api?.let {
      try {
        return api!!.echoNullableInt64List(aNullableInt64List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Float64List. */
  override fun echoNullableFloat64List(aNullableFloat64List: DoubleArray?): DoubleArray? {
    api?.let {
      try {
        return api!!.echoNullableFloat64List(aNullableFloat64List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in generic Object. */
  override fun echoNullableObject(aNullableObject: Any?): Any? {
    api?.let {
      try {
        return api!!.echoNullableObject(aNullableObject)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoNullableList(aNullableList: List<Any?>?): List<Any?>? {
    api?.let {
      try {
        return api!!.echoNullableList(aNullableList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoNullableEnumList(enumList: List<JniAnEnum?>?): List<JniAnEnum?>? {
    api?.let {
      try {
        return api!!.echoNullableEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoNullableClassList(
      classList: List<JniAllNullableTypes?>?
  ): List<JniAllNullableTypes?>? {
    api?.let {
      try {
        return api!!.echoNullableClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoNullableNonNullEnumList(enumList: List<JniAnEnum>?): List<JniAnEnum>? {
    api?.let {
      try {
        return api!!.echoNullableNonNullEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test serialization and deserialization. */
  override fun echoNullableNonNullClassList(
      classList: List<JniAllNullableTypes>?
  ): List<JniAllNullableTypes>? {
    api?.let {
      try {
        return api!!.echoNullableNonNullClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableMap(map: Map<Any?, Any?>?): Map<Any?, Any?>? {
    api?.let {
      try {
        return api!!.echoNullableMap(map)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableStringMap(stringMap: Map<String?, String?>?): Map<String?, String?>? {
    api?.let {
      try {
        return api!!.echoNullableStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableIntMap(intMap: Map<Long?, Long?>?): Map<Long?, Long?>? {
    api?.let {
      try {
        return api!!.echoNullableIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>?
  ): Map<JniAnEnum?, JniAnEnum?>? {
    api?.let {
      try {
        return api!!.echoNullableEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>?
  ): Map<Long?, JniAllNullableTypes?>? {
    api?.let {
      try {
        return api!!.echoNullableClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableNonNullStringMap(stringMap: Map<String, String>?): Map<String, String>? {
    api?.let {
      try {
        return api!!.echoNullableNonNullStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableNonNullIntMap(intMap: Map<Long, Long>?): Map<Long, Long>? {
    api?.let {
      try {
        return api!!.echoNullableNonNullIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableNonNullEnumMap(
      enumMap: Map<JniAnEnum, JniAnEnum>?
  ): Map<JniAnEnum, JniAnEnum>? {
    api?.let {
      try {
        return api!!.echoNullableNonNullEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test serialization and deserialization. */
  override fun echoNullableNonNullClassMap(
      classMap: Map<Long, JniAllNullableTypes>?
  ): Map<Long, JniAllNullableTypes>? {
    api?.let {
      try {
        return api!!.echoNullableNonNullClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoNullableEnum(anEnum: JniAnEnum?): JniAnEnum? {
    api?.let {
      try {
        return api!!.echoNullableEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun echoAnotherNullableEnum(anotherEnum: JniAnotherEnum?): JniAnotherEnum? {
    api?.let {
      try {
        return api!!.echoAnotherNullableEnum(anotherEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in int. */
  override fun echoOptionalNullableInt(aNullableInt: Long?): Long? {
    api?.let {
      try {
        return api!!.echoOptionalNullableInt(aNullableInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in string. */
  override fun echoNamedNullableString(aNullableString: String?): String? {
    api?.let {
      try {
        return api!!.echoNamedNullableString(aNullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /**
   * A no-op function taking no arguments and returning no value, to sanity test basic asynchronous
   * calling.
   */
  override suspend fun noopAsync() {
    api?.let {
      try {
        return api!!.noopAsync()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in int asynchronously. */
  override suspend fun echoAsyncInt(anInt: Long): Long {
    api?.let {
      try {
        return api!!.echoAsyncInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in double asynchronously. */
  override suspend fun echoAsyncDouble(aDouble: Double): Double {
    api?.let {
      try {
        return api!!.echoAsyncDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in boolean asynchronously. */
  override suspend fun echoAsyncBool(aBool: Boolean): Boolean {
    api?.let {
      try {
        return api!!.echoAsyncBool(aBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed string asynchronously. */
  override suspend fun echoAsyncString(aString: String): String {
    api?.let {
      try {
        return api!!.echoAsyncString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Uint8List asynchronously. */
  override suspend fun echoAsyncUint8List(aUint8List: ByteArray): ByteArray {
    api?.let {
      try {
        return api!!.echoAsyncUint8List(aUint8List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Int32List asynchronously. */
  override suspend fun echoAsyncInt32List(aInt32List: IntArray): IntArray {
    api?.let {
      try {
        return api!!.echoAsyncInt32List(aInt32List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Int64List asynchronously. */
  override suspend fun echoAsyncInt64List(aInt64List: LongArray): LongArray {
    api?.let {
      try {
        return api!!.echoAsyncInt64List(aInt64List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Float64List asynchronously. */
  override suspend fun echoAsyncFloat64List(aFloat64List: DoubleArray): DoubleArray {
    api?.let {
      try {
        return api!!.echoAsyncFloat64List(aFloat64List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in generic Object asynchronously. */
  override suspend fun echoAsyncObject(anObject: Any): Any {
    api?.let {
      try {
        return api!!.echoAsyncObject(anObject)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncList(list: List<Any?>): List<Any?> {
    api?.let {
      try {
        return api!!.echoAsyncList(list)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncEnumList(enumList: List<JniAnEnum?>): List<JniAnEnum?> {
    api?.let {
      try {
        return api!!.echoAsyncEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncClassList(
      classList: List<JniAllNullableTypes?>
  ): List<JniAllNullableTypes?> {
    api?.let {
      try {
        return api!!.echoAsyncClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncMap(map: Map<Any?, Any?>): Map<Any?, Any?> {
    api?.let {
      try {
        return api!!.echoAsyncMap(map)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncStringMap(stringMap: Map<String?, String?>): Map<String?, String?> {
    api?.let {
      try {
        return api!!.echoAsyncStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncIntMap(intMap: Map<Long?, Long?>): Map<Long?, Long?> {
    api?.let {
      try {
        return api!!.echoAsyncIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>
  ): Map<JniAnEnum?, JniAnEnum?> {
    api?.let {
      try {
        return api!!.echoAsyncEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>
  ): Map<Long?, JniAllNullableTypes?> {
    api?.let {
      try {
        return api!!.echoAsyncClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed enum, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncEnum(anEnum: JniAnEnum): JniAnEnum {
    api?.let {
      try {
        return api!!.echoAsyncEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed enum, to test asynchronous serialization and deserialization. */
  override suspend fun echoAnotherAsyncEnum(anotherEnum: JniAnotherEnum): JniAnotherEnum {
    api?.let {
      try {
        return api!!.echoAnotherAsyncEnum(anotherEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Responds with an error from an async function returning a value. */
  override suspend fun throwAsyncError(): Any? {
    api?.let {
      try {
        return api!!.throwAsyncError()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Responds with an error from an async void function. */
  override suspend fun throwAsyncErrorFromVoid() {
    api?.let {
      try {
        return api!!.throwAsyncErrorFromVoid()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Responds with a Flutter error from an async function returning a value. */
  override suspend fun throwAsyncFlutterError(): Any? {
    api?.let {
      try {
        return api!!.throwAsyncFlutterError()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed object, to test async serialization and deserialization. */
  override suspend fun echoAsyncJniAllTypes(everything: JniAllTypes): JniAllTypes {
    api?.let {
      try {
        return api!!.echoAsyncJniAllTypes(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed object, to test serialization and deserialization. */
  override suspend fun echoAsyncNullableJniAllNullableTypes(
      everything: JniAllNullableTypes?
  ): JniAllNullableTypes? {
    api?.let {
      try {
        return api!!.echoAsyncNullableJniAllNullableTypes(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed object, to test serialization and deserialization. */
  override suspend fun echoAsyncNullableJniAllNullableTypesWithoutRecursion(
      everything: JniAllNullableTypesWithoutRecursion?
  ): JniAllNullableTypesWithoutRecursion? {
    api?.let {
      try {
        return api!!.echoAsyncNullableJniAllNullableTypesWithoutRecursion(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in int asynchronously. */
  override suspend fun echoAsyncNullableInt(anInt: Long?): Long? {
    api?.let {
      try {
        return api!!.echoAsyncNullableInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns passed in double asynchronously. */
  override suspend fun echoAsyncNullableDouble(aDouble: Double?): Double? {
    api?.let {
      try {
        return api!!.echoAsyncNullableDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in boolean asynchronously. */
  override suspend fun echoAsyncNullableBool(aBool: Boolean?): Boolean? {
    api?.let {
      try {
        return api!!.echoAsyncNullableBool(aBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed string asynchronously. */
  override suspend fun echoAsyncNullableString(aString: String?): String? {
    api?.let {
      try {
        return api!!.echoAsyncNullableString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Uint8List asynchronously. */
  override suspend fun echoAsyncNullableUint8List(aUint8List: ByteArray?): ByteArray? {
    api?.let {
      try {
        return api!!.echoAsyncNullableUint8List(aUint8List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Int32List asynchronously. */
  override suspend fun echoAsyncNullableInt32List(aInt32List: IntArray?): IntArray? {
    api?.let {
      try {
        return api!!.echoAsyncNullableInt32List(aInt32List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Int64List asynchronously. */
  override suspend fun echoAsyncNullableInt64List(aInt64List: LongArray?): LongArray? {
    api?.let {
      try {
        return api!!.echoAsyncNullableInt64List(aInt64List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in Float64List asynchronously. */
  override suspend fun echoAsyncNullableFloat64List(aFloat64List: DoubleArray?): DoubleArray? {
    api?.let {
      try {
        return api!!.echoAsyncNullableFloat64List(aFloat64List)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed in generic Object asynchronously. */
  override suspend fun echoAsyncNullableObject(anObject: Any?): Any? {
    api?.let {
      try {
        return api!!.echoAsyncNullableObject(anObject)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncNullableList(list: List<Any?>?): List<Any?>? {
    api?.let {
      try {
        return api!!.echoAsyncNullableList(list)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncNullableEnumList(enumList: List<JniAnEnum?>?): List<JniAnEnum?>? {
    api?.let {
      try {
        return api!!.echoAsyncNullableEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed list, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncNullableClassList(
      classList: List<JniAllNullableTypes?>?
  ): List<JniAllNullableTypes?>? {
    api?.let {
      try {
        return api!!.echoAsyncNullableClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncNullableMap(map: Map<Any?, Any?>?): Map<Any?, Any?>? {
    api?.let {
      try {
        return api!!.echoAsyncNullableMap(map)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncNullableStringMap(
      stringMap: Map<String?, String?>?
  ): Map<String?, String?>? {
    api?.let {
      try {
        return api!!.echoAsyncNullableStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncNullableIntMap(intMap: Map<Long?, Long?>?): Map<Long?, Long?>? {
    api?.let {
      try {
        return api!!.echoAsyncNullableIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncNullableEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>?
  ): Map<JniAnEnum?, JniAnEnum?>? {
    api?.let {
      try {
        return api!!.echoAsyncNullableEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed map, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncNullableClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>?
  ): Map<Long?, JniAllNullableTypes?>? {
    api?.let {
      try {
        return api!!.echoAsyncNullableClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed enum, to test asynchronous serialization and deserialization. */
  override suspend fun echoAsyncNullableEnum(anEnum: JniAnEnum?): JniAnEnum? {
    api?.let {
      try {
        return api!!.echoAsyncNullableEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
  /** Returns the passed enum, to test asynchronous serialization and deserialization. */
  override suspend fun echoAnotherAsyncNullableEnum(anotherEnum: JniAnotherEnum?): JniAnotherEnum? {
    api?.let {
      try {
        return api!!.echoAnotherAsyncNullableEnum(anotherEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterNoop() {
    api?.let {
      try {
        return api!!.callFlutterNoop()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterThrowError(): Any? {
    api?.let {
      try {
        return api!!.callFlutterThrowError()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterThrowErrorFromVoid() {
    api?.let {
      try {
        return api!!.callFlutterThrowErrorFromVoid()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoJniAllTypes(everything: JniAllTypes): JniAllTypes {
    api?.let {
      try {
        return api!!.callFlutterEchoJniAllTypes(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoJniAllNullableTypes(
      everything: JniAllNullableTypes?
  ): JniAllNullableTypes? {
    api?.let {
      try {
        return api!!.callFlutterEchoJniAllNullableTypes(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterSendMultipleNullableTypes(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypes {
    api?.let {
      try {
        return api!!.callFlutterSendMultipleNullableTypes(
            aNullableBool, aNullableInt, aNullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoJniAllNullableTypesWithoutRecursion(
      everything: JniAllNullableTypesWithoutRecursion?
  ): JniAllNullableTypesWithoutRecursion? {
    api?.let {
      try {
        return api!!.callFlutterEchoJniAllNullableTypesWithoutRecursion(everything)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterSendMultipleNullableTypesWithoutRecursion(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypesWithoutRecursion {
    api?.let {
      try {
        return api!!.callFlutterSendMultipleNullableTypesWithoutRecursion(
            aNullableBool, aNullableInt, aNullableString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoBool(aBool: Boolean): Boolean {
    api?.let {
      try {
        return api!!.callFlutterEchoBool(aBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoInt(anInt: Long): Long {
    api?.let {
      try {
        return api!!.callFlutterEchoInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoDouble(aDouble: Double): Double {
    api?.let {
      try {
        return api!!.callFlutterEchoDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoString(aString: String): String {
    api?.let {
      try {
        return api!!.callFlutterEchoString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoUint8List(list: ByteArray): ByteArray {
    api?.let {
      try {
        return api!!.callFlutterEchoUint8List(list)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoList(list: List<Any?>): List<Any?> {
    api?.let {
      try {
        return api!!.callFlutterEchoList(list)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoEnumList(enumList: List<JniAnEnum?>): List<JniAnEnum?> {
    api?.let {
      try {
        return api!!.callFlutterEchoEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoClassList(
      classList: List<JniAllNullableTypes?>
  ): List<JniAllNullableTypes?> {
    api?.let {
      try {
        return api!!.callFlutterEchoClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNonNullEnumList(enumList: List<JniAnEnum>): List<JniAnEnum> {
    api?.let {
      try {
        return api!!.callFlutterEchoNonNullEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNonNullClassList(
      classList: List<JniAllNullableTypes>
  ): List<JniAllNullableTypes> {
    api?.let {
      try {
        return api!!.callFlutterEchoNonNullClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoMap(map: Map<Any?, Any?>): Map<Any?, Any?> {
    api?.let {
      try {
        return api!!.callFlutterEchoMap(map)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoStringMap(stringMap: Map<String?, String?>): Map<String?, String?> {
    api?.let {
      try {
        return api!!.callFlutterEchoStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoIntMap(intMap: Map<Long?, Long?>): Map<Long?, Long?> {
    api?.let {
      try {
        return api!!.callFlutterEchoIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>
  ): Map<JniAnEnum?, JniAnEnum?> {
    api?.let {
      try {
        return api!!.callFlutterEchoEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>
  ): Map<Long?, JniAllNullableTypes?> {
    api?.let {
      try {
        return api!!.callFlutterEchoClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNonNullStringMap(
      stringMap: Map<String, String>
  ): Map<String, String> {
    api?.let {
      try {
        return api!!.callFlutterEchoNonNullStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNonNullIntMap(intMap: Map<Long, Long>): Map<Long, Long> {
    api?.let {
      try {
        return api!!.callFlutterEchoNonNullIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNonNullEnumMap(
      enumMap: Map<JniAnEnum, JniAnEnum>
  ): Map<JniAnEnum, JniAnEnum> {
    api?.let {
      try {
        return api!!.callFlutterEchoNonNullEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNonNullClassMap(
      classMap: Map<Long, JniAllNullableTypes>
  ): Map<Long, JniAllNullableTypes> {
    api?.let {
      try {
        return api!!.callFlutterEchoNonNullClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoEnum(anEnum: JniAnEnum): JniAnEnum {
    api?.let {
      try {
        return api!!.callFlutterEchoEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoJniAnotherEnum(anotherEnum: JniAnotherEnum): JniAnotherEnum {
    api?.let {
      try {
        return api!!.callFlutterEchoJniAnotherEnum(anotherEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableBool(aBool: Boolean?): Boolean? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableBool(aBool)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableInt(anInt: Long?): Long? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableInt(anInt)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableDouble(aDouble: Double?): Double? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableDouble(aDouble)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableString(aString: String?): String? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableString(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableUint8List(list: ByteArray?): ByteArray? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableUint8List(list)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableList(list: List<Any?>?): List<Any?>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableList(list)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableEnumList(enumList: List<JniAnEnum?>?): List<JniAnEnum?>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableClassList(
      classList: List<JniAllNullableTypes?>?
  ): List<JniAllNullableTypes?>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableNonNullEnumList(
      enumList: List<JniAnEnum>?
  ): List<JniAnEnum>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableNonNullEnumList(enumList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableNonNullClassList(
      classList: List<JniAllNullableTypes>?
  ): List<JniAllNullableTypes>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableNonNullClassList(classList)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableMap(map: Map<Any?, Any?>?): Map<Any?, Any?>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableMap(map)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableStringMap(
      stringMap: Map<String?, String?>?
  ): Map<String?, String?>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableIntMap(intMap: Map<Long?, Long?>?): Map<Long?, Long?>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableEnumMap(
      enumMap: Map<JniAnEnum?, JniAnEnum?>?
  ): Map<JniAnEnum?, JniAnEnum?>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>?
  ): Map<Long?, JniAllNullableTypes?>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableNonNullStringMap(
      stringMap: Map<String, String>?
  ): Map<String, String>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableNonNullStringMap(stringMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableNonNullIntMap(intMap: Map<Long, Long>?): Map<Long, Long>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableNonNullIntMap(intMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableNonNullEnumMap(
      enumMap: Map<JniAnEnum, JniAnEnum>?
  ): Map<JniAnEnum, JniAnEnum>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableNonNullEnumMap(enumMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableNonNullClassMap(
      classMap: Map<Long, JniAllNullableTypes>?
  ): Map<Long, JniAllNullableTypes>? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableNonNullClassMap(classMap)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoNullableEnum(anEnum: JniAnEnum?): JniAnEnum? {
    api?.let {
      try {
        return api!!.callFlutterEchoNullableEnum(anEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }

  override fun callFlutterEchoAnotherNullableEnum(anotherEnum: JniAnotherEnum?): JniAnotherEnum? {
    api?.let {
      try {
        return api!!.callFlutterEchoAnotherNullableEnum(anotherEnum)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostIntegrationCoreApi has not been set")
  }
}

val JniHostTrivialApiInstances: MutableMap<String, JniHostTrivialApiRegistrar> = mutableMapOf()

@Keep
abstract class JniHostTrivialApi {
  abstract fun noop()
}

@Keep
class JniHostTrivialApiRegistrar : JniHostTrivialApi() {
  var api: JniHostTrivialApi? = null

  fun register(
      api: JniHostTrivialApi,
      name: String = defaultInstanceName
  ): JniHostTrivialApiRegistrar {
    this.api = api
    JniHostTrivialApiInstances[name] = this
    return this
  }

  @Keep
  fun getInstance(name: String): JniHostTrivialApiRegistrar? {
    return JniHostTrivialApiInstances[name]
  }

  override fun noop() {
    api?.let {
      try {
        return api!!.noop()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostTrivialApi has not been set")
  }
}

val JniHostSmallApiInstances: MutableMap<String, JniHostSmallApiRegistrar> = mutableMapOf()

@Keep
abstract class JniHostSmallApi {
  abstract suspend fun echo(aString: String): String

  abstract suspend fun voidVoid()
}

@Keep
class JniHostSmallApiRegistrar : JniHostSmallApi() {
  var api: JniHostSmallApi? = null

  fun register(api: JniHostSmallApi, name: String = defaultInstanceName): JniHostSmallApiRegistrar {
    this.api = api
    JniHostSmallApiInstances[name] = this
    return this
  }

  @Keep
  fun getInstance(name: String): JniHostSmallApiRegistrar? {
    return JniHostSmallApiInstances[name]
  }

  override suspend fun echo(aString: String): String {
    api?.let {
      try {
        return api!!.echo(aString)
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostSmallApi has not been set")
  }

  override suspend fun voidVoid() {
    api?.let {
      try {
        return api!!.voidVoid()
      } catch (e: Exception) {
        throw e
      }
    }
    error("JniHostSmallApi has not been set")
  }
}
/**
 * The core interface that the Dart platform_test code implements for host integration tests to call
 * into.
 *
 * Generated class from Pigeon that represents Flutter messages that can be called from Kotlin.
 */
val registeredJniFlutterIntegrationCoreApi: MutableMap<String, JniFlutterIntegrationCoreApi> =
    mutableMapOf()

class JniFlutterIntegrationCoreApiRegistrar() {
  /// Map that stores instances

  fun registerInstance(api: JniFlutterIntegrationCoreApi, name: String = defaultInstanceName) {
    registeredJniFlutterIntegrationCoreApi[name] = api
  }

  fun getInstance(name: String = defaultInstanceName): JniFlutterIntegrationCoreApi? {
    return registeredJniFlutterIntegrationCoreApi[name]
  }
}

interface JniFlutterIntegrationCoreApi {
  /** A no-op function taking no arguments and returning no value, to sanity test basic calling. */
  fun noop()
  /** Responds with an error from an async function returning a value. */
  fun throwError(): Any?
  /** Responds with an error from an async void function. */
  fun throwErrorFromVoid()
  /** Returns the passed object, to test serialization and deserialization. */
  fun echoJniAllTypes(everything: JniAllTypes): JniAllTypes
  /** Returns the passed object, to test serialization and deserialization. */
  fun echoJniAllNullableTypes(everything: JniAllNullableTypes?): JniAllNullableTypes?
  /**
   * Returns passed in arguments of multiple types.
   *
   * Tests multiple-arity FlutterApi handling.
   */
  fun sendMultipleNullableTypes(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypes
  /** Returns the passed object, to test serialization and deserialization. */
  fun echoJniAllNullableTypesWithoutRecursion(
      everything: JniAllNullableTypesWithoutRecursion?
  ): JniAllNullableTypesWithoutRecursion?
  /**
   * Returns passed in arguments of multiple types.
   *
   * Tests multiple-arity FlutterApi handling.
   */
  fun sendMultipleNullableTypesWithoutRecursion(
      aNullableBool: Boolean?,
      aNullableInt: Long?,
      aNullableString: String?
  ): JniAllNullableTypesWithoutRecursion
  /** Returns the passed boolean, to test serialization and deserialization. */
  fun echoBool(aBool: Boolean): Boolean
  /** Returns the passed int, to test serialization and deserialization. */
  fun echoInt(anInt: Long): Long
  /** Returns the passed double, to test serialization and deserialization. */
  fun echoDouble(aDouble: Double): Double
  /** Returns the passed string, to test serialization and deserialization. */
  fun echoString(aString: String): String
  /** Returns the passed byte list, to test serialization and deserialization. */
  fun echoUint8List(list: ByteArray): ByteArray
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoList(list: List<Any?>): List<Any?>
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoEnumList(enumList: List<JniAnEnum?>): List<JniAnEnum?>
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoClassList(classList: List<JniAllNullableTypes?>): List<JniAllNullableTypes?>
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoNonNullEnumList(enumList: List<JniAnEnum>): List<JniAnEnum>
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoNonNullClassList(classList: List<JniAllNullableTypes>): List<JniAllNullableTypes>
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoMap(map: Map<Any?, Any?>): Map<Any?, Any?>
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoStringMap(stringMap: Map<String?, String?>): Map<String?, String?>
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoIntMap(intMap: Map<Long?, Long?>): Map<Long?, Long?>
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoEnumMap(enumMap: Map<JniAnEnum?, JniAnEnum?>): Map<JniAnEnum?, JniAnEnum?>
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoClassMap(classMap: Map<Long?, JniAllNullableTypes?>): Map<Long?, JniAllNullableTypes?>
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNonNullStringMap(stringMap: Map<String, String>): Map<String, String>
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNonNullIntMap(intMap: Map<Long, Long>): Map<Long, Long>
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNonNullEnumMap(enumMap: Map<JniAnEnum, JniAnEnum>): Map<JniAnEnum, JniAnEnum>
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNonNullClassMap(classMap: Map<Long, JniAllNullableTypes>): Map<Long, JniAllNullableTypes>
  /** Returns the passed enum to test serialization and deserialization. */
  fun echoEnum(anEnum: JniAnEnum): JniAnEnum
  /** Returns the passed enum to test serialization and deserialization. */
  fun echoJniAnotherEnum(anotherEnum: JniAnotherEnum): JniAnotherEnum
  /** Returns the passed boolean, to test serialization and deserialization. */
  fun echoNullableBool(aBool: Boolean?): Boolean?
  /** Returns the passed int, to test serialization and deserialization. */
  fun echoNullableInt(anInt: Long?): Long?
  /** Returns the passed double, to test serialization and deserialization. */
  fun echoNullableDouble(aDouble: Double?): Double?
  /** Returns the passed string, to test serialization and deserialization. */
  fun echoNullableString(aString: String?): String?
  /** Returns the passed byte list, to test serialization and deserialization. */
  fun echoNullableUint8List(list: ByteArray?): ByteArray?
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoNullableList(list: List<Any?>?): List<Any?>?
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoNullableEnumList(enumList: List<JniAnEnum?>?): List<JniAnEnum?>?
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoNullableClassList(classList: List<JniAllNullableTypes?>?): List<JniAllNullableTypes?>?
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoNullableNonNullEnumList(enumList: List<JniAnEnum>?): List<JniAnEnum>?
  /** Returns the passed list, to test serialization and deserialization. */
  fun echoNullableNonNullClassList(
      classList: List<JniAllNullableTypes>?
  ): List<JniAllNullableTypes>?
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNullableMap(map: Map<Any?, Any?>?): Map<Any?, Any?>?
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNullableStringMap(stringMap: Map<String?, String?>?): Map<String?, String?>?
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNullableIntMap(intMap: Map<Long?, Long?>?): Map<Long?, Long?>?
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNullableEnumMap(enumMap: Map<JniAnEnum?, JniAnEnum?>?): Map<JniAnEnum?, JniAnEnum?>?
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNullableClassMap(
      classMap: Map<Long?, JniAllNullableTypes?>?
  ): Map<Long?, JniAllNullableTypes?>?
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNullableNonNullStringMap(stringMap: Map<String, String>?): Map<String, String>?
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNullableNonNullIntMap(intMap: Map<Long, Long>?): Map<Long, Long>?
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNullableNonNullEnumMap(enumMap: Map<JniAnEnum, JniAnEnum>?): Map<JniAnEnum, JniAnEnum>?
  /** Returns the passed map, to test serialization and deserialization. */
  fun echoNullableNonNullClassMap(
      classMap: Map<Long, JniAllNullableTypes>?
  ): Map<Long, JniAllNullableTypes>?
  /** Returns the passed enum to test serialization and deserialization. */
  fun echoNullableEnum(anEnum: JniAnEnum?): JniAnEnum?
  /** Returns the passed enum to test serialization and deserialization. */
  fun echoAnotherNullableEnum(anotherEnum: JniAnotherEnum?): JniAnotherEnum?
}
