// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:io' show Platform;
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:ffi/ffi.dart';
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:jni/jni.dart';
import 'package:objective_c/objective_c.dart';
import './ni_tests.gen.ffi.dart' as ffi_bridge;
import './ni_tests.gen.jni.dart' as jni_bridge;

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
            .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    final Iterable<Object?> keys = (a as Map<Object?, Object?>).keys;
    return a.length == b.length &&
        keys.every((Object? key) =>
            (b as Map<Object?, Object?>).containsKey(key) &&
            _deepEquals(a[key], b[key]));
  }
  return a == b;
}

class _PigeonJniCodec {
  static Object? readValue(JObject? value) {
    if (value == null) {
      return null;
    } else if (value.isA<JLong>(JLong.type)) {
      return (value.as(JLong.type)).longValue();
    } else if (value.isA<JDouble>(JDouble.type)) {
      return (value.as(JDouble.type)).doubleValue();
    } else if (value.isA<JString>(JString.type)) {
      return (value.as(JString.type)).toDartString();
    } else if (value.isA<JBoolean>(JBoolean.type)) {
      return (value.as(JBoolean.type)).booleanValue();
    } else if (value.isA<JByteArray>(JByteArray.type)) {
      final Uint8List list = Uint8List(value.as(JByteArray.type).length);
      for (int i = 0; i < value.as(JByteArray.type).length; i++) {
        list[i] = value.as(JByteArray.type)[i];
      }
      return list;
    } else if (value.isA<JIntArray>(JIntArray.type)) {
      final Int32List list = Int32List(value.as(JIntArray.type).length);
      for (int i = 0; i < value.as(JIntArray.type).length; i++) {
        list[i] = value.as(JIntArray.type)[i];
      }
      return list;
    } else if (value.isA<JLongArray>(JLongArray.type)) {
      final Int64List list = Int64List(value.as(JLongArray.type).length);
      for (int i = 0; i < value.as(JLongArray.type).length; i++) {
        list[i] = value.as(JLongArray.type)[i];
      }
      return list;
    } else if (value.isA<JDoubleArray>(JDoubleArray.type)) {
      final Float64List list = Float64List(value.as(JDoubleArray.type).length);
      for (int i = 0; i < value.as(JDoubleArray.type).length; i++) {
        list[i] = value.as(JDoubleArray.type)[i];
      }
      return list;
    } else if (value.isA<JList<JObject>>(JList.type<JObject>(JObject.type))) {
      final JList<JObject?> list =
          (value.as(JList.type<JObject?>(JObject.nullableType)));
      final List<Object?> res = <Object?>[];
      for (int i = 0; i < list.length; i++) {
        res.add(readValue(list[i]));
      }
      return res;
    } else if (value.isA<JMap<JObject, JObject>>(
        JMap.type<JObject, JObject>(JObject.type, JObject.type))) {
      final JMap<JObject?, JObject?> map = (value.as(
          JMap.type<JObject?, JObject?>(
              JObject.nullableType, JObject.nullableType)));
      final Map<Object?, Object?> res = <Object?, Object?>{};
      for (final MapEntry<JObject?, JObject?> entry in map.entries) {
        res[readValue(entry.key)] = readValue(entry.value);
      }
      return res;
      // } else if (value.isA<jni_bridge.NIAllTypes>(
      //     jni_bridge.NIAllTypes.type)) {
      //   return NIAllTypes.fromJni(value.as(jni_bridge.NIAllTypes.type));
      // } else if (value.isA<jni_bridge.NIAllNullableTypesWithoutRecursion>(
      //     jni_bridge.NIAllNullableTypesWithoutRecursion.type)) {
      //   return NIAllNullableTypesWithoutRecursion.fromJni(value.as(jni_bridge.NIAllNullableTypesWithoutRecursion.type));
      // } else if (value.isA<jni_bridge.NIAllClassesWrapper>(
      //     jni_bridge.NIAllClassesWrapper.type)) {
      //   return NIAllClassesWrapper.fromJni(value.as(jni_bridge.NIAllClassesWrapper.type));
    } else if (value.isA<jni_bridge.NIAnEnum>(jni_bridge.NIAnEnum.type)) {
      return NIAnEnum.fromJni(value.as(jni_bridge.NIAnEnum.type));
    } else if (value
        .isA<jni_bridge.NIAnotherEnum>(jni_bridge.NIAnotherEnum.type)) {
      return NIAnotherEnum.fromJni(value.as(jni_bridge.NIAnotherEnum.type));
    } else {
      throw ArgumentError.value(value);
    }
  }

  static T writeValue<T extends JObject?>(Object? value) {
    if (value == null) {
      return null as T;
    } else if (value is bool) {
      return JBoolean(value) as T;
    } else if (value is double) {
      return JDouble(value) as T;
      // ignore: avoid_double_and_int_checks
    } else if (value is int) {
      return JLong(value) as T;
    } else if (value is String) {
      return JString.fromString(value) as T;
    } else if (isTypeOrNullableType<JByteArray>(T)) {
      value as List<int>;
      final JByteArray array = JByteArray(value.length);
      for (int i = 0; i < value.length; i++) {
        array[i] = value[i];
      }
      return array as T;
    } else if (isTypeOrNullableType<JIntArray>(T)) {
      value as List<int>;
      final JIntArray array = JIntArray(value.length);
      for (int i = 0; i < value.length; i++) {
        array[i] = value[i];
      }
      return array as T;
    } else if (isTypeOrNullableType<JLongArray>(T)) {
      value as List<int>;
      final JLongArray array = JLongArray(value.length);
      for (int i = 0; i < value.length; i++) {
        array[i] = value[i];
      }
      return array as T;
    } else if (isTypeOrNullableType<JDoubleArray>(T)) {
      value as List<double>;
      final JDoubleArray array = JDoubleArray(value.length);
      for (int i = 0; i < value.length; i++) {
        array[i] = value[i];
      }
      return array as T;
    } else if (value is List<Object>) {
      final JList<JObject> res = JList<JObject>.array(JObject.type);
      for (int i = 0; i < value.length; i++) {
        res.add(writeValue(value[i]));
      }
      return res as T;
    } else if (value is List) {
      final JList<JObject?> res = JList<JObject?>.array(JObject.nullableType);
      for (int i = 0; i < value.length; i++) {
        res.add(writeValue(value[i]));
      }
      return res as T;
    } else if (value is Map<Object, Object>) {
      final JMap<JObject, JObject> res =
          JMap<JObject, JObject>.hash(JObject.type, JObject.type);
      for (final MapEntry<Object, Object> entry in value.entries) {
        res[writeValue(entry.key)] = writeValue(entry.value);
      }
      return res as T;
    } else if (value is Map<Object, Object?>) {
      final JMap<JObject, JObject?> res =
          JMap<JObject, JObject?>.hash(JObject.type, JObject.nullableType);
      for (final MapEntry<Object, Object?> entry in value.entries) {
        res[writeValue(entry.key)] = writeValue(entry.value);
      }
      return res as T;
    } else if (value is Map) {
      final JMap<JObject, JObject?> res =
          JMap<JObject, JObject?>.hash(JObject.type, JObject.nullableType);
      for (final MapEntry<Object?, Object?> entry in value.entries) {
        res[writeValue(entry.key)] = writeValue(entry.value);
      }
      return res as T;
      // } else if (value is NIAllTypes) {
      //   return value.toJni() as T;
      // } else if (value is NIAllNullableTypesWithoutRecursion) {
      //   return value.toJni() as T;
      // } else if (value is NIAllClassesWrapper) {
      //   return value.toJni() as T;
    } else if (value is NIAnEnum) {
      return value.toJni() as T;
    } else if (value is NIAnotherEnum) {
      return value.toJni() as T;
    } else {
      throw ArgumentError.value(value);
    }
  }
}

class _PigeonFfiCodec {
  static Object? readValue(ObjCObjectBase? value, [Type? outType]) {
    if (value == null || ffi_bridge.PigeonInternalNull.isInstance(value)) {
      return null;
    } else if (NSNumber.isInstance(value)) {
      value as NSNumber;
      switch (outType) {
        case const (int):
          return value.longValue;
        case const (double):
          return value.doubleValue;
        case const (bool):
          return value.boolValue;
        case const (NIAnEnum):
          return NIAnEnum.fromNSNumber(value);
        case const (NIAnotherEnum):
          return NIAnotherEnum.fromNSNumber(value);
        default:
          throw ArgumentError.value(value);
      }
    } else if (NSString.isInstance(value)) {
      return (NSString.castFrom(value)).toDartString();
      // } else if (value.isA<NSByteArray>(NSByteArray.type)) {
      //   final Uint8List list = Uint8List(value.as(NSByteArray.type).length);
      //   for (int i = 0; i < value.as(NSByteArray.type).length; i++) {
      //     list[i] = value.as(NSByteArray.type)[i];
      //   }
      //   return list;
      // } else if (value.isA<NSIntArray>(NSIntArray.type)) {
      //   final Int32List list = Int32List(value.as(NSIntArray.type).length);
      //   for (int i = 0; i < value.as(NSIntArray.type).length; i++) {
      //     list[i] = value.as(NSIntArray.type)[i];
      //   }
      //   return list;
      // } else if (value.isA<NSLongArray>(NSLongArray.type)) {
      //   final Int64List list = Int64List(value.as(NSLongArray.type).length);
      //   for (int i = 0; i < value.as(NSLongArray.type).length; i++) {
      //     list[i] = value.as(NSLongArray.type)[i];
      //   }
      //   return list;
      // } else if (value.isA<NSDoubleArray>(NSDoubleArray.type)) {
      //   final Float64List list = Float64List(value.as(NSDoubleArray.type).length);
      //   for (int i = 0; i < value.as(NSDoubleArray.type).length; i++) {
      //     list[i] = value.as(NSDoubleArray.type)[i];
      //   }
      //   return list;
    } else if (value is NSArray) {
      final List<Object?> res = <Object?>[];
      for (int i = 0; i < value.length; i++) {
        res.add(readValue(value[i]));
      }
      return res;
    } else if (value is NSDictionary) {
      final Map<Object?, Object?> res = <Object?, Object?>{};
      for (final MapEntry<NSCopying?, ObjCObjectBase?> entry in value.entries) {
        res[readValue(entry.key)] = readValue(entry.value);
      }
      return res;
    } else if (ffi_bridge.NumberWrapper.isInstance(value)) {
      return convertNumberWrapperToDart(
          ffi_bridge.NumberWrapper.castFrom(value));
    } else if (ffi_bridge.NIAllTypesBridge.isInstance(value)) {
      return NIAllTypes.fromFfi(ffi_bridge.NIAllTypesBridge.castFrom(value));
    } else if (ffi_bridge.NIAllNullableTypesWithoutRecursionBridge.isInstance(
        value)) {
      return NIAllNullableTypesWithoutRecursion.fromFfi(
          ffi_bridge.NIAllNullableTypesWithoutRecursionBridge.castFrom(value));
    } else if (ffi_bridge.NIAllClassesWrapperBridge.isInstance(value)) {
      return NIAllClassesWrapper.fromFfi(
          ffi_bridge.NIAllClassesWrapperBridge.castFrom(value));

      // ignore: unnecessary_type_check
    } else if (value is ObjCObjectBase) {
      return null;
    } else {
      throw ArgumentError.value(value);
    }
  }

  static T writeValue<T extends ObjCObjectBase?>(Object? value) {
    if (value == null) {
      final String tString = T.toString();
      if (tString.contains('ObjCObjectBase') || tString.contains('NSObject')) {
        return ffi_bridge.PigeonInternalNull() as T;
      }
      return null as T;
    } else if (value is bool ||
        value is double ||
        value is int ||
        value is Enum) {
      if (T != NSNumber && T.toString() != 'NSNumber?') {
        return convertNumberWrapperToFfi(value) as T;
      }
      if (value is bool) {
        return NSNumber.alloc().initWithLong(value ? 1 : 0) as T;
      }
      if (value is double) {
        return NSNumber.alloc().initWithDouble(value) as T;
      }
      if (value is int) {
        return NSNumber.alloc().initWithLong(value) as T;
      }
      if (value is Enum) {
        return NSNumber.alloc().initWithLong(value.index) as T;
      }
      return convertNumberWrapperToFfi(value) as T;
    } else if (value is String) {
      return NSString(value) as T;
      // } else if (isTypeOrNullableType<NSByteArray>(T)) {
      //   value as List<int>;
      //   final NSByteArray array = NSByteArray(value.length);
      //   for (int i = 0; i < value.length; i++) {
      //     array[i] = value[i];
      //   }
      //   return array as T;
      // } else if (isTypeOrNullableType<NSIntArray>(T)) {
      //   value as List<int>;
      //   final NSIntArray array = NSIntArray(value.length);
      //   for (int i = 0; i < value.length; i++) {
      //     array[i] = value[i];
      //   }
      //   return array as T;
      // } else if (isTypeOrNullableType<NSLongArray>(T)) {
      //   value as List<int>;
      //   final NSLongArray array = NSLongArray(value.length);
      //   for (int i = 0; i < value.length; i++) {
      //     array[i] = value[i];
      //   }
      //   return array as T;
      // } else if (isTypeOrNullableType<NSDoubleArray>(T)) {
      //   value as List<double>;
      //   final NSDoubleArray array = NSDoubleArray(value.length);
      //   for (int i = 0; i < value.length; i++) {
      //     array[i] = value[i];
      //   }
      //   return array as T;
    } else if (value is List) {
      final NSMutableArray res = NSMutableArray();
      for (int i = 0; i < value.length; i++) {
        res.add(writeValue(value[i]));
      }
      return res as T;
    } else if (value is Map) {
      final NSMutableDictionary res = NSMutableDictionary();
      for (final MapEntry<Object?, Object?> entry in value.entries) {
        NSMutableDictionary$Methods(res).setObject(writeValue(entry.value),
            forKey: NSCopying.castFrom(writeValue(entry.key)));
      }
      return res as T;
    } else if (value is NIAllTypes) {
      return value.toFfi() as T;
    } else if (value is NIAllNullableTypesWithoutRecursion) {
      return value.toFfi() as T;
    } else if (value is NIAllClassesWrapper) {
      return value.toFfi() as T;
    } else {
      throw ArgumentError.value(value);
    }
  }
}

Object? convertNumberWrapperToDart(ffi_bridge.NumberWrapper value) {
  switch (value.type) {
    case 1:
      return value.number.longValue;
    case 2:
      return value.number.doubleValue;
    case 3:
      return value.number.boolValue;
    case 4:
      return NIAnEnum.fromNSNumber(value.number);
    case 5:
      return NIAnotherEnum.fromNSNumber(value.number);
    default:
      throw ArgumentError.value(value);
  }
}

ffi_bridge.NumberWrapper convertNumberWrapperToFfi(Object value) {
  switch (value) {
    case int _:
      return ffi_bridge.NumberWrapper.alloc()
          .initWithNumber(NSNumber.alloc().initWithLong(value), type: 1);
    case double _:
      return ffi_bridge.NumberWrapper.alloc()
          .initWithNumber(NSNumber.alloc().initWithDouble(value), type: 2);
    case bool _:
      return ffi_bridge.NumberWrapper.alloc().initWithNumber(
          NSNumber.alloc().initWithLong(value ? 1 : 0),
          type: 3);
    case NIAnEnum _:
      return ffi_bridge.NumberWrapper.alloc()
          .initWithNumber(value.toNSNumber(), type: 4);
    case NIAnotherEnum _:
      return ffi_bridge.NumberWrapper.alloc()
          .initWithNumber(value.toNSNumber(), type: 5);
    default:
      throw ArgumentError.value(value);
  }
}

bool isType<T>(Type t) => T == t;
bool isTypeOrNullableType<T>(Type t) => isType<T>(t) || isType<T?>(t);
void _throwNoInstanceError(String channelName) {
  String nameString = 'named $channelName';
  if (channelName == defaultInstanceName) {
    nameString = 'with no name';
  }
  final String error = 'No instance $nameString has been registered.';
  throw ArgumentError(error);
}

enum NIAnEnum {
  one,
  two,
  three,
  fortyTwo,
  fourHundredTwentyTwo;

  jni_bridge.NIAnEnum toJni() {
    return jni_bridge.NIAnEnum.Companion.ofRaw(index)!;
  }

  static NIAnEnum? fromJni(jni_bridge.NIAnEnum? jniEnum) {
    return jniEnum == null ? null : NIAnEnum.values[jniEnum.getRaw()];
  }

  NSNumber toFfi() {
    return _PigeonFfiCodec.writeValue<NSNumber>(index);
  }

  NSNumber toNSNumber() {
    return NSNumber.alloc().initWithLong(index);
  }

  static NIAnEnum? fromNSNumber(NSNumber? ffiEnum) {
    return ffiEnum == null ? null : NIAnEnum.values[ffiEnum.intValue];
  }
}

enum NIAnotherEnum {
  justInCase;

  jni_bridge.NIAnotherEnum toJni() {
    return jni_bridge.NIAnotherEnum.Companion.ofRaw(index)!;
  }

  static NIAnotherEnum? fromJni(jni_bridge.NIAnotherEnum? jniEnum) {
    return jniEnum == null ? null : NIAnotherEnum.values[jniEnum.getRaw()];
  }

  NSNumber toFfi() {
    return _PigeonFfiCodec.writeValue<NSNumber>(index);
  }

  NSNumber toNSNumber() {
    return NSNumber.alloc().initWithLong(index);
  }

  static NIAnotherEnum? fromNSNumber(NSNumber? ffiEnum) {
    return ffiEnum == null ? null : NIAnotherEnum.values[ffiEnum.intValue];
  }
}

/// A class containing all supported types.
class NIAllTypes {
  NIAllTypes({
    this.aBool = false,
    this.anInt = 0,
    this.anInt64 = 0,
    this.aDouble = 0,
    this.anEnum = NIAnEnum.one,
    this.anotherEnum = NIAnotherEnum.justInCase,
    this.aString = '',
    this.anObject = 0,
    required this.list,
    required this.map,
  });

  bool aBool;

  int anInt;

  int anInt64;

  double aDouble;

  NIAnEnum anEnum;

  NIAnotherEnum anotherEnum;

  String aString;

  Object anObject;

  List<Object?> list;

  Map<Object?, Object?> map;

  List<Object?> _toList() {
    return <Object?>[
      aBool,
      anInt,
      anInt64,
      aDouble,
      anEnum,
      anotherEnum,
      aString,
      anObject,
      list,
      map,
    ];
  }

  ffi_bridge.NIAllTypesBridge toFfi() {
    return ffi_bridge.NIAllTypesBridge.alloc().initWithABool(
      aBool,
      anInt: anInt,
      anInt64: anInt64,
      aDouble: aDouble,
      anEnum: ffi_bridge.NIAnEnum.values[anEnum.index],
      anotherEnum: ffi_bridge.NIAnotherEnum.values[anotherEnum.index],
      aString: _PigeonFfiCodec.writeValue<NSString>(aString),
      anObject: _PigeonFfiCodec.writeValue<NSObject>(anObject),
      list: _PigeonFfiCodec.writeValue<NSMutableArray>(list),
      map: _PigeonFfiCodec.writeValue<NSDictionary>(map),
    );
  }

  Object encode() {
    return _toList();
  }

  static NIAllTypes? fromFfi(ffi_bridge.NIAllTypesBridge? ffiClass) {
    return ffiClass == null
        ? null
        : NIAllTypes(
            aBool: ffiClass.aBool,
            anInt: ffiClass.anInt,
            anInt64: ffiClass.anInt64,
            aDouble: ffiClass.aDouble,
            anEnum: NIAnEnum.values[ffiClass.anEnum.index],
            anotherEnum: NIAnotherEnum.values[ffiClass.anotherEnum.index],
            aString: ffiClass.aString.toDartString(),
            anObject: _PigeonFfiCodec.readValue(ffiClass.anObject)!,
            list: (_PigeonFfiCodec.readValue(ffiClass.list)! as List<Object?>)
                .cast<Object?>(),
            map: (_PigeonFfiCodec.readValue(ffiClass.map)!
                    as Map<Object?, Object?>)
                .cast<Object?, Object?>(),
          );
  }

  static NIAllTypes decode(Object result) {
    result as List<Object?>;
    return NIAllTypes(
      aBool: result[0]! as bool,
      anInt: result[1]! as int,
      anInt64: result[2]! as int,
      aDouble: result[3]! as double,
      anEnum: result[4]! as NIAnEnum,
      anotherEnum: result[5]! as NIAnotherEnum,
      aString: result[6]! as String,
      anObject: result[7]!,
      list: result[8]! as List<Object?>,
      map: result[9]! as Map<Object?, Object?>,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NIAllTypes || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return aBool == other.aBool &&
        anInt == other.anInt &&
        anInt64 == other.anInt64 &&
        aDouble == other.aDouble &&
        anEnum == other.anEnum &&
        anotherEnum == other.anotherEnum &&
        aString == other.aString &&
        anObject == other.anObject &&
        _deepEquals(list, other.list) &&
        _deepEquals(map, other.map);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A class containing all supported nullable types.
/// The primary purpose for this class is to ensure coverage of Swift structs
/// with nullable items, as the primary [NIAllNullableTypes] class is being used to
/// test Swift classes.
class NIAllNullableTypesWithoutRecursion {
  NIAllNullableTypesWithoutRecursion({
    this.aNullableBool,
    this.aNullableInt,
    this.aNullableInt64,
    this.aNullableDouble,
    this.aNullableEnum,
    this.anotherNullableEnum,
    this.aNullableString,
    this.aNullableObject,
    this.list,
    this.map,
  });

  bool? aNullableBool;

  int? aNullableInt;

  int? aNullableInt64;

  double? aNullableDouble;

  NIAnEnum? aNullableEnum;

  NIAnotherEnum? anotherNullableEnum;

  String? aNullableString;

  Object? aNullableObject;

  List<Object?>? list;

  Map<Object?, Object?>? map;

  List<Object?> _toList() {
    return <Object?>[
      aNullableBool,
      aNullableInt,
      aNullableInt64,
      aNullableDouble,
      aNullableEnum,
      anotherNullableEnum,
      aNullableString,
      aNullableObject,
      list,
      map,
    ];
  }

  ffi_bridge.NIAllNullableTypesWithoutRecursionBridge toFfi() {
    return ffi_bridge.NIAllNullableTypesWithoutRecursionBridge.alloc()
        .initWithANullableBool(
      _PigeonFfiCodec.writeValue<NSNumber?>(aNullableBool),
      aNullableInt: _PigeonFfiCodec.writeValue<NSNumber?>(aNullableInt),
      aNullableInt64: _PigeonFfiCodec.writeValue<NSNumber?>(aNullableInt64),
      aNullableDouble: _PigeonFfiCodec.writeValue<NSNumber?>(aNullableDouble),
      aNullableEnum:
          _PigeonFfiCodec.writeValue<NSNumber?>(aNullableEnum?.index),
      anotherNullableEnum:
          _PigeonFfiCodec.writeValue<NSNumber?>(anotherNullableEnum?.index),
      aNullableString: _PigeonFfiCodec.writeValue<NSString?>(aNullableString),
      aNullableObject: _PigeonFfiCodec.writeValue<NSObject>(aNullableObject),
      list: _PigeonFfiCodec.writeValue<NSMutableArray?>(list),
      map: _PigeonFfiCodec.writeValue<NSDictionary?>(map),
    );
  }

  Object encode() {
    return _toList();
  }

  static NIAllNullableTypesWithoutRecursion? fromFfi(
      ffi_bridge.NIAllNullableTypesWithoutRecursionBridge? ffiClass) {
    return ffiClass == null
        ? null
        : NIAllNullableTypesWithoutRecursion(
            aNullableBool: ffiClass.aNullableBool?.boolValue,
            aNullableInt: ffiClass.aNullableInt?.longValue,
            aNullableInt64: ffiClass.aNullableInt64?.longValue,
            aNullableDouble: ffiClass.aNullableDouble?.doubleValue,
            aNullableEnum: ffiClass.aNullableEnum == null
                ? null
                : NIAnEnum.values[ffiClass.aNullableEnum!.longValue],
            anotherNullableEnum: ffiClass.anotherNullableEnum == null
                ? null
                : NIAnotherEnum.values[ffiClass.anotherNullableEnum!.longValue],
            aNullableString: ffiClass.aNullableString?.toDartString(),
            aNullableObject:
                _PigeonFfiCodec.readValue(ffiClass.aNullableObject),
            list: (_PigeonFfiCodec.readValue(ffiClass.list) as List<Object?>?)
                ?.cast<Object?>(),
            map: (_PigeonFfiCodec.readValue(ffiClass.map)
                    as Map<Object?, Object?>?)
                ?.cast<Object?, Object?>(),
          );
  }

  static NIAllNullableTypesWithoutRecursion decode(Object result) {
    result as List<Object?>;
    return NIAllNullableTypesWithoutRecursion(
      aNullableBool: result[0] as bool?,
      aNullableInt: result[1] as int?,
      aNullableInt64: result[2] as int?,
      aNullableDouble: result[3] as double?,
      aNullableEnum: result[4] as NIAnEnum?,
      anotherNullableEnum: result[5] as NIAnotherEnum?,
      aNullableString: result[6] as String?,
      aNullableObject: result[7],
      list: result[8] as List<Object?>?,
      map: result[9] as Map<Object?, Object?>?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NIAllNullableTypesWithoutRecursion ||
        other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return aNullableBool == other.aNullableBool &&
        aNullableInt == other.aNullableInt &&
        aNullableInt64 == other.aNullableInt64 &&
        aNullableDouble == other.aNullableDouble &&
        aNullableEnum == other.aNullableEnum &&
        anotherNullableEnum == other.anotherNullableEnum &&
        aNullableString == other.aNullableString &&
        aNullableObject == other.aNullableObject &&
        _deepEquals(list, other.list) &&
        _deepEquals(map, other.map);
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

/// A class for testing nested class handling.
///
/// This is needed to test nested nullable and non-nullable classes,
/// `NIAllNullableTypes` is non-nullable here as it is easier to instantiate
/// than `NIAllTypes` when testing doesn't require both (ie. testing null classes).
class NIAllClassesWrapper {
  NIAllClassesWrapper({
    this.allNullableTypesWithoutRecursion,
    this.allTypes,
  });

  NIAllNullableTypesWithoutRecursion? allNullableTypesWithoutRecursion;

  NIAllTypes? allTypes;

  List<Object?> _toList() {
    return <Object?>[
      allNullableTypesWithoutRecursion,
      allTypes,
    ];
  }

  ffi_bridge.NIAllClassesWrapperBridge toFfi() {
    return ffi_bridge.NIAllClassesWrapperBridge.alloc()
        .initWithAllNullableTypesWithoutRecursion(
      allNullableTypesWithoutRecursion == null
          ? null
          : allNullableTypesWithoutRecursion!.toFfi(),
      allTypes: allTypes == null ? null : allTypes!.toFfi(),
    );
  }

  Object encode() {
    return _toList();
  }

  static NIAllClassesWrapper? fromFfi(
      ffi_bridge.NIAllClassesWrapperBridge? ffiClass) {
    return ffiClass == null
        ? null
        : NIAllClassesWrapper(
            allNullableTypesWithoutRecursion:
                NIAllNullableTypesWithoutRecursion.fromFfi(
                    ffiClass.allNullableTypesWithoutRecursion),
            allTypes: NIAllTypes.fromFfi(ffiClass.allTypes),
          );
  }

  static NIAllClassesWrapper decode(Object result) {
    result as List<Object?>;
    return NIAllClassesWrapper(
      allNullableTypesWithoutRecursion:
          result[0] as NIAllNullableTypesWithoutRecursion?,
      allTypes: result[1] as NIAllTypes?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! NIAllClassesWrapper || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return allNullableTypesWithoutRecursion ==
            other.allNullableTypesWithoutRecursion &&
        allTypes == other.allTypes;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is NIAnEnum) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is NIAnotherEnum) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else if (value is NIAllTypes) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is NIAllNullableTypesWithoutRecursion) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is NIAllClassesWrapper) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NIAnEnum.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NIAnotherEnum.values[value];
      case 131:
        return NIAllTypes.decode(readValue(buffer)!);
      case 132:
        return NIAllNullableTypesWithoutRecursion.decode(readValue(buffer)!);
      case 133:
        return NIAllClassesWrapper.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const String defaultInstanceName =
    'PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u';

class NIHostIntegrationCoreApiForNativeInterop {
  NIHostIntegrationCoreApiForNativeInterop._withRegistrar(
      {jni_bridge.NIHostIntegrationCoreApiRegistrar? jniApi,
      ffi_bridge.NIHostIntegrationCoreApiSetup? ffiApi})
      : _jniApi = jniApi,
        _ffiApi = ffiApi;

  /// Returns instance of NIHostIntegrationCoreApiForNativeInterop with specified [channelName] if one has been registered.
  static NIHostIntegrationCoreApiForNativeInterop? getInstance(
      {String channelName = defaultInstanceName}) {
    late NIHostIntegrationCoreApiForNativeInterop res;
    if (Platform.isAndroid) {
      final jni_bridge.NIHostIntegrationCoreApiRegistrar? link =
          jni_bridge.NIHostIntegrationCoreApiRegistrar()
              .getInstance(JString.fromString(channelName));
      if (link == null) {
        _throwNoInstanceError(channelName);
      }
      res =
          NIHostIntegrationCoreApiForNativeInterop._withRegistrar(jniApi: link);
    } else if (Platform.isIOS || Platform.isMacOS) {
      final ffi_bridge.NIHostIntegrationCoreApiSetup? link =
          ffi_bridge.NIHostIntegrationCoreApiSetup.getInstanceWithName(
              NSString(channelName));
      if (link == null) {
        _throwNoInstanceError(channelName);
      }
      res =
          NIHostIntegrationCoreApiForNativeInterop._withRegistrar(ffiApi: link);
    }
    return res;
  }

  late final jni_bridge.NIHostIntegrationCoreApiRegistrar? _jniApi;
  late final ffi_bridge.NIHostIntegrationCoreApiSetup? _ffiApi;

  void noop() {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        _ffiApi.noopWithWrappedError(error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          return;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  NIAllTypes echoAllTypes(NIAllTypes everything) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final ffi_bridge.NIAllTypesBridge? res =
            _ffiApi.echoAllTypesWithEverything(everything.toFfi(),
                wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final NIAllTypes dartTypeRes = NIAllTypes.fromFfi(res)!;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  int echoInt(int anInt) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoIntWithAnInt(
            _PigeonFfiCodec.writeValue<NSNumber>(anInt),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final int dartTypeRes = res!.longValue;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  double echoDouble(double aDouble) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoDoubleWithADouble(
            _PigeonFfiCodec.writeValue<NSNumber>(aDouble),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final double dartTypeRes = res!.doubleValue;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  bool echoBool(bool aBool) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoBoolWithABool(
            _PigeonFfiCodec.writeValue<NSNumber>(aBool),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final bool dartTypeRes = res!.boolValue;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  String echoString(String aString) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSString? res = _ffiApi.echoStringWithAString(
            _PigeonFfiCodec.writeValue<NSString>(aString),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final String dartTypeRes = res!.toDartString();
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  Object echoObject(Object anObject) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final ObjCObjectBase? res = _ffiApi.echoObjectWithAnObject(
            _PigeonFfiCodec.writeValue<NSObject>(anObject),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final Object dartTypeRes = _PigeonFfiCodec.readValue(res)!;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  List<Object?> echoList(List<Object?> list) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSArray? res = _ffiApi.echoListWithList(
            _PigeonFfiCodec.writeValue<NSMutableArray>(list),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final List<Object?> dartTypeRes =
              (_PigeonFfiCodec.readValue(res)! as List<Object?>)
                  .cast<Object?>();
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  Map<Object?, Object?> echoMap(Map<Object?, Object?> map) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSDictionary? res = _ffiApi.echoMapWithMap(
            _PigeonFfiCodec.writeValue<NSDictionary>(map),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final Map<Object?, Object?> dartTypeRes =
              (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>)
                  .cast<Object?, Object?>();
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  NIAllClassesWrapper echoClassWrapper(NIAllClassesWrapper wrapper) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final ffi_bridge.NIAllClassesWrapperBridge? res = _ffiApi
            .echoClassWrapperWithWrapper(wrapper.toFfi(), wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final NIAllClassesWrapper dartTypeRes =
              NIAllClassesWrapper.fromFfi(res)!;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  NIAnEnum echoEnum(NIAnEnum anEnum) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoEnumWithAnEnum(
            ffi_bridge.NIAnEnum.values[anEnum.index],
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final NIAnEnum dartTypeRes =
              (_PigeonFfiCodec.readValue(res, NIAnEnum)! as NIAnEnum);
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  NIAnotherEnum echoAnotherEnum(NIAnotherEnum anotherEnum) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoAnotherEnumWithAnotherEnum(
            ffi_bridge.NIAnotherEnum.values[anotherEnum.index],
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final NIAnotherEnum dartTypeRes =
              (_PigeonFfiCodec.readValue(res, NIAnotherEnum)! as NIAnotherEnum);
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  NIAllNullableTypesWithoutRecursion? echoAllNullableTypesWithoutRecursion(
      NIAllNullableTypesWithoutRecursion? everything) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final ffi_bridge.NIAllNullableTypesWithoutRecursionBridge? res =
            _ffiApi.echoAllNullableTypesWithoutRecursionWithEverything(
                everything == null ? null : everything.toFfi(),
                wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final NIAllNullableTypesWithoutRecursion? dartTypeRes =
              NIAllNullableTypesWithoutRecursion.fromFfi(res);
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  NIAllNullableTypesWithoutRecursion sendMultipleNullableTypesWithoutRecursion(
      bool? aNullableBool, int? aNullableInt, String? aNullableString) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final ffi_bridge.NIAllNullableTypesWithoutRecursionBridge? res =
            _ffiApi.sendMultipleNullableTypesWithoutRecursionWithANullableBool(
                _PigeonFfiCodec.writeValue<NSNumber?>(aNullableBool),
                aNullableInt:
                    _PigeonFfiCodec.writeValue<NSNumber?>(aNullableInt),
                aNullableString:
                    _PigeonFfiCodec.writeValue<NSString?>(aNullableString),
                wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final NIAllNullableTypesWithoutRecursion dartTypeRes =
              NIAllNullableTypesWithoutRecursion.fromFfi(res)!;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  int? echoNullableInt(int? aNullableInt) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoNullableIntWithANullableInt(
            _PigeonFfiCodec.writeValue<NSNumber?>(aNullableInt),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final int? dartTypeRes = res?.longValue;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  double? echoNullableDouble(double? aNullableDouble) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoNullableDoubleWithANullableDouble(
            _PigeonFfiCodec.writeValue<NSNumber?>(aNullableDouble),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final double? dartTypeRes = res?.doubleValue;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  bool? echoNullableBool(bool? aNullableBool) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoNullableBoolWithANullableBool(
            _PigeonFfiCodec.writeValue<NSNumber?>(aNullableBool),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final bool? dartTypeRes = res?.boolValue;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  String? echoNullableString(String? aNullableString) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSString? res = _ffiApi.echoNullableStringWithANullableString(
            _PigeonFfiCodec.writeValue<NSString?>(aNullableString),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final String? dartTypeRes = res?.toDartString();
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  Object? echoNullableObject(Object? aNullableObject) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final ObjCObjectBase? res =
            _ffiApi.echoNullableObjectWithANullableObject(
                _PigeonFfiCodec.writeValue<NSObject>(aNullableObject),
                wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final Object? dartTypeRes = _PigeonFfiCodec.readValue(res);
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  List<Object?>? echoNullableList(List<Object?>? aNullableList) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSArray? res = _ffiApi.echoNullableListWithANullableList(
            _PigeonFfiCodec.writeValue<NSMutableArray?>(aNullableList),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final List<Object?>? dartTypeRes =
              (_PigeonFfiCodec.readValue(res) as List<Object?>?)
                  ?.cast<Object?>();
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  Map<Object?, Object?>? echoNullableMap(Map<Object?, Object?>? map) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSDictionary? res = _ffiApi.echoNullableMapWithMap(
            _PigeonFfiCodec.writeValue<NSDictionary?>(map),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final Map<Object?, Object?>? dartTypeRes =
              (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)
                  ?.cast<Object?, Object?>();
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  NIAnEnum? echoNullableEnum(NIAnEnum? anEnum) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoNullableEnumWithAnEnum(
            _PigeonFfiCodec.writeValue<NSNumber?>(anEnum),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final NIAnEnum? dartTypeRes =
              (_PigeonFfiCodec.readValue(res, NIAnEnum) as NIAnEnum?);
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  NIAnotherEnum? echoAnotherNullableEnum(NIAnotherEnum? anotherEnum) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.NiTestsError error = ffi_bridge.NiTestsError();
        final NSNumber? res = _ffiApi.echoAnotherNullableEnumWithAnotherEnum(
            _PigeonFfiCodec.writeValue<NSNumber?>(anotherEnum),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final NIAnotherEnum? dartTypeRes =
              (_PigeonFfiCodec.readValue(res, NIAnotherEnum) as NIAnotherEnum?);
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }
}

/// The core interface that each host language plugin must implement in
/// platform_test integration tests.
class NIHostIntegrationCoreApi {
  /// Constructor for [NIHostIntegrationCoreApi]. The [binaryMessenger] named argument is
  /// available for dependency injection. If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NIHostIntegrationCoreApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
    NIHostIntegrationCoreApiForNativeInterop? nativeInteropApi,
  })  : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '',
        _nativeInteropApi = nativeInteropApi;

  /// Creates an instance of [NIHostIntegrationCoreApi] that requests an instance of
  /// [NIHostIntegrationCoreApiForNativeInterop] from the host platform with a matching instance name
  /// to [messageChannelSuffix] or the default instance.
  ///
  /// Throws [ArgumentError] if no matching instance can be found.
  factory NIHostIntegrationCoreApi.createWithNativeInteropApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    NIHostIntegrationCoreApiForNativeInterop? nativeInteropApi;
    String nativeInteropApiInstanceName = '';
    if (Platform.isAndroid) {
      if (messageChannelSuffix.isEmpty) {
        nativeInteropApi =
            NIHostIntegrationCoreApiForNativeInterop.getInstance();
      } else {
        nativeInteropApiInstanceName = messageChannelSuffix;
        nativeInteropApi = NIHostIntegrationCoreApiForNativeInterop.getInstance(
            channelName: messageChannelSuffix);
      }
    }
    if (nativeInteropApi == null) {
      throw ArgumentError(
          'No NIHostIntegrationCoreApi instance with ${nativeInteropApiInstanceName.isEmpty ? 'no ' : ''} instance name ${nativeInteropApiInstanceName.isNotEmpty ? '"$nativeInteropApiInstanceName"' : ''} "$nativeInteropApiInstanceName "}found.');
    }
    return NIHostIntegrationCoreApi(
      binaryMessenger: binaryMessenger,
      messageChannelSuffix: messageChannelSuffix,
      nativeInteropApi: nativeInteropApi,
    );
  }

  final BinaryMessenger? pigeonVar_binaryMessenger;
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  final NIHostIntegrationCoreApiForNativeInterop? _nativeInteropApi;

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  Future<void> noop() async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.noop();
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.noop$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  /// Returns the passed object, to test serialization and deserialization.
  Future<NIAllTypes> echoAllTypes(NIAllTypes everything) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoAllTypes(everything);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAllTypes$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[everything]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NIAllTypes?)!;
    }
  }

  /// Returns passed in int.
  Future<int> echoInt(int anInt) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoInt(anInt);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoInt$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[anInt]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  /// Returns passed in double.
  Future<double> echoDouble(double aDouble) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoDouble(aDouble);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoDouble$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aDouble]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as double?)!;
    }
  }

  /// Returns the passed in boolean.
  Future<bool> echoBool(bool aBool) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoBool(aBool);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoBool$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aBool]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  /// Returns the passed in string.
  Future<String> echoString(String aString) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoString(aString);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoString$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aString]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  /// Returns the passed in generic Object.
  Future<Object> echoObject(Object anObject) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoObject(anObject);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoObject$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[anObject]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return pigeonVar_replyList[0]!;
    }
  }

  /// Returns the passed list, to test serialization and deserialization.
  Future<List<Object?>> echoList(List<Object?> list) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoList(list);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoList$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[list]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Object?>();
    }
  }

  /// Returns the passed map, to test serialization and deserialization.
  Future<Map<Object?, Object?>> echoMap(Map<Object?, Object?> map) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoMap(map);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoMap$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[map]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!
          .cast<Object?, Object?>();
    }
  }

  /// Returns the passed class to test nested class serialization and deserialization.
  Future<NIAllClassesWrapper> echoClassWrapper(
      NIAllClassesWrapper wrapper) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoClassWrapper(wrapper);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoClassWrapper$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[wrapper]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NIAllClassesWrapper?)!;
    }
  }

  /// Returns the passed enum to test serialization and deserialization.
  Future<NIAnEnum> echoEnum(NIAnEnum anEnum) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoEnum(anEnum);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoEnum$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[anEnum]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NIAnEnum?)!;
    }
  }

  /// Returns the passed enum to test serialization and deserialization.
  Future<NIAnotherEnum> echoAnotherEnum(NIAnotherEnum anotherEnum) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoAnotherEnum(anotherEnum);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAnotherEnum$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[anotherEnum]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NIAnotherEnum?)!;
    }
  }

  /// Returns the passed object, to test serialization and deserialization.
  /// Returns the passed object, to test serialization and deserialization.
  Future<NIAllNullableTypesWithoutRecursion?>
      echoAllNullableTypesWithoutRecursion(
          NIAllNullableTypesWithoutRecursion? everything) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoAllNullableTypesWithoutRecursion(everything);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAllNullableTypesWithoutRecursion$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[everything]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as NIAllNullableTypesWithoutRecursion?);
    }
  }

  Future<NIAllNullableTypesWithoutRecursion>
      sendMultipleNullableTypesWithoutRecursion(bool? aNullableBool,
          int? aNullableInt, String? aNullableString) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.sendMultipleNullableTypesWithoutRecursion(
          aNullableBool, aNullableInt, aNullableString);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.sendMultipleNullableTypesWithoutRecursion$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel
        .send(<Object?>[aNullableBool, aNullableInt, aNullableString]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NIAllNullableTypesWithoutRecursion?)!;
    }
  }

  /// Returns passed in int.
  Future<int?> echoNullableInt(int? aNullableInt) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoNullableInt(aNullableInt);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableInt$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aNullableInt]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as int?);
    }
  }

  /// Returns passed in double.
  Future<double?> echoNullableDouble(double? aNullableDouble) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoNullableDouble(aNullableDouble);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableDouble$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aNullableDouble]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as double?);
    }
  }

  /// Returns the passed in boolean.
  Future<bool?> echoNullableBool(bool? aNullableBool) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoNullableBool(aNullableBool);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableBool$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aNullableBool]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as bool?);
    }
  }

  /// Returns the passed in string.
  Future<String?> echoNullableString(String? aNullableString) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoNullableString(aNullableString);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableString$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aNullableString]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  /// Returns the passed in generic Object.
  Future<Object?> echoNullableObject(Object? aNullableObject) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoNullableObject(aNullableObject);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableObject$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aNullableObject]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return pigeonVar_replyList[0];
    }
  }

  /// Returns the passed list, to test serialization and deserialization.
  Future<List<Object?>?> echoNullableList(List<Object?>? aNullableList) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoNullableList(aNullableList);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableList$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aNullableList]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)?.cast<Object?>();
    }
  }

  /// Returns the passed map, to test serialization and deserialization.
  Future<Map<Object?, Object?>?> echoNullableMap(
      Map<Object?, Object?>? map) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoNullableMap(map);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableMap$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[map]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as Map<Object?, Object?>?)
          ?.cast<Object?, Object?>();
    }
  }

  Future<NIAnEnum?> echoNullableEnum(NIAnEnum? anEnum) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoNullableEnum(anEnum);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableEnum$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[anEnum]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as NIAnEnum?);
    }
  }

  Future<NIAnotherEnum?> echoAnotherNullableEnum(
      NIAnotherEnum? anotherEnum) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoAnotherNullableEnum(anotherEnum);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAnotherNullableEnum$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[anotherEnum]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as NIAnotherEnum?);
    }
  }
}
