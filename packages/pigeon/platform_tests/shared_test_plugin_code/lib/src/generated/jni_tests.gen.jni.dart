// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `JniMessageApi`
class JniMessageApi extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApi> $type;

  @jni$_.internal
  JniMessageApi.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'JniMessageApi');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniMessageApi$NullableType();
  static const type = $JniMessageApi$Type();
  static final _id_doNothing = _class.instanceMethodId(
    r'doNothing',
    r'()V',
  );

  static final _doNothing = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract void doNothing()`
  void doNothing() {
    _doNothing(reference.pointer, _id_doNothing as jni$_.JMethodIDPtr).check();
  }

  static final _id_echoString = _class.instanceMethodId(
    r'echoString',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _echoString = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.String echoString(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString echoString(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _echoString(reference.pointer, _id_echoString as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_echoInt = _class.instanceMethodId(
    r'echoInt',
    r'(J)J',
  );

  static final _echoInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract long echoInt(long j)`
  int echoInt(
    int j,
  ) {
    return _echoInt(reference.pointer, _id_echoInt as jni$_.JMethodIDPtr, j)
        .long;
  }

  static final _id_echoDouble = _class.instanceMethodId(
    r'echoDouble',
    r'(D)D',
  );

  static final _echoDouble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Double,)>)>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public abstract double echoDouble(double d)`
  double echoDouble(
    double d,
  ) {
    return _echoDouble(
            reference.pointer, _id_echoDouble as jni$_.JMethodIDPtr, d)
        .doubleFloat;
  }

  static final _id_echoBool = _class.instanceMethodId(
    r'echoBool',
    r'(Z)Z',
  );

  static final _echoBool = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public abstract boolean echoBool(boolean z)`
  bool echoBool(
    bool z,
  ) {
    return _echoBool(
            reference.pointer, _id_echoBool as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_sendSomeTypes = _class.instanceMethodId(
    r'sendSomeTypes',
    r'(LSomeTypes;)LSomeTypes;',
  );

  static final _sendSomeTypes = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract SomeTypes sendSomeTypes(SomeTypes someTypes)`
  /// The returned object must be released after use, by calling the [release] method.
  SomeTypes sendSomeTypes(
    SomeTypes someTypes,
  ) {
    final _$someTypes = someTypes.reference;
    return _sendSomeTypes(reference.pointer,
            _id_sendSomeTypes as jni$_.JMethodIDPtr, _$someTypes.pointer)
        .object<SomeTypes>(const $SomeTypes$Type());
  }
}

final class $JniMessageApi$NullableType extends jni$_.JObjType<JniMessageApi?> {
  @jni$_.internal
  const $JniMessageApi$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApi;';

  @jni$_.internal
  @core$_.override
  JniMessageApi? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : JniMessageApi.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApi?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApi$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApi$NullableType) &&
        other is $JniMessageApi$NullableType;
  }
}

final class $JniMessageApi$Type extends jni$_.JObjType<JniMessageApi> {
  @jni$_.internal
  const $JniMessageApi$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApi;';

  @jni$_.internal
  @core$_.override
  JniMessageApi fromReference(jni$_.JReference reference) =>
      JniMessageApi.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApi?> get nullableType =>
      const $JniMessageApi$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApi$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApi$Type) &&
        other is $JniMessageApi$Type;
  }
}

/// from: `JniMessageApiRegistrar`
class JniMessageApiRegistrar extends JniMessageApi {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApiRegistrar> $type;

  @jni$_.internal
  JniMessageApiRegistrar.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'JniMessageApiRegistrar');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniMessageApiRegistrar$NullableType();
  static const type = $JniMessageApiRegistrar$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory JniMessageApiRegistrar() {
    return JniMessageApiRegistrar.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getApi = _class.instanceMethodId(
    r'getApi',
    r'()LJniMessageApi;',
  );

  static final _getApi = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final JniMessageApi getApi()`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApi? getApi() {
    return _getApi(reference.pointer, _id_getApi as jni$_.JMethodIDPtr)
        .object<JniMessageApi?>(const $JniMessageApi$NullableType());
  }

  static final _id_setApi = _class.instanceMethodId(
    r'setApi',
    r'(LJniMessageApi;)V',
  );

  static final _setApi = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setApi(JniMessageApi jniMessageApi)`
  void setApi(
    JniMessageApi? jniMessageApi,
  ) {
    final _$jniMessageApi = jniMessageApi?.reference ?? jni$_.jNullReference;
    _setApi(reference.pointer, _id_setApi as jni$_.JMethodIDPtr,
            _$jniMessageApi.pointer)
        .check();
  }

  static final _id_register = _class.instanceMethodId(
    r'register',
    r'(LJniMessageApi;Ljava/lang/String;)LJniMessageApiRegistrar;',
  );

  static final _register = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiRegistrar register(JniMessageApi jniMessageApi, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiRegistrar register(
    JniMessageApi jniMessageApi,
    jni$_.JString string,
  ) {
    final _$jniMessageApi = jniMessageApi.reference;
    final _$string = string.reference;
    return _register(reference.pointer, _id_register as jni$_.JMethodIDPtr,
            _$jniMessageApi.pointer, _$string.pointer)
        .object<JniMessageApiRegistrar>(const $JniMessageApiRegistrar$Type());
  }

  static final _id_getInstance = _class.instanceMethodId(
    r'getInstance',
    r'(Ljava/lang/String;)LJniMessageApiRegistrar;',
  );

  static final _getInstance = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiRegistrar getInstance(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiRegistrar? getInstance(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _getInstance(reference.pointer,
            _id_getInstance as jni$_.JMethodIDPtr, _$string.pointer)
        .object<JniMessageApiRegistrar?>(
            const $JniMessageApiRegistrar$NullableType());
  }

  static final _id_doNothing = _class.instanceMethodId(
    r'doNothing',
    r'()V',
  );

  static final _doNothing = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JThrowablePtr Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void doNothing()`
  void doNothing() {
    _doNothing(reference.pointer, _id_doNothing as jni$_.JMethodIDPtr).check();
  }

  static final _id_echoString = _class.instanceMethodId(
    r'echoString',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _echoString = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String echoString(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString echoString(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _echoString(reference.pointer, _id_echoString as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_echoInt = _class.instanceMethodId(
    r'echoInt',
    r'(J)J',
  );

  static final _echoInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<(jni$_.Int64,)>)>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public long echoInt(long j)`
  int echoInt(
    int j,
  ) {
    return _echoInt(reference.pointer, _id_echoInt as jni$_.JMethodIDPtr, j)
        .long;
  }

  static final _id_echoDouble = _class.instanceMethodId(
    r'echoDouble',
    r'(D)D',
  );

  static final _echoDouble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Double,)>)>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, double)>();

  /// from: `public double echoDouble(double d)`
  double echoDouble(
    double d,
  ) {
    return _echoDouble(
            reference.pointer, _id_echoDouble as jni$_.JMethodIDPtr, d)
        .doubleFloat;
  }

  static final _id_echoBool = _class.instanceMethodId(
    r'echoBool',
    r'(Z)Z',
  );

  static final _echoBool = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_
                      .VarArgs<(jni$_.Int32,)>)>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>, jni$_.JMethodIDPtr, int)>();

  /// from: `public boolean echoBool(boolean z)`
  bool echoBool(
    bool z,
  ) {
    return _echoBool(
            reference.pointer, _id_echoBool as jni$_.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_sendSomeTypes = _class.instanceMethodId(
    r'sendSomeTypes',
    r'(LSomeTypes;)LSomeTypes;',
  );

  static final _sendSomeTypes = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public SomeTypes sendSomeTypes(SomeTypes someTypes)`
  /// The returned object must be released after use, by calling the [release] method.
  SomeTypes sendSomeTypes(
    SomeTypes someTypes,
  ) {
    final _$someTypes = someTypes.reference;
    return _sendSomeTypes(reference.pointer,
            _id_sendSomeTypes as jni$_.JMethodIDPtr, _$someTypes.pointer)
        .object<SomeTypes>(const $SomeTypes$Type());
  }
}

final class $JniMessageApiRegistrar$NullableType
    extends jni$_.JObjType<JniMessageApiRegistrar?> {
  @jni$_.internal
  const $JniMessageApiRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiRegistrar? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JniMessageApiRegistrar.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApi$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiRegistrar?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($JniMessageApiRegistrar$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiRegistrar$NullableType) &&
        other is $JniMessageApiRegistrar$NullableType;
  }
}

final class $JniMessageApiRegistrar$Type
    extends jni$_.JObjType<JniMessageApiRegistrar> {
  @jni$_.internal
  const $JniMessageApiRegistrar$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiRegistrar fromReference(jni$_.JReference reference) =>
      JniMessageApiRegistrar.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApi$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiRegistrar?> get nullableType =>
      const $JniMessageApiRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($JniMessageApiRegistrar$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiRegistrar$Type) &&
        other is $JniMessageApiRegistrar$Type;
  }
}

/// from: `JniMessageApiNullable`
class JniMessageApiNullable extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApiNullable> $type;

  @jni$_.internal
  JniMessageApiNullable.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'JniMessageApiNullable');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniMessageApiNullable$NullableType();
  static const type = $JniMessageApiNullable$Type();
  static final _id_echoString = _class.instanceMethodId(
    r'echoString',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _echoString = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.String echoString(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? echoString(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _echoString(reference.pointer, _id_echoString as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_echoInt = _class.instanceMethodId(
    r'echoInt',
    r'(Ljava/lang/Long;)Ljava/lang/Long;',
  );

  static final _echoInt = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Long echoInt(java.lang.Long long)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JLong? echoInt(
    jni$_.JLong? long,
  ) {
    final _$long = long?.reference ?? jni$_.jNullReference;
    return _echoInt(reference.pointer, _id_echoInt as jni$_.JMethodIDPtr,
            _$long.pointer)
        .object<jni$_.JLong?>(const jni$_.JLongNullableType());
  }

  static final _id_echoDouble = _class.instanceMethodId(
    r'echoDouble',
    r'(Ljava/lang/Double;)Ljava/lang/Double;',
  );

  static final _echoDouble = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Double echoDouble(java.lang.Double double)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JDouble? echoDouble(
    jni$_.JDouble? double,
  ) {
    final _$double = double?.reference ?? jni$_.jNullReference;
    return _echoDouble(reference.pointer, _id_echoDouble as jni$_.JMethodIDPtr,
            _$double.pointer)
        .object<jni$_.JDouble?>(const jni$_.JDoubleNullableType());
  }

  static final _id_echoBool = _class.instanceMethodId(
    r'echoBool',
    r'(Ljava/lang/Boolean;)Ljava/lang/Boolean;',
  );

  static final _echoBool = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Boolean echoBool(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JBoolean? echoBool(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _echoBool(reference.pointer, _id_echoBool as jni$_.JMethodIDPtr,
            _$boolean.pointer)
        .object<jni$_.JBoolean?>(const jni$_.JBooleanNullableType());
  }

  static final _id_sendSomeNullableTypes = _class.instanceMethodId(
    r'sendSomeNullableTypes',
    r'(LSomeNullableTypes;)LSomeNullableTypes;',
  );

  static final _sendSomeNullableTypes = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract SomeNullableTypes sendSomeNullableTypes(SomeNullableTypes someNullableTypes)`
  /// The returned object must be released after use, by calling the [release] method.
  SomeNullableTypes? sendSomeNullableTypes(
    SomeNullableTypes? someNullableTypes,
  ) {
    final _$someNullableTypes =
        someNullableTypes?.reference ?? jni$_.jNullReference;
    return _sendSomeNullableTypes(
            reference.pointer,
            _id_sendSomeNullableTypes as jni$_.JMethodIDPtr,
            _$someNullableTypes.pointer)
        .object<SomeNullableTypes?>(const $SomeNullableTypes$NullableType());
  }
}

final class $JniMessageApiNullable$NullableType
    extends jni$_.JObjType<JniMessageApiNullable?> {
  @jni$_.internal
  const $JniMessageApiNullable$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiNullable;';

  @jni$_.internal
  @core$_.override
  JniMessageApiNullable? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JniMessageApiNullable.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiNullable?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApiNullable$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiNullable$NullableType) &&
        other is $JniMessageApiNullable$NullableType;
  }
}

final class $JniMessageApiNullable$Type
    extends jni$_.JObjType<JniMessageApiNullable> {
  @jni$_.internal
  const $JniMessageApiNullable$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiNullable;';

  @jni$_.internal
  @core$_.override
  JniMessageApiNullable fromReference(jni$_.JReference reference) =>
      JniMessageApiNullable.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiNullable?> get nullableType =>
      const $JniMessageApiNullable$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApiNullable$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiNullable$Type) &&
        other is $JniMessageApiNullable$Type;
  }
}

/// from: `JniMessageApiNullableRegistrar`
class JniMessageApiNullableRegistrar extends JniMessageApiNullable {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApiNullableRegistrar> $type;

  @jni$_.internal
  JniMessageApiNullableRegistrar.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'JniMessageApiNullableRegistrar');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniMessageApiNullableRegistrar$NullableType();
  static const type = $JniMessageApiNullableRegistrar$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory JniMessageApiNullableRegistrar() {
    return JniMessageApiNullableRegistrar.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getApi = _class.instanceMethodId(
    r'getApi',
    r'()LJniMessageApiNullable;',
  );

  static final _getApi = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final JniMessageApiNullable getApi()`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiNullable? getApi() {
    return _getApi(reference.pointer, _id_getApi as jni$_.JMethodIDPtr)
        .object<JniMessageApiNullable?>(
            const $JniMessageApiNullable$NullableType());
  }

  static final _id_setApi = _class.instanceMethodId(
    r'setApi',
    r'(LJniMessageApiNullable;)V',
  );

  static final _setApi = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setApi(JniMessageApiNullable jniMessageApiNullable)`
  void setApi(
    JniMessageApiNullable? jniMessageApiNullable,
  ) {
    final _$jniMessageApiNullable =
        jniMessageApiNullable?.reference ?? jni$_.jNullReference;
    _setApi(reference.pointer, _id_setApi as jni$_.JMethodIDPtr,
            _$jniMessageApiNullable.pointer)
        .check();
  }

  static final _id_register = _class.instanceMethodId(
    r'register',
    r'(LJniMessageApiNullable;Ljava/lang/String;)LJniMessageApiNullableRegistrar;',
  );

  static final _register = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiNullableRegistrar register(JniMessageApiNullable jniMessageApiNullable, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiNullableRegistrar register(
    JniMessageApiNullable jniMessageApiNullable,
    jni$_.JString string,
  ) {
    final _$jniMessageApiNullable = jniMessageApiNullable.reference;
    final _$string = string.reference;
    return _register(reference.pointer, _id_register as jni$_.JMethodIDPtr,
            _$jniMessageApiNullable.pointer, _$string.pointer)
        .object<JniMessageApiNullableRegistrar>(
            const $JniMessageApiNullableRegistrar$Type());
  }

  static final _id_getInstance = _class.instanceMethodId(
    r'getInstance',
    r'(Ljava/lang/String;)LJniMessageApiNullableRegistrar;',
  );

  static final _getInstance = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiNullableRegistrar getInstance(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiNullableRegistrar? getInstance(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _getInstance(reference.pointer,
            _id_getInstance as jni$_.JMethodIDPtr, _$string.pointer)
        .object<JniMessageApiNullableRegistrar?>(
            const $JniMessageApiNullableRegistrar$NullableType());
  }

  static final _id_echoString = _class.instanceMethodId(
    r'echoString',
    r'(Ljava/lang/String;)Ljava/lang/String;',
  );

  static final _echoString = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.String echoString(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? echoString(
    jni$_.JString? string,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    return _echoString(reference.pointer, _id_echoString as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_echoInt = _class.instanceMethodId(
    r'echoInt',
    r'(Ljava/lang/Long;)Ljava/lang/Long;',
  );

  static final _echoInt = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Long echoInt(java.lang.Long long)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JLong? echoInt(
    jni$_.JLong? long,
  ) {
    final _$long = long?.reference ?? jni$_.jNullReference;
    return _echoInt(reference.pointer, _id_echoInt as jni$_.JMethodIDPtr,
            _$long.pointer)
        .object<jni$_.JLong?>(const jni$_.JLongNullableType());
  }

  static final _id_echoDouble = _class.instanceMethodId(
    r'echoDouble',
    r'(Ljava/lang/Double;)Ljava/lang/Double;',
  );

  static final _echoDouble = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Double echoDouble(java.lang.Double double)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JDouble? echoDouble(
    jni$_.JDouble? double,
  ) {
    final _$double = double?.reference ?? jni$_.jNullReference;
    return _echoDouble(reference.pointer, _id_echoDouble as jni$_.JMethodIDPtr,
            _$double.pointer)
        .object<jni$_.JDouble?>(const jni$_.JDoubleNullableType());
  }

  static final _id_echoBool = _class.instanceMethodId(
    r'echoBool',
    r'(Ljava/lang/Boolean;)Ljava/lang/Boolean;',
  );

  static final _echoBool = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Boolean echoBool(java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JBoolean? echoBool(
    jni$_.JBoolean? boolean,
  ) {
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _echoBool(reference.pointer, _id_echoBool as jni$_.JMethodIDPtr,
            _$boolean.pointer)
        .object<jni$_.JBoolean?>(const jni$_.JBooleanNullableType());
  }

  static final _id_sendSomeNullableTypes = _class.instanceMethodId(
    r'sendSomeNullableTypes',
    r'(LSomeNullableTypes;)LSomeNullableTypes;',
  );

  static final _sendSomeNullableTypes = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public SomeNullableTypes sendSomeNullableTypes(SomeNullableTypes someNullableTypes)`
  /// The returned object must be released after use, by calling the [release] method.
  SomeNullableTypes? sendSomeNullableTypes(
    SomeNullableTypes? someNullableTypes,
  ) {
    final _$someNullableTypes =
        someNullableTypes?.reference ?? jni$_.jNullReference;
    return _sendSomeNullableTypes(
            reference.pointer,
            _id_sendSomeNullableTypes as jni$_.JMethodIDPtr,
            _$someNullableTypes.pointer)
        .object<SomeNullableTypes?>(const $SomeNullableTypes$NullableType());
  }
}

final class $JniMessageApiNullableRegistrar$NullableType
    extends jni$_.JObjType<JniMessageApiNullableRegistrar?> {
  @jni$_.internal
  const $JniMessageApiNullableRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiNullableRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiNullableRegistrar? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JniMessageApiNullableRegistrar.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApiNullable$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiNullableRegistrar?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($JniMessageApiNullableRegistrar$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($JniMessageApiNullableRegistrar$NullableType) &&
        other is $JniMessageApiNullableRegistrar$NullableType;
  }
}

final class $JniMessageApiNullableRegistrar$Type
    extends jni$_.JObjType<JniMessageApiNullableRegistrar> {
  @jni$_.internal
  const $JniMessageApiNullableRegistrar$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiNullableRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiNullableRegistrar fromReference(jni$_.JReference reference) =>
      JniMessageApiNullableRegistrar.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApiNullable$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiNullableRegistrar?> get nullableType =>
      const $JniMessageApiNullableRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($JniMessageApiNullableRegistrar$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiNullableRegistrar$Type) &&
        other is $JniMessageApiNullableRegistrar$Type;
  }
}

/// from: `JniMessageApiAsync`
class JniMessageApiAsync extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApiAsync> $type;

  @jni$_.internal
  JniMessageApiAsync.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'JniMessageApiAsync');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniMessageApiAsync$NullableType();
  static const type = $JniMessageApiAsync$Type();
  static final _id_doNothing = _class.instanceMethodId(
    r'doNothing',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _doNothing = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object doNothing(kotlin.coroutines.Continuation<? super kotlin.Unit> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> doNothing() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _doNothing(reference.pointer,
            _id_doNothing as jni$_.JMethodIDPtr, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JObject>(
      const jni$_.JObjectType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoString = _class.instanceMethodId(
    r'echoString',
    r'(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object echoString(java.lang.String string, kotlin.coroutines.Continuation<? super java.lang.String> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JString> echoString(
    jni$_.JString string,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$string = string.reference;
    final $r = _echoString(
            reference.pointer,
            _id_echoString as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JString>(
      const jni$_.JStringType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoInt = _class.instanceMethodId(
    r'echoInt',
    r'(JLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoInt = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object echoInt(long j, kotlin.coroutines.Continuation<? super java.lang.Long> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JLong> echoInt(
    int j,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _echoInt(reference.pointer, _id_echoInt as jni$_.JMethodIDPtr, j,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JLong>(
      const jni$_.JLongType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoDouble = _class.instanceMethodId(
    r'echoDouble',
    r'(DLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoDouble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object echoDouble(double d, kotlin.coroutines.Continuation<? super java.lang.Double> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JDouble> echoDouble(
    double d,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _echoDouble(reference.pointer,
            _id_echoDouble as jni$_.JMethodIDPtr, d, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JDouble>(
      const jni$_.JDoubleType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoBool = _class.instanceMethodId(
    r'echoBool',
    r'(ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoBool = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object echoBool(boolean z, kotlin.coroutines.Continuation<? super java.lang.Boolean> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JBoolean> echoBool(
    bool z,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _echoBool(reference.pointer, _id_echoBool as jni$_.JMethodIDPtr,
            z ? 1 : 0, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JBoolean>(
      const jni$_.JBooleanType(),
      releaseOriginal: true,
    );
  }

  static final _id_sendSomeTypes = _class.instanceMethodId(
    r'sendSomeTypes',
    r'(LSomeTypes;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _sendSomeTypes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object sendSomeTypes(SomeTypes someTypes, kotlin.coroutines.Continuation<? super SomeTypes> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<SomeTypes> sendSomeTypes(
    SomeTypes someTypes,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$someTypes = someTypes.reference;
    final $r = _sendSomeTypes(
            reference.pointer,
            _id_sendSomeTypes as jni$_.JMethodIDPtr,
            _$someTypes.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<SomeTypes>(
      const $SomeTypes$Type(),
      releaseOriginal: true,
    );
  }
}

final class $JniMessageApiAsync$NullableType
    extends jni$_.JObjType<JniMessageApiAsync?> {
  @jni$_.internal
  const $JniMessageApiAsync$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiAsync;';

  @jni$_.internal
  @core$_.override
  JniMessageApiAsync? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JniMessageApiAsync.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiAsync?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApiAsync$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiAsync$NullableType) &&
        other is $JniMessageApiAsync$NullableType;
  }
}

final class $JniMessageApiAsync$Type
    extends jni$_.JObjType<JniMessageApiAsync> {
  @jni$_.internal
  const $JniMessageApiAsync$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiAsync;';

  @jni$_.internal
  @core$_.override
  JniMessageApiAsync fromReference(jni$_.JReference reference) =>
      JniMessageApiAsync.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiAsync?> get nullableType =>
      const $JniMessageApiAsync$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApiAsync$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiAsync$Type) &&
        other is $JniMessageApiAsync$Type;
  }
}

/// from: `JniMessageApiAsyncRegistrar`
class JniMessageApiAsyncRegistrar extends JniMessageApiAsync {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApiAsyncRegistrar> $type;

  @jni$_.internal
  JniMessageApiAsyncRegistrar.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'JniMessageApiAsyncRegistrar');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniMessageApiAsyncRegistrar$NullableType();
  static const type = $JniMessageApiAsyncRegistrar$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory JniMessageApiAsyncRegistrar() {
    return JniMessageApiAsyncRegistrar.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getApi = _class.instanceMethodId(
    r'getApi',
    r'()LJniMessageApiAsync;',
  );

  static final _getApi = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final JniMessageApiAsync getApi()`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiAsync? getApi() {
    return _getApi(reference.pointer, _id_getApi as jni$_.JMethodIDPtr)
        .object<JniMessageApiAsync?>(const $JniMessageApiAsync$NullableType());
  }

  static final _id_setApi = _class.instanceMethodId(
    r'setApi',
    r'(LJniMessageApiAsync;)V',
  );

  static final _setApi = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setApi(JniMessageApiAsync jniMessageApiAsync)`
  void setApi(
    JniMessageApiAsync? jniMessageApiAsync,
  ) {
    final _$jniMessageApiAsync =
        jniMessageApiAsync?.reference ?? jni$_.jNullReference;
    _setApi(reference.pointer, _id_setApi as jni$_.JMethodIDPtr,
            _$jniMessageApiAsync.pointer)
        .check();
  }

  static final _id_register = _class.instanceMethodId(
    r'register',
    r'(LJniMessageApiAsync;Ljava/lang/String;)LJniMessageApiAsyncRegistrar;',
  );

  static final _register = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiAsyncRegistrar register(JniMessageApiAsync jniMessageApiAsync, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiAsyncRegistrar register(
    JniMessageApiAsync jniMessageApiAsync,
    jni$_.JString string,
  ) {
    final _$jniMessageApiAsync = jniMessageApiAsync.reference;
    final _$string = string.reference;
    return _register(reference.pointer, _id_register as jni$_.JMethodIDPtr,
            _$jniMessageApiAsync.pointer, _$string.pointer)
        .object<JniMessageApiAsyncRegistrar>(
            const $JniMessageApiAsyncRegistrar$Type());
  }

  static final _id_getInstance = _class.instanceMethodId(
    r'getInstance',
    r'(Ljava/lang/String;)LJniMessageApiAsyncRegistrar;',
  );

  static final _getInstance = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiAsyncRegistrar getInstance(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiAsyncRegistrar? getInstance(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _getInstance(reference.pointer,
            _id_getInstance as jni$_.JMethodIDPtr, _$string.pointer)
        .object<JniMessageApiAsyncRegistrar?>(
            const $JniMessageApiAsyncRegistrar$NullableType());
  }

  static final _id_doNothing = _class.instanceMethodId(
    r'doNothing',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _doNothing = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object doNothing(kotlin.coroutines.Continuation<? super kotlin.Unit> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> doNothing() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _doNothing(reference.pointer,
            _id_doNothing as jni$_.JMethodIDPtr, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JObject>(
      const jni$_.JObjectType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoString = _class.instanceMethodId(
    r'echoString',
    r'(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object echoString(java.lang.String string, kotlin.coroutines.Continuation<? super java.lang.String> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JString> echoString(
    jni$_.JString string,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$string = string.reference;
    final $r = _echoString(
            reference.pointer,
            _id_echoString as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JString>(
      const jni$_.JStringType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoInt = _class.instanceMethodId(
    r'echoInt',
    r'(JLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoInt = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int64, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object echoInt(long j, kotlin.coroutines.Continuation<? super java.lang.Long> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JLong> echoInt(
    int j,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _echoInt(reference.pointer, _id_echoInt as jni$_.JMethodIDPtr, j,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JLong>(
      const jni$_.JLongType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoDouble = _class.instanceMethodId(
    r'echoDouble',
    r'(DLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoDouble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Double,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, double, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object echoDouble(double d, kotlin.coroutines.Continuation<? super java.lang.Double> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JDouble> echoDouble(
    double d,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _echoDouble(reference.pointer,
            _id_echoDouble as jni$_.JMethodIDPtr, d, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JDouble>(
      const jni$_.JDoubleType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoBool = _class.instanceMethodId(
    r'echoBool',
    r'(ZLkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoBool = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Int32, jni$_.Pointer<jni$_.Void>)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, int, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object echoBool(boolean z, kotlin.coroutines.Continuation<? super java.lang.Boolean> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JBoolean> echoBool(
    bool z,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _echoBool(reference.pointer, _id_echoBool as jni$_.JMethodIDPtr,
            z ? 1 : 0, _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<jni$_.JBoolean>(
      const jni$_.JBooleanType(),
      releaseOriginal: true,
    );
  }

  static final _id_sendSomeTypes = _class.instanceMethodId(
    r'sendSomeTypes',
    r'(LSomeTypes;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _sendSomeTypes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object sendSomeTypes(SomeTypes someTypes, kotlin.coroutines.Continuation<? super SomeTypes> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<SomeTypes> sendSomeTypes(
    SomeTypes someTypes,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$someTypes = someTypes.reference;
    final $r = _sendSomeTypes(
            reference.pointer,
            _id_sendSomeTypes as jni$_.JMethodIDPtr,
            _$someTypes.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as<SomeTypes>(
      const $SomeTypes$Type(),
      releaseOriginal: true,
    );
  }
}

final class $JniMessageApiAsyncRegistrar$NullableType
    extends jni$_.JObjType<JniMessageApiAsyncRegistrar?> {
  @jni$_.internal
  const $JniMessageApiAsyncRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiAsyncRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiAsyncRegistrar? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JniMessageApiAsyncRegistrar.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApiAsync$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiAsyncRegistrar?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($JniMessageApiAsyncRegistrar$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiAsyncRegistrar$NullableType) &&
        other is $JniMessageApiAsyncRegistrar$NullableType;
  }
}

final class $JniMessageApiAsyncRegistrar$Type
    extends jni$_.JObjType<JniMessageApiAsyncRegistrar> {
  @jni$_.internal
  const $JniMessageApiAsyncRegistrar$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiAsyncRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiAsyncRegistrar fromReference(jni$_.JReference reference) =>
      JniMessageApiAsyncRegistrar.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApiAsync$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiAsyncRegistrar?> get nullableType =>
      const $JniMessageApiAsyncRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($JniMessageApiAsyncRegistrar$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiAsyncRegistrar$Type) &&
        other is $JniMessageApiAsyncRegistrar$Type;
  }
}

/// from: `JniMessageApiNullableAsync`
class JniMessageApiNullableAsync extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApiNullableAsync> $type;

  @jni$_.internal
  JniMessageApiNullableAsync.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'JniMessageApiNullableAsync');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JniMessageApiNullableAsync$NullableType();
  static const type = $JniMessageApiNullableAsync$Type();
  static final _id_echoString = _class.instanceMethodId(
    r'echoString',
    r'(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object echoString(java.lang.String string, kotlin.coroutines.Continuation<? super java.lang.String> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JString?> echoString(
    jni$_.JString? string,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$string = string?.reference ?? jni$_.jNullReference;
    final $r = _echoString(
            reference.pointer,
            _id_echoString as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<jni$_.JString?>(
      const jni$_.JStringNullableType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoInt = _class.instanceMethodId(
    r'echoInt',
    r'(Ljava/lang/Long;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object echoInt(java.lang.Long long, kotlin.coroutines.Continuation<? super java.lang.Long> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JLong?> echoInt(
    jni$_.JLong? long,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$long = long?.reference ?? jni$_.jNullReference;
    final $r = _echoInt(reference.pointer, _id_echoInt as jni$_.JMethodIDPtr,
            _$long.pointer, _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<jni$_.JLong?>(
      const jni$_.JLongNullableType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoDouble = _class.instanceMethodId(
    r'echoDouble',
    r'(Ljava/lang/Double;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoDouble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object echoDouble(java.lang.Double double, kotlin.coroutines.Continuation<? super java.lang.Double> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JDouble?> echoDouble(
    jni$_.JDouble? double,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$double = double?.reference ?? jni$_.jNullReference;
    final $r = _echoDouble(
            reference.pointer,
            _id_echoDouble as jni$_.JMethodIDPtr,
            _$double.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<jni$_.JDouble?>(
      const jni$_.JDoubleNullableType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoBool = _class.instanceMethodId(
    r'echoBool',
    r'(Ljava/lang/Boolean;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoBool = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object echoBool(java.lang.Boolean boolean, kotlin.coroutines.Continuation<? super java.lang.Boolean> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JBoolean?> echoBool(
    jni$_.JBoolean? boolean,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    final $r = _echoBool(reference.pointer, _id_echoBool as jni$_.JMethodIDPtr,
            _$boolean.pointer, _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<jni$_.JBoolean?>(
      const jni$_.JBooleanNullableType(),
      releaseOriginal: true,
    );
  }

  static final _id_sendSomeNullableTypes = _class.instanceMethodId(
    r'sendSomeNullableTypes',
    r'(LSomeNullableTypes;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _sendSomeNullableTypes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object sendSomeNullableTypes(SomeNullableTypes someNullableTypes, kotlin.coroutines.Continuation<? super SomeNullableTypes> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<SomeNullableTypes?> sendSomeNullableTypes(
    SomeNullableTypes? someNullableTypes,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$someNullableTypes =
        someNullableTypes?.reference ?? jni$_.jNullReference;
    final $r = _sendSomeNullableTypes(
            reference.pointer,
            _id_sendSomeNullableTypes as jni$_.JMethodIDPtr,
            _$someNullableTypes.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<SomeNullableTypes?>(
      const $SomeNullableTypes$NullableType(),
      releaseOriginal: true,
    );
  }
}

final class $JniMessageApiNullableAsync$NullableType
    extends jni$_.JObjType<JniMessageApiNullableAsync?> {
  @jni$_.internal
  const $JniMessageApiNullableAsync$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiNullableAsync;';

  @jni$_.internal
  @core$_.override
  JniMessageApiNullableAsync? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JniMessageApiNullableAsync.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiNullableAsync?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApiNullableAsync$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiNullableAsync$NullableType) &&
        other is $JniMessageApiNullableAsync$NullableType;
  }
}

final class $JniMessageApiNullableAsync$Type
    extends jni$_.JObjType<JniMessageApiNullableAsync> {
  @jni$_.internal
  const $JniMessageApiNullableAsync$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiNullableAsync;';

  @jni$_.internal
  @core$_.override
  JniMessageApiNullableAsync fromReference(jni$_.JReference reference) =>
      JniMessageApiNullableAsync.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiNullableAsync?> get nullableType =>
      const $JniMessageApiNullableAsync$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JniMessageApiNullableAsync$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiNullableAsync$Type) &&
        other is $JniMessageApiNullableAsync$Type;
  }
}

/// from: `JniMessageApiNullableAsyncRegistrar`
class JniMessageApiNullableAsyncRegistrar extends JniMessageApiNullableAsync {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JniMessageApiNullableAsyncRegistrar> $type;

  @jni$_.internal
  JniMessageApiNullableAsyncRegistrar.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class =
      jni$_.JClass.forName(r'JniMessageApiNullableAsyncRegistrar');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $JniMessageApiNullableAsyncRegistrar$NullableType();
  static const type = $JniMessageApiNullableAsyncRegistrar$Type();
  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory JniMessageApiNullableAsyncRegistrar() {
    return JniMessageApiNullableAsyncRegistrar.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getApi = _class.instanceMethodId(
    r'getApi',
    r'()LJniMessageApiNullableAsync;',
  );

  static final _getApi = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final JniMessageApiNullableAsync getApi()`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiNullableAsync? getApi() {
    return _getApi(reference.pointer, _id_getApi as jni$_.JMethodIDPtr)
        .object<JniMessageApiNullableAsync?>(
            const $JniMessageApiNullableAsync$NullableType());
  }

  static final _id_setApi = _class.instanceMethodId(
    r'setApi',
    r'(LJniMessageApiNullableAsync;)V',
  );

  static final _setApi = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JThrowablePtr Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallVoidMethod')
      .asFunction<
          jni$_.JThrowablePtr Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final void setApi(JniMessageApiNullableAsync jniMessageApiNullableAsync)`
  void setApi(
    JniMessageApiNullableAsync? jniMessageApiNullableAsync,
  ) {
    final _$jniMessageApiNullableAsync =
        jniMessageApiNullableAsync?.reference ?? jni$_.jNullReference;
    _setApi(reference.pointer, _id_setApi as jni$_.JMethodIDPtr,
            _$jniMessageApiNullableAsync.pointer)
        .check();
  }

  static final _id_register = _class.instanceMethodId(
    r'register',
    r'(LJniMessageApiNullableAsync;Ljava/lang/String;)LJniMessageApiNullableAsyncRegistrar;',
  );

  static final _register = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiNullableAsyncRegistrar register(JniMessageApiNullableAsync jniMessageApiNullableAsync, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiNullableAsyncRegistrar register(
    JniMessageApiNullableAsync jniMessageApiNullableAsync,
    jni$_.JString string,
  ) {
    final _$jniMessageApiNullableAsync = jniMessageApiNullableAsync.reference;
    final _$string = string.reference;
    return _register(reference.pointer, _id_register as jni$_.JMethodIDPtr,
            _$jniMessageApiNullableAsync.pointer, _$string.pointer)
        .object<JniMessageApiNullableAsyncRegistrar>(
            const $JniMessageApiNullableAsyncRegistrar$Type());
  }

  static final _id_getInstance = _class.instanceMethodId(
    r'getInstance',
    r'(Ljava/lang/String;)LJniMessageApiNullableAsyncRegistrar;',
  );

  static final _getInstance = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final JniMessageApiNullableAsyncRegistrar getInstance(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  JniMessageApiNullableAsyncRegistrar? getInstance(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _getInstance(reference.pointer,
            _id_getInstance as jni$_.JMethodIDPtr, _$string.pointer)
        .object<JniMessageApiNullableAsyncRegistrar?>(
            const $JniMessageApiNullableAsyncRegistrar$NullableType());
  }

  static final _id_echoString = _class.instanceMethodId(
    r'echoString',
    r'(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object echoString(java.lang.String string, kotlin.coroutines.Continuation<? super java.lang.String> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JString?> echoString(
    jni$_.JString? string,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$string = string?.reference ?? jni$_.jNullReference;
    final $r = _echoString(
            reference.pointer,
            _id_echoString as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<jni$_.JString?>(
      const jni$_.JStringNullableType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoInt = _class.instanceMethodId(
    r'echoInt',
    r'(Ljava/lang/Long;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object echoInt(java.lang.Long long, kotlin.coroutines.Continuation<? super java.lang.Long> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JLong?> echoInt(
    jni$_.JLong? long,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$long = long?.reference ?? jni$_.jNullReference;
    final $r = _echoInt(reference.pointer, _id_echoInt as jni$_.JMethodIDPtr,
            _$long.pointer, _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<jni$_.JLong?>(
      const jni$_.JLongNullableType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoDouble = _class.instanceMethodId(
    r'echoDouble',
    r'(Ljava/lang/Double;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoDouble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object echoDouble(java.lang.Double double, kotlin.coroutines.Continuation<? super java.lang.Double> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JDouble?> echoDouble(
    jni$_.JDouble? double,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$double = double?.reference ?? jni$_.jNullReference;
    final $r = _echoDouble(
            reference.pointer,
            _id_echoDouble as jni$_.JMethodIDPtr,
            _$double.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<jni$_.JDouble?>(
      const jni$_.JDoubleNullableType(),
      releaseOriginal: true,
    );
  }

  static final _id_echoBool = _class.instanceMethodId(
    r'echoBool',
    r'(Ljava/lang/Boolean;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _echoBool = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object echoBool(java.lang.Boolean boolean, kotlin.coroutines.Continuation<? super java.lang.Boolean> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JBoolean?> echoBool(
    jni$_.JBoolean? boolean,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    final $r = _echoBool(reference.pointer, _id_echoBool as jni$_.JMethodIDPtr,
            _$boolean.pointer, _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<jni$_.JBoolean?>(
      const jni$_.JBooleanNullableType(),
      releaseOriginal: true,
    );
  }

  static final _id_sendSomeNullableTypes = _class.instanceMethodId(
    r'sendSomeNullableTypes',
    r'(LSomeNullableTypes;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _sendSomeNullableTypes = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public java.lang.Object sendSomeNullableTypes(SomeNullableTypes someNullableTypes, kotlin.coroutines.Continuation<? super SomeNullableTypes> continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<SomeNullableTypes?> sendSomeNullableTypes(
    SomeNullableTypes? someNullableTypes,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$someNullableTypes =
        someNullableTypes?.reference ?? jni$_.jNullReference;
    final $r = _sendSomeNullableTypes(
            reference.pointer,
            _id_sendSomeNullableTypes as jni$_.JMethodIDPtr,
            _$someNullableTypes.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
    _$continuation.release();
    final jni$_.JObject? $o;
    if ($r != null && $r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      final $a = await $p.first;
      $o = $a == 0
          ? null
          : jni$_.JObject.fromReference(
              jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress($a)));
      if ($o != null && $o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o?.as<SomeNullableTypes?>(
      const $SomeNullableTypes$NullableType(),
      releaseOriginal: true,
    );
  }
}

final class $JniMessageApiNullableAsyncRegistrar$NullableType
    extends jni$_.JObjType<JniMessageApiNullableAsyncRegistrar?> {
  @jni$_.internal
  const $JniMessageApiNullableAsyncRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiNullableAsyncRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiNullableAsyncRegistrar? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JniMessageApiNullableAsyncRegistrar.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApiNullableAsync$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiNullableAsyncRegistrar?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode =>
      ($JniMessageApiNullableAsyncRegistrar$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($JniMessageApiNullableAsyncRegistrar$NullableType) &&
        other is $JniMessageApiNullableAsyncRegistrar$NullableType;
  }
}

final class $JniMessageApiNullableAsyncRegistrar$Type
    extends jni$_.JObjType<JniMessageApiNullableAsyncRegistrar> {
  @jni$_.internal
  const $JniMessageApiNullableAsyncRegistrar$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LJniMessageApiNullableAsyncRegistrar;';

  @jni$_.internal
  @core$_.override
  JniMessageApiNullableAsyncRegistrar fromReference(
          jni$_.JReference reference) =>
      JniMessageApiNullableAsyncRegistrar.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const $JniMessageApiNullableAsync$Type();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JniMessageApiNullableAsyncRegistrar?> get nullableType =>
      const $JniMessageApiNullableAsyncRegistrar$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 2;

  @core$_.override
  int get hashCode => ($JniMessageApiNullableAsyncRegistrar$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JniMessageApiNullableAsyncRegistrar$Type) &&
        other is $JniMessageApiNullableAsyncRegistrar$Type;
  }
}

/// from: `SomeTypes$Companion`
class SomeTypes$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<SomeTypes$Companion> $type;

  @jni$_.internal
  SomeTypes$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'SomeTypes$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $SomeTypes$Companion$NullableType();
  static const type = $SomeTypes$Companion$Type();
  static final _id_fromList = _class.instanceMethodId(
    r'fromList',
    r'(Ljava/util/List;)LSomeTypes;',
  );

  static final _fromList = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final SomeTypes fromList(java.util.List<? extends java.lang.Object> list)`
  /// The returned object must be released after use, by calling the [release] method.
  SomeTypes fromList(
    jni$_.JList<jni$_.JObject?> list,
  ) {
    final _$list = list.reference;
    return _fromList(reference.pointer, _id_fromList as jni$_.JMethodIDPtr,
            _$list.pointer)
        .object<SomeTypes>(const $SomeTypes$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory SomeTypes$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return SomeTypes$Companion.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $SomeTypes$Companion$NullableType
    extends jni$_.JObjType<SomeTypes$Companion?> {
  @jni$_.internal
  const $SomeTypes$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LSomeTypes$Companion;';

  @jni$_.internal
  @core$_.override
  SomeTypes$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : SomeTypes$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SomeTypes$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SomeTypes$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SomeTypes$Companion$NullableType) &&
        other is $SomeTypes$Companion$NullableType;
  }
}

final class $SomeTypes$Companion$Type
    extends jni$_.JObjType<SomeTypes$Companion> {
  @jni$_.internal
  const $SomeTypes$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LSomeTypes$Companion;';

  @jni$_.internal
  @core$_.override
  SomeTypes$Companion fromReference(jni$_.JReference reference) =>
      SomeTypes$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SomeTypes$Companion?> get nullableType =>
      const $SomeTypes$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SomeTypes$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SomeTypes$Companion$Type) &&
        other is $SomeTypes$Companion$Type;
  }
}

/// from: `SomeTypes`
class SomeTypes extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<SomeTypes> $type;

  @jni$_.internal
  SomeTypes.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'SomeTypes');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $SomeTypes$NullableType();
  static const type = $SomeTypes$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'LSomeTypes$Companion;',
  );

  /// from: `static public final SomeTypes$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static SomeTypes$Companion get Companion =>
      _id_Companion.get(_class, const $SomeTypes$Companion$Type());

  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;JDZ)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Double,
                        jni$_.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              double,
              int)>();

  /// from: `public void <init>(java.lang.String string, long j, double d, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  factory SomeTypes(
    jni$_.JString string,
    int j,
    double d,
    bool z,
  ) {
    final _$string = string.reference;
    return SomeTypes.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$string.pointer, j, d, z ? 1 : 0)
        .reference);
  }

  static final _id_getAString = _class.instanceMethodId(
    r'getAString',
    r'()Ljava/lang/String;',
  );

  static final _getAString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getAString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getAString() {
    return _getAString(reference.pointer, _id_getAString as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getAnInt = _class.instanceMethodId(
    r'getAnInt',
    r'()J',
  );

  static final _getAnInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long getAnInt()`
  int getAnInt() {
    return _getAnInt(reference.pointer, _id_getAnInt as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getADouble = _class.instanceMethodId(
    r'getADouble',
    r'()D',
  );

  static final _getADouble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final double getADouble()`
  double getADouble() {
    return _getADouble(reference.pointer, _id_getADouble as jni$_.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_getABool = _class.instanceMethodId(
    r'getABool',
    r'()Z',
  );

  static final _getABool = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean getABool()`
  bool getABool() {
    return _getABool(reference.pointer, _id_getABool as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_toList = _class.instanceMethodId(
    r'toList',
    r'()Ljava/util/List;',
  );

  static final _toList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.List<java.lang.Object> toList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JObject?> toList() {
    return _toList(reference.pointer, _id_toList as jni$_.JMethodIDPtr)
        .object<jni$_.JList<jni$_.JObject?>>(
            const jni$_.JListType<jni$_.JObject?>(jni$_.JObjectNullableType()));
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_component1 = _class.instanceMethodId(
    r'component1',
    r'()Ljava/lang/String;',
  );

  static final _component1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String component1()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString component1() {
    return _component1(reference.pointer, _id_component1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_component2 = _class.instanceMethodId(
    r'component2',
    r'()J',
  );

  static final _component2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long component2()`
  int component2() {
    return _component2(reference.pointer, _id_component2 as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_component3 = _class.instanceMethodId(
    r'component3',
    r'()D',
  );

  static final _component3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallDoubleMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final double component3()`
  double component3() {
    return _component3(reference.pointer, _id_component3 as jni$_.JMethodIDPtr)
        .doubleFloat;
  }

  static final _id_component4 = _class.instanceMethodId(
    r'component4',
    r'()Z',
  );

  static final _component4 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean component4()`
  bool component4() {
    return _component4(reference.pointer, _id_component4 as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_copy = _class.instanceMethodId(
    r'copy',
    r'(Ljava/lang/String;JDZ)LSomeTypes;',
  );

  static final _copy = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Double,
                        jni$_.Int32
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              double,
              int)>();

  /// from: `public final SomeTypes copy(java.lang.String string, long j, double d, boolean z)`
  /// The returned object must be released after use, by calling the [release] method.
  SomeTypes copy(
    jni$_.JString string,
    int j,
    double d,
    bool z,
  ) {
    final _$string = string.reference;
    return _copy(reference.pointer, _id_copy as jni$_.JMethodIDPtr,
            _$string.pointer, j, d, z ? 1 : 0)
        .object<SomeTypes>(const $SomeTypes$Type());
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }
}

final class $SomeTypes$NullableType extends jni$_.JObjType<SomeTypes?> {
  @jni$_.internal
  const $SomeTypes$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LSomeTypes;';

  @jni$_.internal
  @core$_.override
  SomeTypes? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : SomeTypes.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SomeTypes?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SomeTypes$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SomeTypes$NullableType) &&
        other is $SomeTypes$NullableType;
  }
}

final class $SomeTypes$Type extends jni$_.JObjType<SomeTypes> {
  @jni$_.internal
  const $SomeTypes$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LSomeTypes;';

  @jni$_.internal
  @core$_.override
  SomeTypes fromReference(jni$_.JReference reference) =>
      SomeTypes.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SomeTypes?> get nullableType =>
      const $SomeTypes$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SomeTypes$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SomeTypes$Type) && other is $SomeTypes$Type;
  }
}

/// from: `SomeNullableTypes$Companion`
class SomeNullableTypes$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<SomeNullableTypes$Companion> $type;

  @jni$_.internal
  SomeNullableTypes$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'SomeNullableTypes$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $SomeNullableTypes$Companion$NullableType();
  static const type = $SomeNullableTypes$Companion$Type();
  static final _id_fromList = _class.instanceMethodId(
    r'fromList',
    r'(Ljava/util/List;)LSomeNullableTypes;',
  );

  static final _fromList = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final SomeNullableTypes fromList(java.util.List<? extends java.lang.Object> list)`
  /// The returned object must be released after use, by calling the [release] method.
  SomeNullableTypes fromList(
    jni$_.JList<jni$_.JObject?> list,
  ) {
    final _$list = list.reference;
    return _fromList(reference.pointer, _id_fromList as jni$_.JMethodIDPtr,
            _$list.pointer)
        .object<SomeNullableTypes>(const $SomeNullableTypes$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory SomeNullableTypes$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return SomeNullableTypes$Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $SomeNullableTypes$Companion$NullableType
    extends jni$_.JObjType<SomeNullableTypes$Companion?> {
  @jni$_.internal
  const $SomeNullableTypes$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LSomeNullableTypes$Companion;';

  @jni$_.internal
  @core$_.override
  SomeNullableTypes$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : SomeNullableTypes$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SomeNullableTypes$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SomeNullableTypes$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SomeNullableTypes$Companion$NullableType) &&
        other is $SomeNullableTypes$Companion$NullableType;
  }
}

final class $SomeNullableTypes$Companion$Type
    extends jni$_.JObjType<SomeNullableTypes$Companion> {
  @jni$_.internal
  const $SomeNullableTypes$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LSomeNullableTypes$Companion;';

  @jni$_.internal
  @core$_.override
  SomeNullableTypes$Companion fromReference(jni$_.JReference reference) =>
      SomeNullableTypes$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SomeNullableTypes$Companion?> get nullableType =>
      const $SomeNullableTypes$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SomeNullableTypes$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SomeNullableTypes$Companion$Type) &&
        other is $SomeNullableTypes$Companion$Type;
  }
}

/// from: `SomeNullableTypes`
class SomeNullableTypes extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<SomeNullableTypes> $type;

  @jni$_.internal
  SomeNullableTypes.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'SomeNullableTypes');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $SomeNullableTypes$NullableType();
  static const type = $SomeNullableTypes$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'LSomeNullableTypes$Companion;',
  );

  /// from: `static public final SomeNullableTypes$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static SomeNullableTypes$Companion get Companion =>
      _id_Companion.get(_class, const $SomeNullableTypes$Companion$Type());

  static final _id_new$ = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Boolean;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(java.lang.String string, java.lang.Long long, java.lang.Double double, java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  factory SomeNullableTypes(
    jni$_.JString? string,
    jni$_.JLong? long,
    jni$_.JDouble? double,
    jni$_.JBoolean? boolean,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$long = long?.reference ?? jni$_.jNullReference;
    final _$double = double?.reference ?? jni$_.jNullReference;
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return SomeNullableTypes.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$long.pointer,
            _$double.pointer,
            _$boolean.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Boolean;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(java.lang.String string, java.lang.Long long, java.lang.Double double, java.lang.Boolean boolean, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory SomeNullableTypes.new$1(
    jni$_.JString? string,
    jni$_.JLong? long,
    jni$_.JDouble? double,
    jni$_.JBoolean? boolean,
    int i,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$long = long?.reference ?? jni$_.jNullReference;
    final _$double = double?.reference ?? jni$_.jNullReference;
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return SomeNullableTypes.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$long.pointer,
            _$double.pointer,
            _$boolean.pointer,
            i,
            _$defaultConstructorMarker.pointer)
        .reference);
  }

  static final _id_getAString = _class.instanceMethodId(
    r'getAString',
    r'()Ljava/lang/String;',
  );

  static final _getAString = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getAString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getAString() {
    return _getAString(reference.pointer, _id_getAString as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getAnInt = _class.instanceMethodId(
    r'getAnInt',
    r'()Ljava/lang/Long;',
  );

  static final _getAnInt = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.Long getAnInt()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JLong? getAnInt() {
    return _getAnInt(reference.pointer, _id_getAnInt as jni$_.JMethodIDPtr)
        .object<jni$_.JLong?>(const jni$_.JLongNullableType());
  }

  static final _id_getADouble = _class.instanceMethodId(
    r'getADouble',
    r'()Ljava/lang/Double;',
  );

  static final _getADouble = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.Double getADouble()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JDouble? getADouble() {
    return _getADouble(reference.pointer, _id_getADouble as jni$_.JMethodIDPtr)
        .object<jni$_.JDouble?>(const jni$_.JDoubleNullableType());
  }

  static final _id_getABool = _class.instanceMethodId(
    r'getABool',
    r'()Ljava/lang/Boolean;',
  );

  static final _getABool = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.Boolean getABool()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JBoolean? getABool() {
    return _getABool(reference.pointer, _id_getABool as jni$_.JMethodIDPtr)
        .object<jni$_.JBoolean?>(const jni$_.JBooleanNullableType());
  }

  static final _id_toList = _class.instanceMethodId(
    r'toList',
    r'()Ljava/util/List;',
  );

  static final _toList = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.List<java.lang.Object> toList()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JList<jni$_.JObject?> toList() {
    return _toList(reference.pointer, _id_toList as jni$_.JMethodIDPtr)
        .object<jni$_.JList<jni$_.JObject?>>(
            const jni$_.JListType<jni$_.JObject?>(jni$_.JObjectNullableType()));
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_component1 = _class.instanceMethodId(
    r'component1',
    r'()Ljava/lang/String;',
  );

  static final _component1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String component1()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? component1() {
    return _component1(reference.pointer, _id_component1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_component2 = _class.instanceMethodId(
    r'component2',
    r'()Ljava/lang/Long;',
  );

  static final _component2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.Long component2()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JLong? component2() {
    return _component2(reference.pointer, _id_component2 as jni$_.JMethodIDPtr)
        .object<jni$_.JLong?>(const jni$_.JLongNullableType());
  }

  static final _id_component3 = _class.instanceMethodId(
    r'component3',
    r'()Ljava/lang/Double;',
  );

  static final _component3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.Double component3()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JDouble? component3() {
    return _component3(reference.pointer, _id_component3 as jni$_.JMethodIDPtr)
        .object<jni$_.JDouble?>(const jni$_.JDoubleNullableType());
  }

  static final _id_component4 = _class.instanceMethodId(
    r'component4',
    r'()Ljava/lang/Boolean;',
  );

  static final _component4 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.Boolean component4()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JBoolean? component4() {
    return _component4(reference.pointer, _id_component4 as jni$_.JMethodIDPtr)
        .object<jni$_.JBoolean?>(const jni$_.JBooleanNullableType());
  }

  static final _id_copy = _class.instanceMethodId(
    r'copy',
    r'(Ljava/lang/String;Ljava/lang/Long;Ljava/lang/Double;Ljava/lang/Boolean;)LSomeNullableTypes;',
  );

  static final _copy = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final SomeNullableTypes copy(java.lang.String string, java.lang.Long long, java.lang.Double double, java.lang.Boolean boolean)`
  /// The returned object must be released after use, by calling the [release] method.
  SomeNullableTypes copy(
    jni$_.JString? string,
    jni$_.JLong? long,
    jni$_.JDouble? double,
    jni$_.JBoolean? boolean,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$long = long?.reference ?? jni$_.jNullReference;
    final _$double = double?.reference ?? jni$_.jNullReference;
    final _$boolean = boolean?.reference ?? jni$_.jNullReference;
    return _copy(
            reference.pointer,
            _id_copy as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$long.pointer,
            _$double.pointer,
            _$boolean.pointer)
        .object<SomeNullableTypes>(const $SomeNullableTypes$Type());
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_new$2 = _class.constructorId(
    r'()V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory SomeNullableTypes.new$2() {
    return SomeNullableTypes.fromReference(
        _new$2(_class.reference.pointer, _id_new$2 as jni$_.JMethodIDPtr)
            .reference);
  }
}

final class $SomeNullableTypes$NullableType
    extends jni$_.JObjType<SomeNullableTypes?> {
  @jni$_.internal
  const $SomeNullableTypes$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'LSomeNullableTypes;';

  @jni$_.internal
  @core$_.override
  SomeNullableTypes? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : SomeNullableTypes.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SomeNullableTypes?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SomeNullableTypes$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SomeNullableTypes$NullableType) &&
        other is $SomeNullableTypes$NullableType;
  }
}

final class $SomeNullableTypes$Type extends jni$_.JObjType<SomeNullableTypes> {
  @jni$_.internal
  const $SomeNullableTypes$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'LSomeNullableTypes;';

  @jni$_.internal
  @core$_.override
  SomeNullableTypes fromReference(jni$_.JReference reference) =>
      SomeNullableTypes.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<SomeNullableTypes?> get nullableType =>
      const $SomeNullableTypes$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($SomeNullableTypes$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($SomeNullableTypes$Type) &&
        other is $SomeNullableTypes$Type;
  }
}
