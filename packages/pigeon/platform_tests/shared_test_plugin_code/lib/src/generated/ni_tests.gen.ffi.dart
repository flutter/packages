// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//

// ignore_for_file: always_specify_types, camel_case_types, non_constant_identifier_names, unnecessary_non_null_assertion, unused_element, unused_field
// coverage:ignore-file

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;
import 'package:objective_c/objective_c.dart' as objc;

@ffi.Native<
    ffi.Pointer<objc.ObjCObject> Function(
        ffi.Pointer<objc.ObjCObject>, ffi.Pointer<ffi.Void>)>()
external ffi.Pointer<objc.ObjCObject> _test_plugin_protocolTrampoline_1mbt9g9(
  ffi.Pointer<objc.ObjCObject> target,
  ffi.Pointer<ffi.Void> arg0,
);

enum NIAnEnum {
  NIAnEnumOne(0),
  NIAnEnumTwo(1),
  NIAnEnumThree(2),
  NIAnEnumFortyTwo(3),
  NIAnEnumFourHundredTwentyTwo(4);

  final int value;
  const NIAnEnum(this.value);

  static NIAnEnum fromValue(int value) => switch (value) {
        0 => NIAnEnumOne,
        1 => NIAnEnumTwo,
        2 => NIAnEnumThree,
        3 => NIAnEnumFortyTwo,
        4 => NIAnEnumFourHundredTwentyTwo,
        _ => throw ArgumentError('Unknown value for NIAnEnum: $value'),
      };
}

late final _class_NIAllTypes = objc.getClass("test_plugin.NIAllTypes");
late final _sel_isKindOfClass_ = objc.registerName("isKindOfClass:");
final _objc_msgSend_19nvye5 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        bool Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
typedef instancetype = ffi.Pointer<objc.ObjCObject>;
typedef Dartinstancetype = objc.ObjCObjectBase;
late final _sel_initWithABool_anInt_anInt64_aDouble_anEnum_aString_list_map_ =
    objc.registerName(
        "initWithABool:anInt:anInt64:aDouble:anEnum:aString:list:map:");
final _objc_msgSend_1f0nfjp = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Bool,
                ffi.Int64,
                ffi.Int64,
                ffi.Double,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            bool,
            int,
            int,
            double,
            int,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_aBool = objc.registerName("aBool");
final _objc_msgSend_91o635 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Bool Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        bool Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setABool_ = objc.registerName("setABool:");
final _objc_msgSend_1s56lr9 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Bool)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, bool)>();
late final _sel_anInt = objc.registerName("anInt");
final _objc_msgSend_pysgoz = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Int64 Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAnInt_ = objc.registerName("setAnInt:");
final _objc_msgSend_17gvxvj = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Int64)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_anInt64 = objc.registerName("anInt64");
late final _sel_setAnInt64_ = objc.registerName("setAnInt64:");
late final _sel_aDouble = objc.registerName("aDouble");
final _objc_msgSend_1ukqyt8 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
final _objc_msgSend_1ukqyt8Fpret = objc.msgSendFpretPointer
    .cast<
        ffi.NativeFunction<
            ffi.Double Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        double Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setADouble_ = objc.registerName("setADouble:");
final _objc_msgSend_hwm8nu = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Double)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, double)>();
late final _sel_anEnum = objc.registerName("anEnum");
final _objc_msgSend_d3bb7e = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAnEnum_ = objc.registerName("setAnEnum:");
final _objc_msgSend_15w00rc = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();
late final _sel_aString = objc.registerName("aString");
final _objc_msgSend_151sglz = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setAString_ = objc.registerName("setAString:");
final _objc_msgSend_xtuoz7 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _sel_list = objc.registerName("list");
late final _sel_setList_ = objc.registerName("setList:");
late final _sel_map = objc.registerName("map");
late final _sel_setMap_ = objc.registerName("setMap:");
late final _sel_init = objc.registerName("init");
late final _sel_new = objc.registerName("new");
late final _sel_allocWithZone_ = objc.registerName("allocWithZone:");
final _objc_msgSend_1cwp428 = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.NSZone>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.NSZone>)>();
late final _sel_alloc = objc.registerName("alloc");
late final _sel_self = objc.registerName("self");
ffi.Pointer<objc.ObjCObject> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline(
        ffi.Pointer<objc.ObjCBlockImpl> block, ffi.Pointer<ffi.Void> arg0) =>
    block.ref.target
        .cast<
            ffi.NativeFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<ffi.Void> arg0)>>()
        .asFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<ffi.Void>)>()(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_objcObjCObject_ffiVoid_fnPtrCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_objcObjCObject_ffiVoid_fnPtrTrampoline)
        .cast();
ffi.Pointer<objc.ObjCObject>
    _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline(
            ffi.Pointer<objc.ObjCBlockImpl> block,
            ffi.Pointer<ffi.Void> arg0) =>
        (objc.getBlockClosure(block) as ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<ffi.Void>))(arg0);
ffi.Pointer<ffi.Void> _ObjCBlock_objcObjCObject_ffiVoid_closureCallable =
    ffi.Pointer.fromFunction<
                ffi.Pointer<objc.ObjCObject> Function(
                    ffi.Pointer<objc.ObjCBlockImpl>, ffi.Pointer<ffi.Void>)>(
            _ObjCBlock_objcObjCObject_ffiVoid_closureTrampoline)
        .cast();

/// Construction methods for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
abstract final class ObjCBlock_objcObjCObject_ffiVoid {
  /// Returns a block that wraps the given raw block pointer.
  static objc
      .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      castFromPointer(ffi.Pointer<objc.ObjCBlockImpl> pointer,
              {bool retain = false, bool release = false}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              pointer,
              retain: retain,
              release: release);

  /// Creates a block from a C function pointer.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  static objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      fromFunctionPointer(
              ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Pointer<objc.ObjCObject> Function(
                              ffi.Pointer<ffi.Void> arg0)>>
                  ptr) =>
          objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              objc.newPointerBlock(_ObjCBlock_objcObjCObject_ffiVoid_fnPtrCallable, ptr.cast()),
              retain: false,
              release: true);

  /// Creates a block from a Dart function.
  ///
  /// This block must be invoked by native code running on the same thread as
  /// the isolate that registered it. Invoking the block on the wrong thread
  /// will result in a crash.
  ///
  /// If `keepIsolateAlive` is true, this block will keep this isolate alive
  /// until it is garbage collected by both Dart and ObjC.
  static objc
      .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>
      fromFunction(objc.ObjCObjectBase Function(ffi.Pointer<ffi.Void>) fn,
              {bool keepIsolateAlive = true}) =>
          objc.ObjCBlock<
                  ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>(
              objc.newClosureBlock(
                  _ObjCBlock_objcObjCObject_ffiVoid_closureCallable,
                  (ffi.Pointer<ffi.Void> arg0) =>
                      fn(arg0).ref.retainAndAutorelease(),
                  keepIsolateAlive),
              retain: false,
              release: true);
}

/// Call operator for `objc.ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)>`.
extension ObjCBlock_objcObjCObject_ffiVoid_CallExtension on objc
    .ObjCBlock<ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<ffi.Void>)> {
  objc.ObjCObjectBase call(ffi.Pointer<ffi.Void> arg0) => objc.ObjCObjectBase(
      ref.pointer.ref.invoke
          .cast<
              ffi.NativeFunction<
                  ffi.Pointer<objc.ObjCObject> Function(
                      ffi.Pointer<objc.ObjCBlockImpl> block,
                      ffi.Pointer<ffi.Void> arg0)>>()
          .asFunction<
              ffi.Pointer<objc.ObjCObject> Function(
                  ffi.Pointer<objc.ObjCBlockImpl>,
                  ffi.Pointer<ffi.Void>)>()(ref.pointer, arg0),
      retain: true,
      release: true);
}

late final _sel_retain = objc.registerName("retain");
late final _sel_autorelease = objc.registerName("autorelease");

/// A class containing all supported types.
/// Generated class from Pigeon that represents data sent in messages.
class NIAllTypes extends objc.NSObject {
  NIAllTypes._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NIAllTypes] that points to the same underlying object as [other].
  NIAllTypes.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NIAllTypes] that wraps the given raw object pointer.
  NIAllTypes.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NIAllTypes].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_19nvye5(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NIAllTypes);
  }

  /// initWithABool:anInt:anInt64:aDouble:anEnum:aString:list:map:
  NIAllTypes initWithABool(bool aBool,
      {required int anInt,
      required int anInt64,
      required double aDouble,
      required NIAnEnum anEnum,
      required objc.NSString aString,
      required objc.NSArray list,
      required objc.NSDictionary map}) {
    final _ret = _objc_msgSend_1f0nfjp(
        this.ref.retainAndReturnPointer(),
        _sel_initWithABool_anInt_anInt64_aDouble_anEnum_aString_list_map_,
        aBool,
        anInt,
        anInt64,
        aDouble,
        anEnum.value,
        aString.ref.pointer,
        list.ref.pointer,
        map.ref.pointer);
    return NIAllTypes.castFromPointer(_ret, retain: false, release: true);
  }

  /// aBool
  bool get aBool {
    return _objc_msgSend_91o635(this.ref.pointer, _sel_aBool);
  }

  /// setABool:
  set aBool(bool value) {
    _objc_msgSend_1s56lr9(this.ref.pointer, _sel_setABool_, value);
  }

  /// anInt
  int get anInt {
    return _objc_msgSend_pysgoz(this.ref.pointer, _sel_anInt);
  }

  /// setAnInt:
  set anInt(int value) {
    _objc_msgSend_17gvxvj(this.ref.pointer, _sel_setAnInt_, value);
  }

  /// anInt64
  int get anInt64 {
    return _objc_msgSend_pysgoz(this.ref.pointer, _sel_anInt64);
  }

  /// setAnInt64:
  set anInt64(int value) {
    _objc_msgSend_17gvxvj(this.ref.pointer, _sel_setAnInt64_, value);
  }

  /// aDouble
  double get aDouble {
    return objc.useMsgSendVariants
        ? _objc_msgSend_1ukqyt8Fpret(this.ref.pointer, _sel_aDouble)
        : _objc_msgSend_1ukqyt8(this.ref.pointer, _sel_aDouble);
  }

  /// setADouble:
  set aDouble(double value) {
    _objc_msgSend_hwm8nu(this.ref.pointer, _sel_setADouble_, value);
  }

  /// anEnum
  NIAnEnum get anEnum {
    final _ret = _objc_msgSend_d3bb7e(this.ref.pointer, _sel_anEnum);
    return NIAnEnum.fromValue(_ret);
  }

  /// setAnEnum:
  set anEnum(NIAnEnum value) {
    _objc_msgSend_15w00rc(this.ref.pointer, _sel_setAnEnum_, value.value);
  }

  /// aString
  objc.NSString get aString {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_aString);
    return objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setAString:
  set aString(objc.NSString value) {
    _objc_msgSend_xtuoz7(this.ref.pointer, _sel_setAString_, value.ref.pointer);
  }

  /// list
  objc.NSArray get list {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_list);
    return objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// setList:
  set list(objc.NSArray value) {
    _objc_msgSend_xtuoz7(this.ref.pointer, _sel_setList_, value.ref.pointer);
  }

  /// map
  objc.NSDictionary get map {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_map);
    return objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMap:
  set map(objc.NSDictionary value) {
    _objc_msgSend_xtuoz7(this.ref.pointer, _sel_setMap_, value.ref.pointer);
  }

  /// init
  NIAllTypes init() {
    objc.checkOsVersionInternal('NIAllTypes.init',
        iOS: (false, (2, 0, 0)), macOS: (false, (10, 0, 0)));
    final _ret =
        _objc_msgSend_151sglz(this.ref.retainAndReturnPointer(), _sel_init);
    return NIAllTypes.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NIAllTypes new$() {
    final _ret = _objc_msgSend_151sglz(_class_NIAllTypes, _sel_new);
    return NIAllTypes.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NIAllTypes allocWithZone(ffi.Pointer<objc.NSZone> zone) {
    final _ret =
        _objc_msgSend_1cwp428(_class_NIAllTypes, _sel_allocWithZone_, zone);
    return NIAllTypes.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NIAllTypes alloc() {
    final _ret = _objc_msgSend_151sglz(_class_NIAllTypes, _sel_alloc);
    return NIAllTypes.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  NIAllTypes self$1() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_self);
    return NIAllTypes.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  NIAllTypes retain() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_retain);
    return NIAllTypes.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  NIAllTypes autorelease() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_autorelease);
    return NIAllTypes.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a new instance of NIAllTypes constructed with the default `new` method.
  factory NIAllTypes() => new$();
}

late final _class_NIHostIntegrationCoreApiSetup =
    objc.getClass("test_plugin.NIHostIntegrationCoreApiSetup");
late final _sel_getInstanceWithName_ =
    objc.registerName("getInstanceWithName:");
final _objc_msgSend_1sotr3r = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, ffi.Pointer<objc.ObjCObject>)>();
late final _class_NiTestsError = objc.getClass("test_plugin.NiTestsError");
late final _sel_code = objc.registerName("code");
late final _sel_setCode_ = objc.registerName("setCode:");
late final _sel_message = objc.registerName("message");
late final _sel_setMessage_ = objc.registerName("setMessage:");
late final _sel_details = objc.registerName("details");
late final _sel_setDetails_ = objc.registerName("setDetails:");
late final _sel_initWithCode_message_details_ =
    objc.registerName("initWithCode:message:details:");
final _objc_msgSend_11spmsz = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();

/// Error class for passing custom error details to Dart side.
class NiTestsError extends objc.NSObject {
  NiTestsError._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NiTestsError] that points to the same underlying object as [other].
  NiTestsError.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NiTestsError] that wraps the given raw object pointer.
  NiTestsError.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NiTestsError].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_19nvye5(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NiTestsError);
  }

  /// code
  objc.NSString? get code {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_code);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setCode:
  set code(objc.NSString? value) {
    _objc_msgSend_xtuoz7(
        this.ref.pointer, _sel_setCode_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// message
  objc.NSString? get message {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_message);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setMessage:
  set message(objc.NSString? value) {
    _objc_msgSend_xtuoz7(
        this.ref.pointer, _sel_setMessage_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// details
  objc.NSString? get details {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_details);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// setDetails:
  set details(objc.NSString? value) {
    _objc_msgSend_xtuoz7(
        this.ref.pointer, _sel_setDetails_, value?.ref.pointer ?? ffi.nullptr);
  }

  /// init
  NiTestsError init() {
    objc.checkOsVersionInternal('NiTestsError.init',
        iOS: (false, (2, 0, 0)), macOS: (false, (10, 0, 0)));
    final _ret =
        _objc_msgSend_151sglz(this.ref.retainAndReturnPointer(), _sel_init);
    return NiTestsError.castFromPointer(_ret, retain: false, release: true);
  }

  /// initWithCode:message:details:
  NiTestsError initWithCode(objc.NSString? code$1,
      {objc.NSString? message$1, objc.NSString? details$1}) {
    final _ret = _objc_msgSend_11spmsz(
        this.ref.retainAndReturnPointer(),
        _sel_initWithCode_message_details_,
        code$1?.ref.pointer ?? ffi.nullptr,
        message$1?.ref.pointer ?? ffi.nullptr,
        details$1?.ref.pointer ?? ffi.nullptr);
    return NiTestsError.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NiTestsError new$() {
    final _ret = _objc_msgSend_151sglz(_class_NiTestsError, _sel_new);
    return NiTestsError.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NiTestsError allocWithZone(ffi.Pointer<objc.NSZone> zone) {
    final _ret =
        _objc_msgSend_1cwp428(_class_NiTestsError, _sel_allocWithZone_, zone);
    return NiTestsError.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NiTestsError alloc() {
    final _ret = _objc_msgSend_151sglz(_class_NiTestsError, _sel_alloc);
    return NiTestsError.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  NiTestsError self$1() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_self);
    return NiTestsError.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  NiTestsError retain() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_retain);
    return NiTestsError.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  NiTestsError autorelease() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_autorelease);
    return NiTestsError.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a new instance of NiTestsError constructed with the default `new` method.
  factory NiTestsError() => new$();
}

late final _sel_noopWithWrappedError_ =
    objc.registerName("noopWithWrappedError:");
late final _sel_echoAllTypesWithEverything_wrappedError_ =
    objc.registerName("echoAllTypesWithEverything:wrappedError:");
final _objc_msgSend_15qeuct = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCObject>)>();
late final _sel_echoIntWithAnInt_wrappedError_ =
    objc.registerName("echoIntWithAnInt:wrappedError:");
late final _sel_echoDoubleWithADouble_wrappedError_ =
    objc.registerName("echoDoubleWithADouble:wrappedError:");
late final _sel_echoBoolWithABool_wrappedError_ =
    objc.registerName("echoBoolWithABool:wrappedError:");
late final _sel_echoStringWithAString_wrappedError_ =
    objc.registerName("echoStringWithAString:wrappedError:");
late final _sel_echoObjectWithAnObject_wrappedError_ =
    objc.registerName("echoObjectWithAnObject:wrappedError:");
late final _sel_echoListWithList_wrappedError_ =
    objc.registerName("echoListWithList:wrappedError:");
late final _sel_echoMapWithMap_wrappedError_ =
    objc.registerName("echoMapWithMap:wrappedError:");
late final _sel_echoEnumWithAnEnum_wrappedError_ =
    objc.registerName("echoEnumWithAnEnum:wrappedError:");
final _objc_msgSend_1k0qzru = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Long,
                ffi.Pointer<objc.ObjCObject>)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            int,
            ffi.Pointer<objc.ObjCObject>)>();

/// Generated setup class from Pigeon to register implemented NIHostIntegrationCoreApi classes.
class NIHostIntegrationCoreApiSetup extends objc.NSObject {
  NIHostIntegrationCoreApiSetup._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NIHostIntegrationCoreApiSetup] that points to the same underlying object as [other].
  NIHostIntegrationCoreApiSetup.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NIHostIntegrationCoreApiSetup] that wraps the given raw object pointer.
  NIHostIntegrationCoreApiSetup.castFromPointer(
      ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false,
      bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NIHostIntegrationCoreApiSetup].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_19nvye5(obj.ref.pointer, _sel_isKindOfClass_,
        _class_NIHostIntegrationCoreApiSetup);
  }

  /// init
  NIHostIntegrationCoreApiSetup init() {
    objc.checkOsVersionInternal('NIHostIntegrationCoreApiSetup.init',
        iOS: (false, (2, 0, 0)), macOS: (false, (10, 0, 0)));
    final _ret =
        _objc_msgSend_151sglz(this.ref.retainAndReturnPointer(), _sel_init);
    return NIHostIntegrationCoreApiSetup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// getInstanceWithName:
  static NIHostIntegrationCoreApiSetup? getInstanceWithName(
      objc.NSString name) {
    final _ret = _objc_msgSend_1sotr3r(_class_NIHostIntegrationCoreApiSetup,
        _sel_getInstanceWithName_, name.ref.pointer);
    return _ret.address == 0
        ? null
        : NIHostIntegrationCoreApiSetup.castFromPointer(_ret,
            retain: true, release: true);
  }

  /// A no-op function taking no arguments and returning no value, to sanity
  /// test basic calling.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  void noopWithWrappedError(NiTestsError wrappedError) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.noopWithWrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    _objc_msgSend_xtuoz7(
        this.ref.pointer, _sel_noopWithWrappedError_, wrappedError.ref.pointer);
  }

  /// Returns the passed object, to test serialization and deserialization.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  NIAllTypes? echoAllTypesWithEverything(NIAllTypes everything,
      {required NiTestsError wrappedError}) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.echoAllTypesWithEverything:wrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    final _ret = _objc_msgSend_15qeuct(
        this.ref.pointer,
        _sel_echoAllTypesWithEverything_wrappedError_,
        everything.ref.pointer,
        wrappedError.ref.pointer);
    return _ret.address == 0
        ? null
        : NIAllTypes.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns passed in int.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  objc.NSNumber? echoIntWithAnInt(objc.NSNumber anInt,
      {required NiTestsError wrappedError}) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.echoIntWithAnInt:wrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    final _ret = _objc_msgSend_15qeuct(
        this.ref.pointer,
        _sel_echoIntWithAnInt_wrappedError_,
        anInt.ref.pointer,
        wrappedError.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns passed in double.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  objc.NSNumber? echoDoubleWithADouble(objc.NSNumber aDouble,
      {required NiTestsError wrappedError}) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.echoDoubleWithADouble:wrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    final _ret = _objc_msgSend_15qeuct(
        this.ref.pointer,
        _sel_echoDoubleWithADouble_wrappedError_,
        aDouble.ref.pointer,
        wrappedError.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the passed in boolean.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  objc.NSNumber? echoBoolWithABool(objc.NSNumber aBool,
      {required NiTestsError wrappedError}) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.echoBoolWithABool:wrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    final _ret = _objc_msgSend_15qeuct(
        this.ref.pointer,
        _sel_echoBoolWithABool_wrappedError_,
        aBool.ref.pointer,
        wrappedError.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the passed in string.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  objc.NSString? echoStringWithAString(objc.NSString aString,
      {required NiTestsError wrappedError}) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.echoStringWithAString:wrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    final _ret = _objc_msgSend_15qeuct(
        this.ref.pointer,
        _sel_echoStringWithAString_wrappedError_,
        aString.ref.pointer,
        wrappedError.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSString.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the passed in generic Object.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  objc.ObjCObjectBase? echoObjectWithAnObject(objc.ObjCObjectBase anObject,
      {required NiTestsError wrappedError}) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.echoObjectWithAnObject:wrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    final _ret = _objc_msgSend_15qeuct(
        this.ref.pointer,
        _sel_echoObjectWithAnObject_wrappedError_,
        anObject.ref.pointer,
        wrappedError.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.ObjCObjectBase(_ret, retain: true, release: true);
  }

  /// Returns the passed list, to test serialization and deserialization.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  objc.NSArray? echoListWithList(objc.NSArray list,
      {required NiTestsError wrappedError}) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.echoListWithList:wrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    final _ret = _objc_msgSend_15qeuct(
        this.ref.pointer,
        _sel_echoListWithList_wrappedError_,
        list.ref.pointer,
        wrappedError.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSArray.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the passed map, to test serialization and deserialization.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  objc.NSDictionary? echoMapWithMap(objc.NSDictionary map,
      {required NiTestsError wrappedError}) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.echoMapWithMap:wrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    final _ret = _objc_msgSend_15qeuct(
        this.ref.pointer,
        _sel_echoMapWithMap_wrappedError_,
        map.ref.pointer,
        wrappedError.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSDictionary.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns the passed enum to test serialization and deserialization.
  ///
  /// iOS: introduced 13.0.0
  /// macOS: introduced 16.0.0
  objc.NSNumber? echoEnumWithAnEnum(NIAnEnum anEnum,
      {required NiTestsError wrappedError}) {
    objc.checkOsVersionInternal(
        'NIHostIntegrationCoreApiSetup.echoEnumWithAnEnum:wrappedError:',
        iOS: (false, (13, 0, 0)),
        macOS: (false, (16, 0, 0)));
    final _ret = _objc_msgSend_1k0qzru(
        this.ref.pointer,
        _sel_echoEnumWithAnEnum_wrappedError_,
        anEnum.value,
        wrappedError.ref.pointer);
    return _ret.address == 0
        ? null
        : objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// new
  static NIHostIntegrationCoreApiSetup new$() {
    final _ret =
        _objc_msgSend_151sglz(_class_NIHostIntegrationCoreApiSetup, _sel_new);
    return NIHostIntegrationCoreApiSetup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// allocWithZone:
  static NIHostIntegrationCoreApiSetup allocWithZone(
      ffi.Pointer<objc.NSZone> zone) {
    final _ret = _objc_msgSend_1cwp428(
        _class_NIHostIntegrationCoreApiSetup, _sel_allocWithZone_, zone);
    return NIHostIntegrationCoreApiSetup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// alloc
  static NIHostIntegrationCoreApiSetup alloc() {
    final _ret =
        _objc_msgSend_151sglz(_class_NIHostIntegrationCoreApiSetup, _sel_alloc);
    return NIHostIntegrationCoreApiSetup.castFromPointer(_ret,
        retain: false, release: true);
  }

  /// self
  NIHostIntegrationCoreApiSetup self$1() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_self);
    return NIHostIntegrationCoreApiSetup.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// retain
  NIHostIntegrationCoreApiSetup retain() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_retain);
    return NIHostIntegrationCoreApiSetup.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// autorelease
  NIHostIntegrationCoreApiSetup autorelease() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_autorelease);
    return NIHostIntegrationCoreApiSetup.castFromPointer(_ret,
        retain: true, release: true);
  }

  /// Returns a new instance of NIHostIntegrationCoreApiSetup constructed with the default `new` method.
  factory NIHostIntegrationCoreApiSetup() => new$();
}

late final _class_NSNumberWrapper =
    objc.getClass("test_plugin.NSNumberWrapper");
late final _sel_initWithNumber_type_ =
    objc.registerName("initWithNumber:type:");
final _objc_msgSend_9slupp = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Pointer<objc.ObjCObject> Function(
                ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>,
                ffi.Pointer<objc.ObjCObject>,
                ffi.Long)>>()
    .asFunction<
        ffi.Pointer<objc.ObjCObject> Function(
            ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>,
            ffi.Pointer<objc.ObjCObject>,
            int)>();
late final _sel_number = objc.registerName("number");
late final _sel_setNumber_ = objc.registerName("setNumber:");
late final _sel_type = objc.registerName("type");
final _objc_msgSend_1hz7y9r = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Long Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>)>>()
    .asFunction<
        int Function(
            ffi.Pointer<objc.ObjCObject>, ffi.Pointer<objc.ObjCSelector>)>();
late final _sel_setType_ = objc.registerName("setType:");
final _objc_msgSend_4sp4xj = objc.msgSendPointer
    .cast<
        ffi.NativeFunction<
            ffi.Void Function(ffi.Pointer<objc.ObjCObject>,
                ffi.Pointer<objc.ObjCSelector>, ffi.Long)>>()
    .asFunction<
        void Function(ffi.Pointer<objc.ObjCObject>,
            ffi.Pointer<objc.ObjCSelector>, int)>();

/// NSNumberWrapper
class NSNumberWrapper extends objc.NSObject {
  NSNumberWrapper._(ffi.Pointer<objc.ObjCObject> pointer,
      {bool retain = false, bool release = false})
      : super.castFromPointer(pointer, retain: retain, release: release);

  /// Constructs a [NSNumberWrapper] that points to the same underlying object as [other].
  NSNumberWrapper.castFrom(objc.ObjCObjectBase other)
      : this._(other.ref.pointer, retain: true, release: true);

  /// Constructs a [NSNumberWrapper] that wraps the given raw object pointer.
  NSNumberWrapper.castFromPointer(ffi.Pointer<objc.ObjCObject> other,
      {bool retain = false, bool release = false})
      : this._(other, retain: retain, release: release);

  /// Returns whether [obj] is an instance of [NSNumberWrapper].
  static bool isInstance(objc.ObjCObjectBase obj) {
    return _objc_msgSend_19nvye5(
        obj.ref.pointer, _sel_isKindOfClass_, _class_NSNumberWrapper);
  }

  /// initWithNumber:type:
  NSNumberWrapper initWithNumber(objc.NSNumber number, {required int type}) {
    final _ret = _objc_msgSend_9slupp(this.ref.retainAndReturnPointer(),
        _sel_initWithNumber_type_, number.ref.pointer, type);
    return NSNumberWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  /// number
  objc.NSNumber get number {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_number);
    return objc.NSNumber.castFromPointer(_ret, retain: true, release: true);
  }

  /// setNumber:
  set number(objc.NSNumber value) {
    _objc_msgSend_xtuoz7(this.ref.pointer, _sel_setNumber_, value.ref.pointer);
  }

  /// type
  int get type {
    return _objc_msgSend_1hz7y9r(this.ref.pointer, _sel_type);
  }

  /// setType:
  set type(int value) {
    _objc_msgSend_4sp4xj(this.ref.pointer, _sel_setType_, value);
  }

  /// init
  NSNumberWrapper init() {
    objc.checkOsVersionInternal('NSNumberWrapper.init',
        iOS: (false, (2, 0, 0)), macOS: (false, (10, 0, 0)));
    final _ret =
        _objc_msgSend_151sglz(this.ref.retainAndReturnPointer(), _sel_init);
    return NSNumberWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  /// new
  static NSNumberWrapper new$() {
    final _ret = _objc_msgSend_151sglz(_class_NSNumberWrapper, _sel_new);
    return NSNumberWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  /// allocWithZone:
  static NSNumberWrapper allocWithZone(ffi.Pointer<objc.NSZone> zone) {
    final _ret = _objc_msgSend_1cwp428(
        _class_NSNumberWrapper, _sel_allocWithZone_, zone);
    return NSNumberWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  /// alloc
  static NSNumberWrapper alloc() {
    final _ret = _objc_msgSend_151sglz(_class_NSNumberWrapper, _sel_alloc);
    return NSNumberWrapper.castFromPointer(_ret, retain: false, release: true);
  }

  /// self
  NSNumberWrapper self$1() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_self);
    return NSNumberWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// retain
  NSNumberWrapper retain() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_retain);
    return NSNumberWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// autorelease
  NSNumberWrapper autorelease() {
    final _ret = _objc_msgSend_151sglz(this.ref.pointer, _sel_autorelease);
    return NSNumberWrapper.castFromPointer(_ret, retain: true, release: true);
  }

  /// Returns a new instance of NSNumberWrapper constructed with the default `new` method.
  factory NSNumberWrapper() => new$();
}
