// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Autogenerated from Pigeon, do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:io' show Platform;
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:ffi/ffi.dart';
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:jni/jni.dart';
import 'package:objective_c/objective_c.dart';
import './jni_tests.gen.ffi.dart' as ffi_bridge;
import './jni_tests.gen.jni.dart' as jni_bridge;

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class _PigeonJniCodec {
  static Object? readValue(JObject? value) {
    if (value == null) {
      return null;
    } else if (value.isA<JLong>(JLong.type)) {
      return (value.as(JLong.type)).longValue();
    } else if (value.isA<JDouble>(JDouble.type)) {
      return (value.as(JDouble.type)).doubleValue();
    } else if (value.isA<JString>(JString.type)) {
      return (value.as(JString.type)).toDartString();
    } else if (value.isA<JBoolean>(JBoolean.type)) {
      return (value.as(JBoolean.type)).booleanValue();
    } else if (value.isA<JByteArray>(JByteArray.type)) {
      final Uint8List list = Uint8List(value.as(JByteArray.type).length);
      for (int i = 0; i < value.as(JByteArray.type).length; i++) {
        list[i] = value.as(JByteArray.type)[i];
      }
      return list;
    } else if (value.isA<JIntArray>(JIntArray.type)) {
      final Int32List list = Int32List(value.as(JIntArray.type).length);
      for (int i = 0; i < value.as(JIntArray.type).length; i++) {
        list[i] = value.as(JIntArray.type)[i];
      }
      return list;
    } else if (value.isA<JLongArray>(JLongArray.type)) {
      final Int64List list = Int64List(value.as(JLongArray.type).length);
      for (int i = 0; i < value.as(JLongArray.type).length; i++) {
        list[i] = value.as(JLongArray.type)[i];
      }
      return list;
    } else if (value.isA<JDoubleArray>(JDoubleArray.type)) {
      final Float64List list = Float64List(value.as(JDoubleArray.type).length);
      for (int i = 0; i < value.as(JDoubleArray.type).length; i++) {
        list[i] = value.as(JDoubleArray.type)[i];
      }
      return list;
    } else if (value.isA<JList<JObject>>(JList.type<JObject>(JObject.type))) {
      final JList<JObject?> list =
          (value.as(JList.type<JObject?>(JObject.nullableType)));
      final List<Object?> res = <Object?>[];
      for (int i = 0; i < list.length; i++) {
        res.add(readValue(list[i]));
      }
      return res;
    } else if (value.isA<JMap<JObject, JObject>>(
        JMap.type<JObject, JObject>(JObject.type, JObject.type))) {
      final JMap<JObject?, JObject?> map = (value.as(
          JMap.type<JObject?, JObject?>(
              JObject.nullableType, JObject.nullableType)));
      final Map<Object?, Object?> res = <Object?, Object?>{};
      for (final MapEntry<JObject?, JObject?> entry in map.entries) {
        res[readValue(entry.key)] = readValue(entry.value);
      }
      return res;
      // } else if (value.isA<jni_bridge.BasicClass>(jni_bridge.BasicClass.type)) {
      //   return BasicClass.fromJni(value.as(jni_bridge.BasicClass.type));
    } else if (value.isA<jni_bridge.JniAnEnum>(jni_bridge.JniAnEnum.type)) {
      return JniAnEnum.fromJni(value.as(jni_bridge.JniAnEnum.type));
    } else {
      throw ArgumentError.value(value);
    }
  }

  static T writeValue<T extends JObject?>(Object? value) {
    if (value == null) {
      return null as T;
    } else if (value is bool) {
      return JBoolean(value) as T;
    } else if (value is double) {
      return JDouble(value) as T;
      // ignore: avoid_double_and_int_checks
    } else if (value is int) {
      return JLong(value) as T;
    } else if (value is String) {
      return JString.fromString(value) as T;
    } else if (isTypeOrNullableType<JByteArray>(T)) {
      value as List<int>;
      final JByteArray array = JByteArray(value.length);
      for (int i = 0; i < value.length; i++) {
        array[i] = value[i];
      }
      return array as T;
    } else if (isTypeOrNullableType<JIntArray>(T)) {
      value as List<int>;
      final JIntArray array = JIntArray(value.length);
      for (int i = 0; i < value.length; i++) {
        array[i] = value[i];
      }
      return array as T;
    } else if (isTypeOrNullableType<JLongArray>(T)) {
      value as List<int>;
      final JLongArray array = JLongArray(value.length);
      for (int i = 0; i < value.length; i++) {
        array[i] = value[i];
      }
      return array as T;
    } else if (isTypeOrNullableType<JDoubleArray>(T)) {
      value as List<double>;
      final JDoubleArray array = JDoubleArray(value.length);
      for (int i = 0; i < value.length; i++) {
        array[i] = value[i];
      }
      return array as T;
    } else if (value is List<Object>) {
      final JList<JObject> res = JList<JObject>.array(JObject.type);
      for (int i = 0; i < value.length; i++) {
        res.add(writeValue(value[i]));
      }
      return res as T;
    } else if (value is List) {
      final JList<JObject?> res = JList<JObject?>.array(JObject.nullableType);
      for (int i = 0; i < value.length; i++) {
        res.add(writeValue(value[i]));
      }
      return res as T;
    } else if (value is Map<Object, Object>) {
      final JMap<JObject, JObject> res =
          JMap<JObject, JObject>.hash(JObject.type, JObject.type);
      for (final MapEntry<Object, Object> entry in value.entries) {
        res[writeValue(entry.key)] = writeValue(entry.value);
      }
      return res as T;
    } else if (value is Map<Object, Object?>) {
      final JMap<JObject, JObject?> res =
          JMap<JObject, JObject?>.hash(JObject.type, JObject.nullableType);
      for (final MapEntry<Object, Object?> entry in value.entries) {
        res[writeValue(entry.key)] = writeValue(entry.value);
      }
      return res as T;
    } else if (value is Map) {
      final JMap<JObject, JObject?> res =
          JMap<JObject, JObject?>.hash(JObject.type, JObject.nullableType);
      for (final MapEntry<Object?, Object?> entry in value.entries) {
        res[writeValue(entry.key)] = writeValue(entry.value);
      }
      return res as T;
      // } else if (value is BasicClass) {
      //   return value.toJni() as T;
    } else if (value is JniAnEnum) {
      return value.toJni() as T;
    } else {
      throw ArgumentError.value(value);
    }
  }
}

class _PigeonFfiCodec {
  static Object? readValue(ObjCObjectBase? value, [Type? outType]) {
    if (value == null) {
      return null;
    } else if (NSNumber.isInstance(value)) {
      value as NSNumber;
      switch (outType) {
        case const (int):
          return value.longValue;
        case const (double):
          return value.doubleValue;
        case const (bool):
          return value.boolValue;
        default:
          throw ArgumentError.value(value);
      }
    } else if (NSString.isInstance(value)) {
      return (NSString.castFrom(value)).toDartString();
      // } else if (value.isA<NSByteArray>(NSByteArray.type)) {
      //   final Uint8List list = Uint8List(value.as(NSByteArray.type).length);
      //   for (int i = 0; i < value.as(NSByteArray.type).length; i++) {
      //     list[i] = value.as(NSByteArray.type)[i];
      //   }
      //   return list;
      // } else if (value.isA<NSIntArray>(NSIntArray.type)) {
      //   final Int32List list = Int32List(value.as(NSIntArray.type).length);
      //   for (int i = 0; i < value.as(NSIntArray.type).length; i++) {
      //     list[i] = value.as(NSIntArray.type)[i];
      //   }
      //   return list;
      // } else if (value.isA<NSLongArray>(NSLongArray.type)) {
      //   final Int64List list = Int64List(value.as(NSLongArray.type).length);
      //   for (int i = 0; i < value.as(NSLongArray.type).length; i++) {
      //     list[i] = value.as(NSLongArray.type)[i];
      //   }
      //   return list;
      // } else if (value.isA<NSDoubleArray>(NSDoubleArray.type)) {
      //   final Float64List list = Float64List(value.as(NSDoubleArray.type).length);
      //   for (int i = 0; i < value.as(NSDoubleArray.type).length; i++) {
      //     list[i] = value.as(NSDoubleArray.type)[i];
      //   }
      //   return list;
    } else if (value is NSMutableArray) {
      final List<Object?> res = <Object?>[];
      for (int i = 0; i < value.length; i++) {
        res.add(readValue(value[i] as NSObject?));
      }
      return res;
    } else if (value is NSDictionary) {
      final Map<Object?, Object?> res = <Object?, Object?>{};
      for (final MapEntry<NSCopying?, ObjCObjectBase?> entry in value.entries) {
        res[readValue(entry.key as NSObject?)] =
            readValue(entry.value as NSObject?);
      }
      return res;
    } else if (ffi_bridge.NSNumberWrapper.isInstance(value)) {
      return convertNSNumberWrapperToDart(
          ffi_bridge.NSNumberWrapper.castFrom(value));
    } else if (ffi_bridge.BasicClass.isInstance(value)) {
      return BasicClass.fromFfi(ffi_bridge.BasicClass.castFrom(value));
    } else if (value is ffi_bridge.JniAnEnum) {
      return JniAnEnum.fromFfi(value as ffi_bridge.JniAnEnum);
    } else {
      throw ArgumentError.value(value);
    }
  }

  static T writeValue<T extends ObjCObjectBase?>(Object? value) {
    if (value == null) {
      return null as T;
    } else if (value is bool ||
        value is double ||
        value is int ||
        value is Enum) {
      if (T != NSNumber) {
        return convertNSNumberWrapperToFfi(value) as T;
      }
      if (value is bool) {
        return NSNumber.alloc().initWithLong(value ? 1 : 0) as T;
      }
      if (value is double) {
        return NSNumber.alloc().initWithDouble(value) as T;
      }
      if (value is int) {
        return NSNumber.alloc().initWithLong(value) as T;
      }
      if (value is Enum) {
        return NSNumber.alloc().initWithLong(value.index) as T;
      }
      return convertNSNumberWrapperToFfi(value) as T;
    } else if (value is String) {
      return NSString(value) as T;
      // } else if (isTypeOrNullableType<NSByteArray>(T)) {
      //   value as List<int>;
      //   final NSByteArray array = NSByteArray(value.length);
      //   for (int i = 0; i < value.length; i++) {
      //     array[i] = value[i];
      //   }
      //   return array as T;
      // } else if (isTypeOrNullableType<NSIntArray>(T)) {
      //   value as List<int>;
      //   final NSIntArray array = NSIntArray(value.length);
      //   for (int i = 0; i < value.length; i++) {
      //     array[i] = value[i];
      //   }
      //   return array as T;
      // } else if (isTypeOrNullableType<NSLongArray>(T)) {
      //   value as List<int>;
      //   final NSLongArray array = NSLongArray(value.length);
      //   for (int i = 0; i < value.length; i++) {
      //     array[i] = value[i];
      //   }
      //   return array as T;
      // } else if (isTypeOrNullableType<NSDoubleArray>(T)) {
      //   value as List<double>;
      //   final NSDoubleArray array = NSDoubleArray(value.length);
      //   for (int i = 0; i < value.length; i++) {
      //     array[i] = value[i];
      //   }
      //   return array as T;
    } else if (value is List) {
      final NSMutableArray res = NSMutableArray();
      for (int i = 0; i < value.length; i++) {
        res.add(writeValue(value[i]));
      }
      return res as T;
    } else if (value is Map) {
      final NSMutableDictionary res = NSMutableDictionary();
      for (final MapEntry<Object?, Object?> entry in value.entries) {
        res.setObject(writeValue(entry.value), forKey: writeValue(entry.key));
      }
      return res as T;
    } else if (value is BasicClass) {
      return value.toFfi() as T;
    } else {
      throw ArgumentError.value(value);
    }
  }
}

Object? convertNSNumberWrapperToDart(ffi_bridge.NSNumberWrapper value) {
  switch (value.type) {
    case 1:
      return value.number.longValue;
    case 2:
      return value.number.doubleValue;
    case 3:
      return value.number.boolValue;
    case 4:
      return JniAnEnum.fromNSNumber(value.number);
    default:
      throw ArgumentError.value(value);
  }
}

ffi_bridge.NSNumberWrapper convertNSNumberWrapperToFfi(Object value) {
  switch (value) {
    case int _:
      return ffi_bridge.NSNumberWrapper.alloc()
          .initWithNumber(NSNumber.alloc().initWithLong(value), type: 1);
    case double _:
      return ffi_bridge.NSNumberWrapper.alloc()
          .initWithNumber(NSNumber.alloc().initWithDouble(value), type: 2);
    case bool _:
      return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(
          NSNumber.alloc().initWithLong(value ? 1 : 0),
          type: 3);
    case JniAnEnum _:
      return ffi_bridge.NSNumberWrapper.alloc()
          .initWithNumber(value.toNSNumber(), type: 4);
    default:
      throw ArgumentError.value(value);
  }
}

bool isType<T>(Type t) => T == t;
bool isTypeOrNullableType<T>(Type t) => isType<T>(t) || isType<T?>(t);
void _throwNoInstanceError(String channelName) {
  String nameString = 'named $channelName';
  if (channelName == defaultInstanceName) {
    nameString = 'with no name';
  }
  final String error = 'No instance $nameString has been registered.';
  throw ArgumentError(error);
}

enum JniAnEnum {
  one,
  two,
  three,
  fortyTwo,
  fourHundredTwentyTwo;

  jni_bridge.JniAnEnum toJni() {
    return jni_bridge.JniAnEnum.Companion.ofRaw(index)!;
  }

  static JniAnEnum? fromJni(jni_bridge.JniAnEnum? jniEnum) {
    return jniEnum == null ? null : JniAnEnum.values[jniEnum.getRaw()];
  }

  ffi_bridge.JniAnEnum toFfi() {
    return ffi_bridge.JniAnEnum.values[index];
  }

  static JniAnEnum fromFfi(ffi_bridge.JniAnEnum ffiEnum) {
    return JniAnEnum.values[ffiEnum.index];
  }

  NSNumber toNSNumber() {
    return NSNumber.alloc().initWithLong(index);
  }

  static JniAnEnum? fromNSNumber(NSNumber? ffiEnum) {
    return ffiEnum == null ? null : JniAnEnum.values[ffiEnum.intValue];
  }
}

class BasicClass {
  BasicClass({
    this.aBool = false,
    this.anInt = 0,
    this.anInt64 = 0,
    this.aDouble = 0,
    this.anEnum = JniAnEnum.one,
    this.aString = '',
  });

  bool aBool;

  int anInt;

  int anInt64;

  double aDouble;

  JniAnEnum anEnum;

  String aString;

  List<Object?> _toList() {
    return <Object?>[
      aBool,
      anInt,
      anInt64,
      aDouble,
      anEnum,
      aString,
    ];
  }

  // jni_bridge.BasicClass toJni() {
  //   return jni_bridge.BasicClass(
  //     aBool: aBool,
  //     anInt: anInt,
  //     anInt64: anInt64,
  //     aDouble: aDouble,
  //     anEnum: anEnum.toJni(),
  //     aString: _PigeonJniCodec.writeValue<JString>(aString),
  //   );
  // }

  ffi_bridge.BasicClass toFfi() {
    return ffi_bridge.BasicClass.alloc().initWithABool(
      aBool,
      anInt: anInt,
      anInt64: anInt64,
      aDouble: aDouble,
      anEnum: ffi_bridge.JniAnEnum.values[anEnum.index],
      aString: _PigeonFfiCodec.writeValue<NSString>(aString),
    );
  }

  Object encode() {
    return _toList();
  }

  // static BasicClass? fromJni(jni_bridge.BasicClass? jniClass) {
  //   return jniClass == null
  //       ? null
  //       : BasicClass(
  //           aBool: jniClass.getABool(),
  //           anInt: jniClass.getAnInt(),
  //           anInt64: jniClass.getAnInt64(),
  //           aDouble: jniClass.getADouble(),
  //           anEnum: JniAnEnum.fromJni(jniClass.getAnEnum())!,
  //           aString: jniClass.getAString().toDartString(releaseOriginal: true),
  //         );
  // }

  static BasicClass? fromFfi(ffi_bridge.BasicClass? ffiClass) {
    return ffiClass == null
        ? null
        : BasicClass(
            aBool: ffiClass.aBool,
            anInt: ffiClass.anInt,
            anInt64: ffiClass.anInt64,
            aDouble: ffiClass.aDouble,
            anEnum: JniAnEnum.values[ffiClass.anEnum.index],
            aString: ffiClass.aString.toDartString(),
          );
  }

  static BasicClass decode(Object result) {
    result as List<Object?>;
    return BasicClass(
      aBool: result[0]! as bool,
      anInt: result[1]! as int,
      anInt64: result[2]! as int,
      aDouble: result[3]! as double,
      anEnum: result[4]! as JniAnEnum,
      aString: result[5]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! BasicClass || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return aBool == other.aBool &&
        anInt == other.anInt &&
        anInt64 == other.anInt64 &&
        aDouble == other.aDouble &&
        anEnum == other.anEnum &&
        aString == other.aString;
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList());
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is JniAnEnum) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is BasicClass) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : JniAnEnum.values[value];
      case 130:
        return BasicClass.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

const String defaultInstanceName =
    'PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u';

class JniHostIntegrationCoreApiForNativeInterop {
  JniHostIntegrationCoreApiForNativeInterop._withRegistrar(
      {jni_bridge.JniHostIntegrationCoreApiRegistrar? jniApi,
      ffi_bridge.JniHostIntegrationCoreApiSetup? ffiApi})
      : _jniApi = jniApi,
        _ffiApi = ffiApi;

  /// Returns instance of JniHostIntegrationCoreApiForNativeInterop with specified [channelName] if one has been registered.
  static JniHostIntegrationCoreApiForNativeInterop? getInstance(
      {String channelName = defaultInstanceName}) {
    late JniHostIntegrationCoreApiForNativeInterop res;
    if (Platform.isAndroid) {
      final jni_bridge.JniHostIntegrationCoreApiRegistrar? link =
          jni_bridge.JniHostIntegrationCoreApiRegistrar()
              .getInstance(JString.fromString(channelName));
      if (link == null) {
        _throwNoInstanceError(channelName);
      }
      res = JniHostIntegrationCoreApiForNativeInterop._withRegistrar(
          jniApi: link);
    } else if (Platform.isIOS || Platform.isMacOS) {
      final ffi_bridge.JniHostIntegrationCoreApiSetup? link =
          ffi_bridge.JniHostIntegrationCoreApiSetup.getInstanceWithName(
              NSString(channelName));
      if (link == null) {
        _throwNoInstanceError(channelName);
      }
      res = JniHostIntegrationCoreApiForNativeInterop._withRegistrar(
          ffiApi: link);
    }
    return res;
  }

  late final jni_bridge.JniHostIntegrationCoreApiRegistrar? _jniApi;
  late final ffi_bridge.JniHostIntegrationCoreApiSetup? _ffiApi;

  void noop() {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
        _ffiApi.noopWithWrappedError(error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          return;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  int echoInt(int anInt) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
        final NSNumber? res = _ffiApi.echoIntWithAnInt(
            _PigeonFfiCodec.writeValue<NSNumber>(anInt),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final int dartTypeRes = res!.longValue;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  double echoDouble(double aDouble) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
        final NSNumber? res = _ffiApi.echoDoubleWithADouble(
            _PigeonFfiCodec.writeValue<NSNumber>(aDouble),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final double dartTypeRes = res!.doubleValue;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  bool echoBool(bool aBool) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
        final NSNumber? res = _ffiApi.echoBoolWithABool(
            _PigeonFfiCodec.writeValue<NSNumber>(aBool),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final bool dartTypeRes = res!.boolValue;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  String echoString(String aString) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
        final NSString? res = _ffiApi.echoStringWithAString(
            _PigeonFfiCodec.writeValue<NSString>(aString),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final String dartTypeRes = res!.toDartString();
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  BasicClass echoBasicClass(BasicClass aBasicClass) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
        final ffi_bridge.BasicClass? res =
            _ffiApi.echoBasicClassWithABasicClass(aBasicClass.toFfi(),
                wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final BasicClass dartTypeRes = BasicClass.fromFfi(res)!;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  JniAnEnum echoEnum(JniAnEnum anEnum) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
        final NSNumber? res = _ffiApi.echoEnumWithAnEnum(
            ffi_bridge.JniAnEnum.values[anEnum.index],
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final JniAnEnum dartTypeRes =
              (_PigeonFfiCodec.readValue(res)! as JniAnEnum);
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }

  Object echoObject(Object anObject) {
    try {
      if (_jniApi != null) {
      } else if (_ffiApi != null) {
        final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
        final ObjCObjectBase? res = _ffiApi.echoObjectWithAnObject(
            _PigeonFfiCodec.writeValue<ObjCObjectBase>(anObject),
            wrappedError: error);
        if (error.code != null) {
          throw PlatformException(
              code: error.code!.toDartString(),
              message: error.message?.toDartString(),
              details: error.details.toString());
        } else {
          final Object dartTypeRes = _PigeonFfiCodec.readValue(res)!;
          return dartTypeRes;
        }
      }
    } on JniException catch (e) {
      throw PlatformException(
        code: 'PlatformException',
        message: e.message,
        stacktrace: e.stackTrace,
      );
    } catch (e) {
      rethrow;
    }
    throw Exception("this shouldn't be possible");
  }
}

class JniHostIntegrationCoreApi {
  /// Constructor for [JniHostIntegrationCoreApi]. The [binaryMessenger] named argument is
  /// available for dependency injection. If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  JniHostIntegrationCoreApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
    JniHostIntegrationCoreApiForNativeInterop? nativeInteropApi,
  })  : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '',
        _nativeInteropApi = nativeInteropApi;

  /// Creates an instance of [JniHostIntegrationCoreApi] that requests an instance of
  /// [JniHostIntegrationCoreApiForNativeInterop] from the host platform with a matching instance name
  /// to [messageChannelSuffix] or the default instance.
  ///
  /// Throws [ArgumentError] if no matching instance can be found.
  factory JniHostIntegrationCoreApi.createWithNativeInteropApi({
    BinaryMessenger? binaryMessenger,
    String messageChannelSuffix = '',
  }) {
    JniHostIntegrationCoreApiForNativeInterop? nativeInteropApi;
    String nativeInteropApiInstanceName = '';
    if (Platform.isAndroid) {
      if (messageChannelSuffix.isEmpty) {
        nativeInteropApi =
            JniHostIntegrationCoreApiForNativeInterop.getInstance();
      } else {
        nativeInteropApiInstanceName = messageChannelSuffix;
        nativeInteropApi =
            JniHostIntegrationCoreApiForNativeInterop.getInstance(
                channelName: messageChannelSuffix);
      }
    }
    if (nativeInteropApi == null) {
      throw ArgumentError(
          'No JniHostIntegrationCoreApi instance with ${nativeInteropApiInstanceName.isEmpty ? 'no ' : ''} instance name ${nativeInteropApiInstanceName.isNotEmpty ? '"$nativeInteropApiInstanceName"' : ''} "$nativeInteropApiInstanceName "}found.');
    }
    return JniHostIntegrationCoreApi(
      binaryMessenger: binaryMessenger,
      messageChannelSuffix: messageChannelSuffix,
      nativeInteropApi: nativeInteropApi,
    );
  }

  final BinaryMessenger? pigeonVar_binaryMessenger;
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  final JniHostIntegrationCoreApiForNativeInterop? _nativeInteropApi;

  Future<void> noop() async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.noop();
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.JniHostIntegrationCoreApi.noop$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> echoInt(int anInt) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoInt(anInt);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.JniHostIntegrationCoreApi.echoInt$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[anInt]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as int?)!;
    }
  }

  Future<double> echoDouble(double aDouble) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoDouble(aDouble);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.JniHostIntegrationCoreApi.echoDouble$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aDouble]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as double?)!;
    }
  }

  Future<bool> echoBool(bool aBool) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoBool(aBool);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.JniHostIntegrationCoreApi.echoBool$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aBool]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<String> echoString(String aString) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoString(aString);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.JniHostIntegrationCoreApi.echoString$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aString]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }

  Future<BasicClass> echoBasicClass(BasicClass aBasicClass) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoBasicClass(aBasicClass);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.JniHostIntegrationCoreApi.echoBasicClass$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[aBasicClass]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as BasicClass?)!;
    }
  }

  Future<JniAnEnum> echoEnum(JniAnEnum anEnum) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoEnum(anEnum);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.JniHostIntegrationCoreApi.echoEnum$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[anEnum]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as JniAnEnum?)!;
    }
  }

  Future<Object> echoObject(Object anObject) async {
    if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) &&
        _nativeInteropApi != null) {
      return _nativeInteropApi.echoObject(anObject);
    }
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.pigeon_integration_tests.JniHostIntegrationCoreApi.echoObject$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture =
        pigeonVar_channel.send(<Object?>[anObject]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return pigeonVar_replyList[0]!;
    }
  }
}
