// // Copyright 2013 The Flutter Authors. All rights reserved.
// // Use of this source code is governed by a BSD-style license that can be
// // found in the LICENSE file.
// //
// // Autogenerated from Pigeon, do not edit directly.
// // See also: https://pub.dev/packages/pigeon
// // ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

// import 'dart:async';
// import 'dart:io' show Platform;
// import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

// import 'package:ffi/ffi.dart';
// import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
// import 'package:flutter/services.dart';
// import 'package:jni/jni.dart';
// import 'package:objective_c/objective_c.dart';
// import './jni_tests.gen.ffi.dart' as ffi_bridge;
// import './jni_tests.gen.jni.dart' as jni_bridge;

// PlatformException _createConnectionError(String channelName) {
//   return PlatformException(
//     code: 'channel-error',
//     message: 'Unable to establish connection on channel: "$channelName".',
//   );
// }

// List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
//   if (empty) {
//     return <Object?>[];
//   }
//   if (error == null) {
//     return <Object?>[result];
//   }
//   return <Object?>[error.code, error.message, error.details];
// }

// bool _deepEquals(Object? a, Object? b) {
//   if (a is List && b is List) {
//     return a.length == b.length &&
//         a.indexed
//         .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
//   }
//   if (a is Map && b is Map) {
//     final Iterable<Object?> keys = (a as Map<Object?, Object?>).keys;
//     return a.length == b.length && keys.every((Object? key) =>
//         (b as Map<Object?, Object?>).containsKey(key) &&
//         _deepEquals(a[key], b[key]));
//   }
//   return a == b;
// }

// class _PigeonJniCodec {
//   static Object? readValue(JObject? value) {
//     if (value == null) {
//       return null;
//     } else if (value.isA<JLong>(JLong.type)) {
//       return (value.as(JLong.type)).longValue();
//     } else if (value.isA<JDouble>(JDouble.type)) {
//       return (value.as(JDouble.type)).doubleValue();
//     } else if (value.isA<JString>(JString.type)) {
//       return (value.as(JString.type)).toDartString();
//     } else if (value.isA<JBoolean>(JBoolean.type)) {
//       return (value.as(JBoolean.type)).booleanValue();
//     } else if (value.isA<JByteArray>(JByteArray.type)) {
//       final Uint8List list = Uint8List(value.as(JByteArray.type).length);
//       for (int i = 0; i < value.as(JByteArray.type).length; i++) {
//         list[i] = value.as(JByteArray.type)[i];
//       }
//       return list;
//     } else if (value.isA<JIntArray>(JIntArray.type)) {
//       final Int32List list = Int32List(value.as(JIntArray.type).length);
//       for (int i = 0; i < value.as(JIntArray.type).length; i++) {
//         list[i] = value.as(JIntArray.type)[i];
//       }
//       return list;
//     } else if (value.isA<JLongArray>(JLongArray.type)) {
//       final Int64List list = Int64List(value.as(JLongArray.type).length);
//       for (int i = 0; i < value.as(JLongArray.type).length; i++) {
//         list[i] = value.as(JLongArray.type)[i];
//       }
//       return list;
//     } else if (value.isA<JDoubleArray>(JDoubleArray.type)) {
//       final Float64List list = Float64List(value.as(JDoubleArray.type).length);
//       for (int i = 0; i < value.as(JDoubleArray.type).length; i++) {
//         list[i] = value.as(JDoubleArray.type)[i];
//       }
//       return list;
//     } else if (value.isA<JList<JObject>>(JList.type<JObject>(JObject.type))) {
//       final JList<JObject?> list = (value.as(JList.type<JObject?>(JObject.nullableType)));
//       final List<Object?> res = <Object?>[];
//       for (int i = 0; i < list.length; i++) {
//         res.add(readValue(list[i]));
//       }
//       return res;
//     } else if (value.isA<JMap<JObject, JObject>>(
//         JMap.type<JObject, JObject>(JObject.type, JObject.type))) {
//       final JMap<JObject?, JObject?> map =
//           (value.as(JMap.type<JObject?, JObject?>(JObject.nullableType, JObject.nullableType)));
//       final Map<Object?, Object?> res = <Object?, Object?>{};
//       for (final MapEntry<JObject?, JObject?> entry in map.entries) {
//         res[readValue(entry.key)] = readValue(entry.value);
//       }
//       return res;
//           } else if (value.isA<jni_bridge.NIUnusedClass>(
//           jni_bridge.NIUnusedClass.type)) {
//         return NIUnusedClass.fromJni(value.as(jni_bridge.NIUnusedClass.type));
//               } else if (value.isA<jni_bridge.NIAllTypes>(
//           jni_bridge.NIAllTypes.type)) {
//         return NIAllTypes.fromJni(value.as(jni_bridge.NIAllTypes.type));
//               } else if (value.isA<jni_bridge.NIAllNullableTypes>(
//           jni_bridge.NIAllNullableTypes.type)) {
//         return NIAllNullableTypes.fromJni(value.as(jni_bridge.NIAllNullableTypes.type));
//               } else if (value.isA<jni_bridge.NIAllNullableTypesWithoutRecursion>(
//           jni_bridge.NIAllNullableTypesWithoutRecursion.type)) {
//         return NIAllNullableTypesWithoutRecursion.fromJni(value.as(jni_bridge.NIAllNullableTypesWithoutRecursion.type));
//               } else if (value.isA<jni_bridge.NIAllClassesWrapper>(
//           jni_bridge.NIAllClassesWrapper.type)) {
//         return NIAllClassesWrapper.fromJni(value.as(jni_bridge.NIAllClassesWrapper.type));

//           } else if (value.isA<jni_bridge.NIAnEnum>(
//           jni_bridge.NIAnEnum.type)) {
//         return NIAnEnum.fromJni(value.as(jni_bridge.NIAnEnum.type));
//               } else if (value.isA<jni_bridge.NIAnotherEnum>(
//           jni_bridge.NIAnotherEnum.type)) {
//         return NIAnotherEnum.fromJni(value.as(jni_bridge.NIAnotherEnum.type));

//     } else {
//       throw ArgumentError.value(value);
//     }
//   }

//   static T writeValue<T extends JObject?>(Object? value) {
//     if (value == null) {
//       return null as T;
//     } else if (value is bool) {
//       return JBoolean(value) as T;
//     } else if (value is double) {
//       return JDouble(value) as T;
//       // ignore: avoid_double_and_int_checks
//     } else if (value is int) {
//       return JLong(value) as T;
//     } else if (value is String) {
//       return JString.fromString(value) as T;
//     } else if (isTypeOrNullableType<JByteArray>(T)) {
//       value as List<int>;
//       final JByteArray array = JByteArray(value.length);
//       for (int i = 0; i < value.length; i++) {
//         array[i] = value[i];
//       }
//       return array as T;
//     } else if (isTypeOrNullableType<JIntArray>(T)) {
//       value as List<int>;
//       final JIntArray array = JIntArray(value.length);
//       for (int i = 0; i < value.length; i++) {
//         array[i] = value[i];
//       }
//       return array as T;
//     } else if (isTypeOrNullableType<JLongArray>(T)) {
//       value as List<int>;
//       final JLongArray array = JLongArray(value.length);
//       for (int i = 0; i < value.length; i++) {
//         array[i] = value[i];
//       }
//       return array as T;
//     } else if (isTypeOrNullableType<JDoubleArray>(T)) {
//       value as List<double>;
//       final JDoubleArray array = JDoubleArray(value.length);
//       for (int i = 0; i < value.length; i++) {
//         array[i] = value[i];
//       }
//       return array as T;
//         } else if (value is List<bool> && isTypeOrNullableType<JList<JBoolean>>(T)) {
//       final JList<JBoolean> res =
//           JList<JBoolean>.array(JBoolean.type);
//       for (final bool entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<double> && isTypeOrNullableType<JList<JDouble>>(T)) {
//       final JList<JDouble> res =
//           JList<JDouble>.array(JDouble.type);
//       for (final double entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<int> && isTypeOrNullableType<JList<JLong>>(T)) {
//       final JList<JLong> res =
//           JList<JLong>.array(JLong.type);
//       for (final int entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<String> && isTypeOrNullableType<JList<JString>>(T)) {
//       final JList<JString> res =
//           JList<JString>.array(JString.type);
//       for (final String entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<NIAllNullableTypes> && isTypeOrNullableType<JList<jni_bridge.NIAllNullableTypes>>(T)) {
//       final JList<jni_bridge.NIAllNullableTypes> res =
//           JList<jni_bridge.NIAllNullableTypes>.array(jni_bridge.NIAllNullableTypes.type);
//       for (final NIAllNullableTypes entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<NIAnEnum> && isTypeOrNullableType<JList<jni_bridge.NIAnEnum>>(T)) {
//       final JList<jni_bridge.NIAnEnum> res =
//           JList<jni_bridge.NIAnEnum>.array(jni_bridge.NIAnEnum.type);
//       for (final NIAnEnum entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<NIAllNullableTypesWithoutRecursion?> && isTypeOrNullableType<JList<jni_bridge.NIAllNullableTypesWithoutRecursion?>>(T)) {
//       final JList<jni_bridge.NIAllNullableTypesWithoutRecursion?> res =
//           JList<jni_bridge.NIAllNullableTypesWithoutRecursion?>.array(jni_bridge.NIAllNullableTypesWithoutRecursion.nullableType);
//       for (final NIAllNullableTypesWithoutRecursion? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<NIAllTypes?> && isTypeOrNullableType<JList<jni_bridge.NIAllTypes?>>(T)) {
//       final JList<jni_bridge.NIAllTypes?> res =
//           JList<jni_bridge.NIAllTypes?>.array(jni_bridge.NIAllTypes.nullableType);
//       for (final NIAllTypes? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<bool?> && isTypeOrNullableType<JList<JBoolean?>>(T)) {
//       final JList<JBoolean?> res =
//           JList<JBoolean?>.array(JBoolean.nullableType);
//       for (final bool? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<double?> && isTypeOrNullableType<JList<JDouble?>>(T)) {
//       final JList<JDouble?> res =
//           JList<JDouble?>.array(JDouble.nullableType);
//       for (final double? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<int?> && isTypeOrNullableType<JList<JLong?>>(T)) {
//       final JList<JLong?> res =
//           JList<JLong?>.array(JLong.nullableType);
//       for (final int? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<String?> && isTypeOrNullableType<JList<JString?>>(T)) {
//       final JList<JString?> res =
//           JList<JString?>.array(JString.nullableType);
//       for (final String? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<NIAllNullableTypes?> && isTypeOrNullableType<JList<jni_bridge.NIAllNullableTypes?>>(T)) {
//       final JList<jni_bridge.NIAllNullableTypes?> res =
//           JList<jni_bridge.NIAllNullableTypes?>.array(jni_bridge.NIAllNullableTypes.nullableType);
//       for (final NIAllNullableTypes? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<NIAnEnum?> && isTypeOrNullableType<JList<jni_bridge.NIAnEnum?>>(T)) {
//       final JList<jni_bridge.NIAnEnum?> res =
//           JList<jni_bridge.NIAnEnum?>.array(jni_bridge.NIAnEnum.nullableType);
//       for (final NIAnEnum? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<List<Object?>> && isTypeOrNullableType<JList<JList<JObject?>>>(T)) {
//       final JList<JList<JObject?>> res =
//           JList<JList<JObject?>>.array(JList.type(JObject.nullableType));
//       for (final List<Object?> entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<List<Object?>?> && isTypeOrNullableType<JList<JList<JObject?>?>>(T)) {
//       final JList<JList<JObject?>?> res =
//           JList<JList<JObject?>?>.array(JList.nullableType(JObject.nullableType));
//       for (final List<Object?>? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<Map<Object?, Object?>> && isTypeOrNullableType<JList<JMap<JObject?, JObject?>>>(T)) {
//       final JList<JMap<JObject?, JObject?>> res =
//           JList<JMap<JObject?, JObject?>>.array(JMap.type(JObject.nullableType, JObject.nullableType));
//       for (final Map<Object?, Object?> entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;
//             } else if (value is List<Map<Object?, Object?>?> && isTypeOrNullableType<JList<JMap<JObject?, JObject?>?>>(T)) {
//       final JList<JMap<JObject?, JObject?>?> res =
//           JList<JMap<JObject?, JObject?>?>.array(JMap.nullableType(JObject.nullableType, JObject.nullableType));
//       for (final Map<Object?, Object?>? entry in value) {
//         res.add(writeValue(entry));
//       }
//       return res as T;

//     } else if (value is List<Object>) {
//       final JList<JObject> res = JList<JObject>.array(JObject.type);
//       for (int i = 0; i < value.length; i++) {
//         res.add(writeValue(value[i]));
//       }
//       return res as T;
//     } else if (value is List) {
//       final JList<JObject?> res = JList<JObject?>.array(JObject.nullableType);
//       for (int i = 0; i < value.length; i++) {
//         res.add(writeValue(value[i]));
//       }
//       return res as T;
//         } else if (value is Map<int, NIAllNullableTypes> && isTypeOrNullableType<JMap<JLong, jni_bridge.NIAllNullableTypes>>(T)) {
//       final JMap<JLong, jni_bridge.NIAllNullableTypes> res =
//           JMap<JLong, jni_bridge.NIAllNullableTypes>.hash(JLong.type, jni_bridge.NIAllNullableTypes.type);
//       for (final MapEntry<int, NIAllNullableTypes> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<NIAnEnum, NIAnEnum> && isTypeOrNullableType<JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum>>(T)) {
//       final JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum> res =
//           JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum>.hash(jni_bridge.NIAnEnum.type, jni_bridge.NIAnEnum.type);
//       for (final MapEntry<NIAnEnum, NIAnEnum> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<int, int> && isTypeOrNullableType<JMap<JLong, JLong>>(T)) {
//       final JMap<JLong, JLong> res =
//           JMap<JLong, JLong>.hash(JLong.type, JLong.type);
//       for (final MapEntry<int, int> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<String, String> && isTypeOrNullableType<JMap<JString, JString>>(T)) {
//       final JMap<JString, JString> res =
//           JMap<JString, JString>.hash(JString.type, JString.type);
//       for (final MapEntry<String, String> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<int?, NIAllNullableTypesWithoutRecursion?> && isTypeOrNullableType<JMap<JLong?, jni_bridge.NIAllNullableTypesWithoutRecursion?>>(T)) {
//       final JMap<JLong?, jni_bridge.NIAllNullableTypesWithoutRecursion?> res =
//           JMap<JLong?, jni_bridge.NIAllNullableTypesWithoutRecursion?>.hash(JLong.nullableType, jni_bridge.NIAllNullableTypesWithoutRecursion.nullableType);
//       for (final MapEntry<int?, NIAllNullableTypesWithoutRecursion?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<int?, NIAllTypes?> && isTypeOrNullableType<JMap<JLong?, jni_bridge.NIAllTypes?>>(T)) {
//       final JMap<JLong?, jni_bridge.NIAllTypes?> res =
//           JMap<JLong?, jni_bridge.NIAllTypes?>.hash(JLong.nullableType, jni_bridge.NIAllTypes.nullableType);
//       for (final MapEntry<int?, NIAllTypes?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<int?, NIAllNullableTypes?> && isTypeOrNullableType<JMap<JLong?, jni_bridge.NIAllNullableTypes?>>(T)) {
//       final JMap<JLong?, jni_bridge.NIAllNullableTypes?> res =
//           JMap<JLong?, jni_bridge.NIAllNullableTypes?>.hash(JLong.nullableType, jni_bridge.NIAllNullableTypes.nullableType);
//       for (final MapEntry<int?, NIAllNullableTypes?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<NIAnEnum?, NIAnEnum?> && isTypeOrNullableType<JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?>>(T)) {
//       final JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?> res =
//           JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?>.hash(jni_bridge.NIAnEnum.nullableType, jni_bridge.NIAnEnum.nullableType);
//       for (final MapEntry<NIAnEnum?, NIAnEnum?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<int?, int?> && isTypeOrNullableType<JMap<JLong?, JLong?>>(T)) {
//       final JMap<JLong?, JLong?> res =
//           JMap<JLong?, JLong?>.hash(JLong.nullableType, JLong.nullableType);
//       for (final MapEntry<int?, int?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<String?, String?> && isTypeOrNullableType<JMap<JString?, JString?>>(T)) {
//       final JMap<JString?, JString?> res =
//           JMap<JString?, JString?>.hash(JString.nullableType, JString.nullableType);
//       for (final MapEntry<String?, String?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<int, List<Object?>> && isTypeOrNullableType<JMap<JLong, JList<JObject?>>>(T)) {
//       final JMap<JLong, JList<JObject?>> res =
//           JMap<JLong, JList<JObject?>>.hash(JLong.type, JList.type(JObject.nullableType));
//       for (final MapEntry<int, List<Object?>> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<int?, List<Object?>?> && isTypeOrNullableType<JMap<JLong?, JList<JObject?>?>>(T)) {
//       final JMap<JLong?, JList<JObject?>?> res =
//           JMap<JLong?, JList<JObject?>?>.hash(JLong.nullableType, JList.nullableType(JObject.nullableType));
//       for (final MapEntry<int?, List<Object?>?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<int, Map<Object?, Object?>> && isTypeOrNullableType<JMap<JLong, JMap<JObject?, JObject?>>>(T)) {
//       final JMap<JLong, JMap<JObject?, JObject?>> res =
//           JMap<JLong, JMap<JObject?, JObject?>>.hash(JLong.type, JMap.type(JObject.nullableType, JObject.nullableType));
//       for (final MapEntry<int, Map<Object?, Object?>> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//             } else if (value is Map<int?, Map<Object?, Object?>?> && isTypeOrNullableType<JMap<JLong?, JMap<JObject?, JObject?>?>>(T)) {
//       final JMap<JLong?, JMap<JObject?, JObject?>?> res =
//           JMap<JLong?, JMap<JObject?, JObject?>?>.hash(JLong.nullableType, JMap.nullableType(JObject.nullableType, JObject.nullableType));
//       for (final MapEntry<int?, Map<Object?, Object?>?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;

//     } else if (value is Map<Object, Object>) {
//       final JMap<JObject, JObject> res =
//           JMap<JObject, JObject>.hash(JObject.type, JObject.type);
//       for (final MapEntry<Object, Object> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//     } else if (value is Map<Object, Object?>) {
//       final JMap<JObject, JObject?> res =
//           JMap<JObject, JObject?>.hash(JObject.type, JObject.nullableType);
//       for (final MapEntry<Object, Object?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//     } else if (value is Map) {
//       final JMap<JObject, JObject?> res =
//           JMap<JObject, JObject?>.hash(JObject.type, JObject.nullableType);
//       for (final MapEntry<Object?, Object?> entry in value.entries) {
//         res[writeValue(entry.key)] =
//             writeValue(entry.value);
//       }
//       return res as T;
//           } else if (value is NIUnusedClass) {
//         return value.toJni() as T;
//               } else if (value is NIAllTypes) {
//         return value.toJni() as T;
//               } else if (value is NIAllNullableTypes) {
//         return value.toJni() as T;
//               } else if (value is NIAllNullableTypesWithoutRecursion) {
//         return value.toJni() as T;
//               } else if (value is NIAllClassesWrapper) {
//         return value.toJni() as T;

//           } else if (value is NIAnEnum) {
//         return value.toJni() as T;
//               } else if (value is NIAnotherEnum) {
//         return value.toJni() as T;

//     } else {
//       throw ArgumentError.value(value);
//     }
//   }
// }

// class _PigeonFfiCodec {
//   static Object? readValue(ObjCObjectBase? value, [Type? outType]) {
//     if (value == null) {
//       return null;
//     } else if (NSNumber.isInstance(value)) {
//       value as NSNumber;
//       switch (outType) {
//         case const (int):
//           return value.longValue;
//         case const (double):
//           return value.doubleValue;
//         case const (bool):
//           return value.boolValue;
//         default:
//           throw ArgumentError.value(value);
//       }
//     } else if (NSString.isInstance(value)) {
//       return (NSString.castFrom(value)).toDartString();
//       // } else if (value.isA<NSByteArray>(NSByteArray.type)) {
//       //   final Uint8List list = Uint8List(value.as(NSByteArray.type).length);
//       //   for (int i = 0; i < value.as(NSByteArray.type).length; i++) {
//       //     list[i] = value.as(NSByteArray.type)[i];
//       //   }
//       //   return list;
//       // } else if (value.isA<NSIntArray>(NSIntArray.type)) {
//       //   final Int32List list = Int32List(value.as(NSIntArray.type).length);
//       //   for (int i = 0; i < value.as(NSIntArray.type).length; i++) {
//       //     list[i] = value.as(NSIntArray.type)[i];
//       //   }
//       //   return list;
//       // } else if (value.isA<NSLongArray>(NSLongArray.type)) {
//       //   final Int64List list = Int64List(value.as(NSLongArray.type).length);
//       //   for (int i = 0; i < value.as(NSLongArray.type).length; i++) {
//       //     list[i] = value.as(NSLongArray.type)[i];
//       //   }
//       //   return list;
//       // } else if (value.isA<NSDoubleArray>(NSDoubleArray.type)) {
//       //   final Float64List list = Float64List(value.as(NSDoubleArray.type).length);
//       //   for (int i = 0; i < value.as(NSDoubleArray.type).length; i++) {
//       //     list[i] = value.as(NSDoubleArray.type)[i];
//       //   }
//       //   return list;
//     } else if (value is NSArray) {
//       final List<Object?> res = <Object?>[];
//       for (int i = 0; i < value.length; i++) {
//         res.add(readValue(value[i]));
//       }
//       return res;
//     } else if (value is NSDictionary) {
//       final Map<Object?, Object?> res = <Object?, Object?>{};
//       for (final MapEntry<NSCopying?, ObjCObjectBase?> entry in value.entries) {
//         res[readValue(entry.key)] = readValue(entry.value);
//       }
//       return res;
//     } else if (ffi_bridge.NSNumberWrapper.isInstance(value)) {
//       return convertNSNumberWrapperToDart(ffi_bridge.NSNumberWrapper.castFrom(value));
//           } else if (ffi_bridge.NIUnusedClass.isInstance(value)) {
//         return NIUnusedClass.fromFfi(ffi_bridge.NIUnusedClass.castFrom(value));
//               } else if (ffi_bridge.NIAllTypes.isInstance(value)) {
//         return NIAllTypes.fromFfi(ffi_bridge.NIAllTypes.castFrom(value));
//               } else if (ffi_bridge.NIAllNullableTypes.isInstance(value)) {
//         return NIAllNullableTypes.fromFfi(ffi_bridge.NIAllNullableTypes.castFrom(value));
//               } else if (ffi_bridge.NIAllNullableTypesWithoutRecursion.isInstance(value)) {
//         return NIAllNullableTypesWithoutRecursion.fromFfi(ffi_bridge.NIAllNullableTypesWithoutRecursion.castFrom(value));
//               } else if (ffi_bridge.NIAllClassesWrapper.isInstance(value)) {
//         return NIAllClassesWrapper.fromFfi(ffi_bridge.NIAllClassesWrapper.castFrom(value));

//           } else if (value is ffi_bridge.NIAnEnum) {
//         return NIAnEnum.fromFfi(value as ffi_bridge.NIAnEnum);
//               } else if (value is ffi_bridge.NIAnotherEnum) {
//         return NIAnotherEnum.fromFfi(value as ffi_bridge.NIAnotherEnum);

//     } else {
//       throw ArgumentError.value(value);
//     }
//   }

//   static T writeValue<T extends ObjCObjectBase?>(Object? value) {
//     if (value == null) {
//       return null as T;
//     } else if (value is bool || value is double || value is int || value is Enum) {
//       if (T != NSNumber) {
//         return convertNSNumberWrapperToFfi(value) as T;
//       }
//       if (value is bool) {
//         return NSNumber.alloc().initWithLong(value ? 1 : 0) as T;
//       }
//       if (value is double) {
//         return NSNumber.alloc().initWithDouble(value) as T;
//       }
//       if (value is int) {
//         return NSNumber.alloc().initWithLong(value) as T;
//       }
//       if (value is Enum) {
//         return NSNumber.alloc().initWithLong(value.index) as T;
//       }
//       return convertNSNumberWrapperToFfi(value) as T;
//     } else if (value is String) {
//       return NSString(value) as T;
//     // } else if (isTypeOrNullableType<NSByteArray>(T)) {
//     //   value as List<int>;
//     //   final NSByteArray array = NSByteArray(value.length);
//     //   for (int i = 0; i < value.length; i++) {
//     //     array[i] = value[i];
//     //   }
//     //   return array as T;
//     // } else if (isTypeOrNullableType<NSIntArray>(T)) {
//     //   value as List<int>;
//     //   final NSIntArray array = NSIntArray(value.length);
//     //   for (int i = 0; i < value.length; i++) {
//     //     array[i] = value[i];
//     //   }
//     //   return array as T;
//     // } else if (isTypeOrNullableType<NSLongArray>(T)) {
//     //   value as List<int>;
//     //   final NSLongArray array = NSLongArray(value.length);
//     //   for (int i = 0; i < value.length; i++) {
//     //     array[i] = value[i];
//     //   }
//     //   return array as T;
//     // } else if (isTypeOrNullableType<NSDoubleArray>(T)) {
//     //   value as List<double>;
//     //   final NSDoubleArray array = NSDoubleArray(value.length);
//     //   for (int i = 0; i < value.length; i++) {
//     //     array[i] = value[i];
//     //   }
//     //   return array as T;
//     } else if (value is List) {
//       final NSMutableArray res = NSMutableArray();
//       for (int i = 0; i < value.length; i++) {
//         res.add(writeValue(value[i]));
//       }
//       return res as T;
//     } else if (value is Map) {
//       final NSMutableDictionary res = NSMutableDictionary();
//       for (final MapEntry<Object?, Object?> entry in value.entries) {
//         res.setObject(writeValue(entry.value), forKey: writeValue(entry.key));
//       }
//       return res as T;
//           } else if (value is NIUnusedClass) {
//         return value.toFfi() as T;
//               } else if (value is NIAllTypes) {
//         return value.toFfi() as T;
//               } else if (value is NIAllNullableTypes) {
//         return value.toFfi() as T;
//               } else if (value is NIAllNullableTypesWithoutRecursion) {
//         return value.toFfi() as T;
//               } else if (value is NIAllClassesWrapper) {
//         return value.toFfi() as T;

//     } else {
//       throw ArgumentError.value(value);
//     }
//   }
// }

// Object? convertNSNumberWrapperToDart(ffi_bridge.NSNumberWrapper value) {
//   switch (value.type) {
//     case 1:
//       return value.number.longValue;
//     case 2:
//       return value.number.doubleValue;
//     case 3:
//       return value.number.boolValue;
//     case 4:
//       return NIAnEnum.fromNSNumber(value.number);
//     default:
//       throw ArgumentError.value(value);
//   }
// }

// ffi_bridge.NSNumberWrapper convertNSNumberWrapperToFfi(Object value) {
//   switch (value) {
//     case int _:
//       return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(NSNumber.alloc().initWithLong(value), type: 1);
//     case double _:
//       return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(NSNumber.alloc().initWithDouble(value), type: 2);
//     case bool _:
//       return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(NSNumber.alloc().initWithLong(value ? 1 : 0), type: 3);
// case NIAnEnum _:
//   return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(value.toNSNumber(), type: 4);
//     default:
//       throw ArgumentError.value(value);
//   }
// }

// case NIAnotherEnum _:
//   return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(value.toNSNumber(), type: 5);
//     default:
//       throw ArgumentError.value(value);
//   }
// }

// case 6:
//   return NIAnotherEnum.fromNSNumber(value.number);
//     default:
//       throw ArgumentError.value(value);
//   }
// }

// ffi_bridge.NSNumberWrapper convertNSNumberWrapperToFfi(Object value) {
//   switch (value) {
//     case int _:
//       return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(NSNumber.alloc().initWithLong(value), type: 1);
//     case double _:
//       return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(NSNumber.alloc().initWithDouble(value), type: 2);
//     case bool _:
//       return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(NSNumber.alloc().initWithLong(value ? 1 : 0), type: 3);
// case NIAnEnum _:
//   return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(value.toNSNumber(), type: 4);
//     default:
//       throw ArgumentError.value(value);
//   }
// }

// case NIAnotherEnum _:
//   return ffi_bridge.NSNumberWrapper.alloc().initWithNumber(value.toNSNumber(), type: 5);
//     default:
//       throw ArgumentError.value(value);
//   }
// }

// bool isType<T>(Type t) => T == t;
// bool isTypeOrNullableType<T>(Type t) => isType<T>(t) || isType<T?>(t);
// void _throwNoInstanceError(String channelName) {
//   String nameString = 'named $channelName';
//   if (channelName == defaultInstanceName) {
//     nameString = 'with no name';
//   }
//   final String error = 'No instance $nameString has been registered.';
//   throw ArgumentError(error);
// }

// enum NIAnEnum {
// one,
// two,
// three,
// fortyTwo,
// fourHundredTwentyTwo;

// jni_bridge.NIAnEnum toJni() {
// return jni_bridge.NIAnEnum.Companion.ofRaw(index)!;
// }

// static NIAnEnum? fromJni(jni_bridge.NIAnEnum? jniEnum) {
// return jniEnum == null ? null : NIAnEnum.values[jniEnum.getRaw()];
// }

// ffi_bridge.NIAnEnum toFfi() {
// return ffi_bridge.NIAnEnum.values[index];
// }

// static NIAnEnum fromFfi(ffi_bridge.NIAnEnum ffiEnum) {
// return NIAnEnum.values[ffiEnum.index];
// }

// NSNumber toNSNumber() {
// return NSNumber.alloc().initWithLong(index);
// }

// static NIAnEnum? fromNSNumber(NSNumber? ffiEnum) {
// return ffiEnum == null ? null : NIAnEnum.values[ffiEnum.intValue];
// }
// }

// enum NIAnotherEnum {
// justInCase;

// jni_bridge.NIAnotherEnum toJni() {
// return jni_bridge.NIAnotherEnum.Companion.ofRaw(index)!;
// }

// static NIAnotherEnum? fromJni(jni_bridge.NIAnotherEnum? jniEnum) {
// return jniEnum == null ? null : NIAnotherEnum.values[jniEnum.getRaw()];
// }

// ffi_bridge.NIAnotherEnum toFfi() {
// return ffi_bridge.NIAnotherEnum.values[index];
// }

// static NIAnotherEnum fromFfi(ffi_bridge.NIAnotherEnum ffiEnum) {
// return NIAnotherEnum.values[ffiEnum.index];
// }

// NSNumber toNSNumber() {
// return NSNumber.alloc().initWithLong(index);
// }

// static NIAnotherEnum? fromNSNumber(NSNumber? ffiEnum) {
// return ffiEnum == null ? null : NIAnotherEnum.values[ffiEnum.intValue];
// }
// }

// class NIUnusedClass {
// NIUnusedClass({
// this.aField,
// });

// Object? aField;

// List<Object?> _toList() {
// return <Object?>[
//   aField,
// ];
// }

// jni_bridge.NIUnusedClass toJni() {
// return jni_bridge.NIUnusedClass (
//   aField: _PigeonJniCodec.writeValue<JObject?>(aField),
// );
// }

// ffi_bridge.NIUnusedClass toFfi() {
// return ffi_bridge.NIUnusedClass.alloc().initWithAField(
//   _PigeonFfiCodec.writeValue<ObjCObjectBase>(aField),
// );
// }

// Object encode() {
// return _toList();}

// static NIUnusedClass? fromJni(jni_bridge.NIUnusedClass? jniClass) {
// return jniClass == null ? null : NIUnusedClass(
//   aField: _PigeonJniCodec.readValue(jniClass.getAField()),
// );
// }

// static NIUnusedClass? fromFfi(ffi_bridge.NIUnusedClass? ffiClass) {
// return ffiClass == null ? null : NIUnusedClass(
//   aField: _PigeonFfiCodec.readValue(ffiClass.aField),
// );
// }

// static NIUnusedClass decode(Object result) {
// result as List<Object?>;
// return NIUnusedClass(
//   aField: result[0],
// );
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// bool operator ==(Object other) {
// if (other is! NIUnusedClass || other.runtimeType != runtimeType) {
//   return false;
// }
// if (identical(this, other)) {
//   return true;
// }
// return
//   aField == other.aField;
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// int get hashCode => Object.hashAll(_toList())
// ;
// }

// /// A class containing all supported types.
// class NIAllTypes {
// NIAllTypes({
// this.aBool = false,
// this.anInt = 0,
// this.anInt64 = 0,
// this.aDouble = 0,
// required this.aByteArray,
// required this.a4ByteArray,
// required this.a8ByteArray,
// required this.aFloatArray,
// this.anEnum = NIAnEnum.one,
// this.anotherEnum = NIAnotherEnum.justInCase,
// this.aString = '',
// this.anObject = 0,
// required this.list,
// required this.stringList,
// required this.intList,
// required this.doubleList,
// required this.boolList,
// required this.enumList,
// required this.objectList,
// required this.listList,
// required this.mapList,
// required this.map,
// required this.stringMap,
// required this.intMap,
// required this.enumMap,
// required this.objectMap,
// required this.listMap,
// required this.mapMap,
// });

// bool aBool;

// int anInt;

// int anInt64;

// double aDouble;

// Uint8List aByteArray;

// Int32List a4ByteArray;

// Int64List a8ByteArray;

// Float64List aFloatArray;

// NIAnEnum anEnum;

// NIAnotherEnum anotherEnum;

// String aString;

// Object anObject;

// List<Object?> list;

// List<String> stringList;

// List<int> intList;

// List<double> doubleList;

// List<bool> boolList;

// List<NIAnEnum> enumList;

// List<Object> objectList;

// List<List<Object?>> listList;

// List<Map<Object?, Object?>> mapList;

// Map<Object?, Object?> map;

// Map<String, String> stringMap;

// Map<int, int> intMap;

// Map<NIAnEnum, NIAnEnum> enumMap;

// Map<Object, Object> objectMap;

// Map<int, List<Object?>> listMap;

// Map<int, Map<Object?, Object?>> mapMap;

// List<Object?> _toList() {
// return <Object?>[
//   aBool,
//   anInt,
//   anInt64,
//   aDouble,
//   aByteArray,
//   a4ByteArray,
//   a8ByteArray,
//   aFloatArray,
//   anEnum,
//   anotherEnum,
//   aString,
//   anObject,
//   list,
//   stringList,
//   intList,
//   doubleList,
//   boolList,
//   enumList,
//   objectList,
//   listList,
//   mapList,
//   map,
//   stringMap,
//   intMap,
//   enumMap,
//   objectMap,
//   listMap,
//   mapMap,
// ];
// }

// jni_bridge.NIAllTypes toJni() {
// return jni_bridge.NIAllTypes (
//   aBool: aBool,
//   anInt: anInt,
//   anInt64: anInt64,
//   aDouble: aDouble,
//   aByteArray: _PigeonJniCodec.writeValue<JByteArray>(aByteArray),
//   a4ByteArray: _PigeonJniCodec.writeValue<JIntArray>(a4ByteArray),
//   a8ByteArray: _PigeonJniCodec.writeValue<JLongArray>(a8ByteArray),
//   aFloatArray: _PigeonJniCodec.writeValue<JDoubleArray>(aFloatArray),
//   anEnum: anEnum.toJni(),
//   anotherEnum: anotherEnum.toJni(),
//   aString: _PigeonJniCodec.writeValue<JString>(aString),
//   anObject: _PigeonJniCodec.writeValue<JObject>(anObject),
//   list: _PigeonJniCodec.writeValue<JList<JObject?>>(list),
//   stringList: _PigeonJniCodec.writeValue<JList<JString>>(stringList),
//   intList: _PigeonJniCodec.writeValue<JList<JLong>>(intList),
//   doubleList: _PigeonJniCodec.writeValue<JList<JDouble>>(doubleList),
//   boolList: _PigeonJniCodec.writeValue<JList<JBoolean>>(boolList),
//   enumList: _PigeonJniCodec.writeValue<JList<jni_bridge.NIAnEnum>>(enumList),
//   objectList: _PigeonJniCodec.writeValue<JList<JObject>>(objectList),
//   listList: _PigeonJniCodec.writeValue<JList<JList<JObject?>>>(listList),
//   mapList: _PigeonJniCodec.writeValue<JList<JMap<JObject?, JObject?>>>(mapList),
//   map: _PigeonJniCodec.writeValue<JMap<JObject, JObject?>>(map),
//   stringMap: _PigeonJniCodec.writeValue<JMap<JString, JString>>(stringMap),
//   intMap: _PigeonJniCodec.writeValue<JMap<JLong, JLong>>(intMap),
//   enumMap: _PigeonJniCodec.writeValue<JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum>>(enumMap),
//   objectMap: _PigeonJniCodec.writeValue<JMap<JObject, JObject>>(objectMap),
//   listMap: _PigeonJniCodec.writeValue<JMap<JLong, JList<JObject?>>>(listMap),
//   mapMap: _PigeonJniCodec.writeValue<JMap<JLong, JMap<JObject?, JObject?>>>(mapMap),
// );
// }

// ffi_bridge.NIAllTypes toFfi() {
// return ffi_bridge.NIAllTypes.alloc().initWithABool(
//   aBool,
//   anInt: anInt,
//   anInt64: anInt64,
//   aDouble: aDouble,
//   aByteArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aByteArray),
//   a4ByteArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(a4ByteArray),
//   a8ByteArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(a8ByteArray),
//   aFloatArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aFloatArray),
//   anEnum: ffi_bridge.NIAnEnum.values[anEnum.index],
//   anotherEnum: ffi_bridge.NIAnotherEnum.values[anotherEnum.index],
//   aString: _PigeonFfiCodec.writeValue<NSString>(aString),
//   anObject: _PigeonFfiCodec.writeValue<ObjCObjectBase>(anObject),
//   list: _PigeonFfiCodec.writeValue<NSMutableArray>(list),
//   stringList: _PigeonFfiCodec.writeValue<NSMutableArray>(stringList),
//   intList: _PigeonFfiCodec.writeValue<NSMutableArray>(intList),
//   doubleList: _PigeonFfiCodec.writeValue<NSMutableArray>(doubleList),
//   boolList: _PigeonFfiCodec.writeValue<NSMutableArray>(boolList),
//   enumList: _PigeonFfiCodec.writeValue<NSMutableArray>(enumList),
//   objectList: _PigeonFfiCodec.writeValue<NSMutableArray>(objectList),
//   listList: _PigeonFfiCodec.writeValue<NSMutableArray>(listList),
//   mapList: _PigeonFfiCodec.writeValue<NSMutableArray>(mapList),
//   map: _PigeonFfiCodec.writeValue<NSDictionary>(map),
//   stringMap: _PigeonFfiCodec.writeValue<NSDictionary>(stringMap),
//   intMap: _PigeonFfiCodec.writeValue<NSDictionary>(intMap),
//   enumMap: _PigeonFfiCodec.writeValue<NSDictionary>(enumMap),
//   objectMap: _PigeonFfiCodec.writeValue<NSDictionary>(objectMap),
//   listMap: _PigeonFfiCodec.writeValue<NSDictionary>(listMap),
//   mapMap: _PigeonFfiCodec.writeValue<NSDictionary>(mapMap),
// );
// }

// Object encode() {
// return _toList();}

// static NIAllTypes? fromJni(jni_bridge.NIAllTypes? jniClass) {
// return jniClass == null ? null : NIAllTypes(
//   aBool: jniClass.getABool(),
//   anInt: jniClass.getAnInt(),
//   anInt64: jniClass.getAnInt64(),
//   aDouble: jniClass.getADouble(),
//   aByteArray: (_PigeonJniCodec.readValue(jniClass.getAByteArray())! as Uint8List),
//   a4ByteArray: (_PigeonJniCodec.readValue(jniClass.getA4ByteArray())! as Int32List),
//   a8ByteArray: (_PigeonJniCodec.readValue(jniClass.getA8ByteArray())! as Int64List),
//   aFloatArray: (_PigeonJniCodec.readValue(jniClass.getAFloatArray())! as Float64List),
//   anEnum: NIAnEnum.fromJni(jniClass.getAnEnum())!,
//   anotherEnum: NIAnotherEnum.fromJni(jniClass.getAnotherEnum())!,
//   aString: jniClass.getAString().toDartString(releaseOriginal: true),
//   anObject: _PigeonJniCodec.readValue(jniClass.getAnObject())!,
//   list: (_PigeonJniCodec.readValue(jniClass.getList())! as List<Object?>).cast<Object?>(),
//   stringList: (_PigeonJniCodec.readValue(jniClass.getStringList())! as List<Object?>).cast<String>(),
//   intList: (_PigeonJniCodec.readValue(jniClass.getIntList())! as List<Object?>).cast<int>(),
//   doubleList: (_PigeonJniCodec.readValue(jniClass.getDoubleList())! as List<Object?>).cast<double>(),
//   boolList: (_PigeonJniCodec.readValue(jniClass.getBoolList())! as List<Object?>).cast<bool>(),
//   enumList: (_PigeonJniCodec.readValue(jniClass.getEnumList())! as List<Object?>).cast<NIAnEnum>(),
//   objectList: (_PigeonJniCodec.readValue(jniClass.getObjectList())! as List<Object?>).cast<Object>(),
//   listList: (_PigeonJniCodec.readValue(jniClass.getListList())! as List<Object?>).cast<List<Object?>>(),
//   mapList: (_PigeonJniCodec.readValue(jniClass.getMapList())! as List<Object?>).cast<Map<Object?, Object?>>(),
//   map: (_PigeonJniCodec.readValue(jniClass.getMap())! as Map<Object?, Object?>).cast<Object?, Object?>(),
//   stringMap: (_PigeonJniCodec.readValue(jniClass.getStringMap())! as Map<Object?, Object?>).cast<String, String>(),
//   intMap: (_PigeonJniCodec.readValue(jniClass.getIntMap())! as Map<Object?, Object?>).cast<int, int>(),
//   enumMap: (_PigeonJniCodec.readValue(jniClass.getEnumMap())! as Map<Object?, Object?>).cast<NIAnEnum, NIAnEnum>(),
//   objectMap: (_PigeonJniCodec.readValue(jniClass.getObjectMap())! as Map<Object?, Object?>).cast<Object, Object>(),
//   listMap: (_PigeonJniCodec.readValue(jniClass.getListMap())! as Map<Object?, Object?>).cast<int, List<Object?>>(),
//   mapMap: (_PigeonJniCodec.readValue(jniClass.getMapMap())! as Map<Object?, Object?>).cast<int, Map<Object?, Object?>>(),
// );
// }

// static NIAllTypes? fromFfi(ffi_bridge.NIAllTypes? ffiClass) {
// return ffiClass == null ? null : NIAllTypes(
//   aBool: ffiClass.aBool,
//   anInt: ffiClass.anInt,
//   anInt64: ffiClass.anInt64,
//   aDouble: ffiClass.aDouble,
//   aByteArray: (_PigeonFfiCodec.readValue(ffiClass.aByteArray)! as Uint8List),
//   a4ByteArray: (_PigeonFfiCodec.readValue(ffiClass.a4ByteArray)! as Int32List),
//   a8ByteArray: (_PigeonFfiCodec.readValue(ffiClass.a8ByteArray)! as Int64List),
//   aFloatArray: (_PigeonFfiCodec.readValue(ffiClass.aFloatArray)! as Float64List),
//   anEnum: NIAnEnum.values[ffiClass.anEnum.index],
//   anotherEnum: NIAnotherEnum.values[ffiClass.anotherEnum.index],
//   aString: ffiClass.aString.toDartString(),
//   anObject: _PigeonFfiCodec.readValue(ffiClass.anObject)!,
//   list: (_PigeonFfiCodec.readValue(ffiClass.list)! as List<Object?>).cast<Object?>(),
//   stringList: (_PigeonFfiCodec.readValue(ffiClass.stringList)! as List<Object?>).cast<String>(),
//   intList: (_PigeonFfiCodec.readValue(ffiClass.intList)! as List<Object?>).cast<int>(),
//   doubleList: (_PigeonFfiCodec.readValue(ffiClass.doubleList)! as List<Object?>).cast<double>(),
//   boolList: (_PigeonFfiCodec.readValue(ffiClass.boolList)! as List<Object?>).cast<bool>(),
//   enumList: (_PigeonFfiCodec.readValue(ffiClass.enumList)! as List<Object?>).cast<NIAnEnum>(),
//   objectList: (_PigeonFfiCodec.readValue(ffiClass.objectList)! as List<Object?>).cast<Object>(),
//   listList: (_PigeonFfiCodec.readValue(ffiClass.listList)! as List<Object?>).cast<List<Object?>>(),
//   mapList: (_PigeonFfiCodec.readValue(ffiClass.mapList)! as List<Object?>).cast<Map<Object?, Object?>>(),
//   map: (_PigeonFfiCodec.readValue(ffiClass.map)! as Map<Object?, Object?>).cast<Object?, Object?>(),
//   stringMap: (_PigeonFfiCodec.readValue(ffiClass.stringMap)! as Map<Object?, Object?>).cast<String, String>(),
//   intMap: (_PigeonFfiCodec.readValue(ffiClass.intMap)! as Map<Object?, Object?>).cast<int, int>(),
//   enumMap: (_PigeonFfiCodec.readValue(ffiClass.enumMap)! as Map<Object?, Object?>).cast<NIAnEnum, NIAnEnum>(),
//   objectMap: (_PigeonFfiCodec.readValue(ffiClass.objectMap)! as Map<Object?, Object?>).cast<Object, Object>(),
//   listMap: (_PigeonFfiCodec.readValue(ffiClass.listMap)! as Map<Object?, Object?>).cast<int, List<Object?>>(),
//   mapMap: (_PigeonFfiCodec.readValue(ffiClass.mapMap)! as Map<Object?, Object?>).cast<int, Map<Object?, Object?>>(),
// );
// }

// static NIAllTypes decode(Object result) {
// result as List<Object?>;
// return NIAllTypes(
//   aBool: result[0]! as bool,
//   anInt: result[1]! as int,
//   anInt64: result[2]! as int,
//   aDouble: result[3]! as double,
//   aByteArray: result[4]! as Uint8List,
//   a4ByteArray: result[5]! as Int32List,
//   a8ByteArray: result[6]! as Int64List,
//   aFloatArray: result[7]! as Float64List,
//   anEnum: result[8]! as NIAnEnum,
//   anotherEnum: result[9]! as NIAnotherEnum,
//   aString: result[10]! as String,
//   anObject: result[11]!,
//   list: result[12]! as List<Object?>,
//   stringList: (result[13] as List<Object?>?)!.cast<String>(),
//   intList: (result[14] as List<Object?>?)!.cast<int>(),
//   doubleList: (result[15] as List<Object?>?)!.cast<double>(),
//   boolList: (result[16] as List<Object?>?)!.cast<bool>(),
//   enumList: (result[17] as List<Object?>?)!.cast<NIAnEnum>(),
//   objectList: (result[18] as List<Object?>?)!.cast<Object>(),
//   listList: (result[19] as List<Object?>?)!.cast<List<Object?>>(),
//   mapList: (result[20] as List<Object?>?)!.cast<Map<Object?, Object?>>(),
//   map: result[21]! as Map<Object?, Object?>,
//   stringMap: (result[22] as Map<Object?, Object?>?)!.cast<String, String>(),
//   intMap: (result[23] as Map<Object?, Object?>?)!.cast<int, int>(),
//   enumMap: (result[24] as Map<Object?, Object?>?)!.cast<NIAnEnum, NIAnEnum>(),
//   objectMap: (result[25] as Map<Object?, Object?>?)!.cast<Object, Object>(),
//   listMap: (result[26] as Map<Object?, Object?>?)!.cast<int, List<Object?>>(),
//   mapMap: (result[27] as Map<Object?, Object?>?)!.cast<int, Map<Object?, Object?>>(),
// );
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// bool operator ==(Object other) {
// if (other is! NIAllTypes || other.runtimeType != runtimeType) {
//   return false;
// }
// if (identical(this, other)) {
//   return true;
// }
// return
//   aBool == other.aBool
//   && anInt == other.anInt
//   && anInt64 == other.anInt64
//   && aDouble == other.aDouble
//   && _deepEquals(aByteArray, other.aByteArray)
//   && _deepEquals(a4ByteArray, other.a4ByteArray)
//   && _deepEquals(a8ByteArray, other.a8ByteArray)
//   && _deepEquals(aFloatArray, other.aFloatArray)
//   && anEnum == other.anEnum
//   && anotherEnum == other.anotherEnum
//   && aString == other.aString
//   && anObject == other.anObject
//   && _deepEquals(list, other.list)
//   && _deepEquals(stringList, other.stringList)
//   && _deepEquals(intList, other.intList)
//   && _deepEquals(doubleList, other.doubleList)
//   && _deepEquals(boolList, other.boolList)
//   && _deepEquals(enumList, other.enumList)
//   && _deepEquals(objectList, other.objectList)
//   && _deepEquals(listList, other.listList)
//   && _deepEquals(mapList, other.mapList)
//   && _deepEquals(map, other.map)
//   && _deepEquals(stringMap, other.stringMap)
//   && _deepEquals(intMap, other.intMap)
//   && _deepEquals(enumMap, other.enumMap)
//   && _deepEquals(objectMap, other.objectMap)
//   && _deepEquals(listMap, other.listMap)
//   && _deepEquals(mapMap, other.mapMap);
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// int get hashCode => Object.hashAll(_toList())
// ;
// }

// /// A class containing all supported nullable types.
// class NIAllNullableTypes {
// NIAllNullableTypes({
// this.aNullableBool,
// this.aNullableInt,
// this.aNullableInt64,
// this.aNullableDouble,
// this.aNullableByteArray,
// this.aNullable4ByteArray,
// this.aNullable8ByteArray,
// this.aNullableFloatArray,
// this.aNullableEnum,
// this.anotherNullableEnum,
// this.aNullableString,
// this.aNullableObject,
// this.allNullableTypes,
// this.list,
// this.stringList,
// this.intList,
// this.doubleList,
// this.boolList,
// this.enumList,
// this.objectList,
// this.listList,
// this.mapList,
// this.recursiveClassList,
// this.map,
// this.stringMap,
// this.intMap,
// this.enumMap,
// this.objectMap,
// this.listMap,
// this.mapMap,
// this.recursiveClassMap,
// });

// bool? aNullableBool;

// int? aNullableInt;

// int? aNullableInt64;

// double? aNullableDouble;

// Uint8List? aNullableByteArray;

// Int32List? aNullable4ByteArray;

// Int64List? aNullable8ByteArray;

// Float64List? aNullableFloatArray;

// NIAnEnum? aNullableEnum;

// NIAnotherEnum? anotherNullableEnum;

// String? aNullableString;

// Object? aNullableObject;

// NIAllNullableTypes? allNullableTypes;

// List<Object?>? list;

// List<String?>? stringList;

// List<int?>? intList;

// List<double?>? doubleList;

// List<bool?>? boolList;

// List<NIAnEnum?>? enumList;

// List<Object?>? objectList;

// List<List<Object?>?>? listList;

// List<Map<Object?, Object?>?>? mapList;

// List<NIAllNullableTypes?>? recursiveClassList;

// Map<Object?, Object?>? map;

// Map<String?, String?>? stringMap;

// Map<int?, int?>? intMap;

// Map<NIAnEnum?, NIAnEnum?>? enumMap;

// Map<Object?, Object?>? objectMap;

// Map<int?, List<Object?>?>? listMap;

// Map<int?, Map<Object?, Object?>?>? mapMap;

// Map<int?, NIAllNullableTypes?>? recursiveClassMap;

// List<Object?> _toList() {
// return <Object?>[
//   aNullableBool,
//   aNullableInt,
//   aNullableInt64,
//   aNullableDouble,
//   aNullableByteArray,
//   aNullable4ByteArray,
//   aNullable8ByteArray,
//   aNullableFloatArray,
//   aNullableEnum,
//   anotherNullableEnum,
//   aNullableString,
//   aNullableObject,
//   allNullableTypes,
//   list,
//   stringList,
//   intList,
//   doubleList,
//   boolList,
//   enumList,
//   objectList,
//   listList,
//   mapList,
//   recursiveClassList,
//   map,
//   stringMap,
//   intMap,
//   enumMap,
//   objectMap,
//   listMap,
//   mapMap,
//   recursiveClassMap,
// ];
// }

// jni_bridge.NIAllNullableTypes toJni() {
// return jni_bridge.NIAllNullableTypes (
//   aNullableBool: _PigeonJniCodec.writeValue<JBoolean?>(aNullableBool),
//   aNullableInt: _PigeonJniCodec.writeValue<JLong?>(aNullableInt),
//   aNullableInt64: _PigeonJniCodec.writeValue<JLong?>(aNullableInt64),
//   aNullableDouble: _PigeonJniCodec.writeValue<JDouble?>(aNullableDouble),
//   aNullableByteArray: _PigeonJniCodec.writeValue<JByteArray?>(aNullableByteArray),
//   aNullable4ByteArray: _PigeonJniCodec.writeValue<JIntArray?>(aNullable4ByteArray),
//   aNullable8ByteArray: _PigeonJniCodec.writeValue<JLongArray?>(aNullable8ByteArray),
//   aNullableFloatArray: _PigeonJniCodec.writeValue<JDoubleArray?>(aNullableFloatArray),
//   aNullableEnum: aNullableEnum == null ? null : aNullableEnum!.toJni(),
//   anotherNullableEnum: anotherNullableEnum == null ? null : anotherNullableEnum!.toJni(),
//   aNullableString: _PigeonJniCodec.writeValue<JString?>(aNullableString),
//   aNullableObject: _PigeonJniCodec.writeValue<JObject?>(aNullableObject),
//   allNullableTypes: allNullableTypes == null ? null : allNullableTypes!.toJni(),
//   list: _PigeonJniCodec.writeValue<JList<JObject?>?>(list),
//   stringList: _PigeonJniCodec.writeValue<JList<JString?>?>(stringList),
//   intList: _PigeonJniCodec.writeValue<JList<JLong?>?>(intList),
//   doubleList: _PigeonJniCodec.writeValue<JList<JDouble?>?>(doubleList),
//   boolList: _PigeonJniCodec.writeValue<JList<JBoolean?>?>(boolList),
//   enumList: _PigeonJniCodec.writeValue<JList<jni_bridge.NIAnEnum?>?>(enumList),
//   objectList: _PigeonJniCodec.writeValue<JList<JObject?>?>(objectList),
//   listList: _PigeonJniCodec.writeValue<JList<JList<JObject?>?>?>(listList),
//   mapList: _PigeonJniCodec.writeValue<JList<JMap<JObject?, JObject?>?>?>(mapList),
//   recursiveClassList: _PigeonJniCodec.writeValue<JList<jni_bridge.NIAllNullableTypes?>?>(recursiveClassList),
//   map: _PigeonJniCodec.writeValue<JMap<JObject, JObject?>?>(map),
//   stringMap: _PigeonJniCodec.writeValue<JMap<JString?, JString?>?>(stringMap),
//   intMap: _PigeonJniCodec.writeValue<JMap<JLong?, JLong?>?>(intMap),
//   enumMap: _PigeonJniCodec.writeValue<JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?>?>(enumMap),
//   objectMap: _PigeonJniCodec.writeValue<JMap<JObject?, JObject?>?>(objectMap),
//   listMap: _PigeonJniCodec.writeValue<JMap<JLong?, JList<JObject?>?>?>(listMap),
//   mapMap: _PigeonJniCodec.writeValue<JMap<JLong?, JMap<JObject?, JObject?>?>?>(mapMap),
//   recursiveClassMap: _PigeonJniCodec.writeValue<JMap<JLong?, jni_bridge.NIAllNullableTypes?>?>(recursiveClassMap),
// );
// }

// ffi_bridge.NIAllNullableTypes toFfi() {
// return ffi_bridge.NIAllNullableTypes.alloc().initWithANullableBool(
//   _PigeonFfiCodec.writeValue<NSNumber>(aNullableBool),
//   aNullableInt: _PigeonFfiCodec.writeValue<NSNumber>(aNullableInt),
//   aNullableInt64: _PigeonFfiCodec.writeValue<NSNumber>(aNullableInt64),
//   aNullableDouble: _PigeonFfiCodec.writeValue<NSNumber>(aNullableDouble),
//   aNullableByteArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullableByteArray),
//   aNullable4ByteArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullable4ByteArray),
//   aNullable8ByteArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullable8ByteArray),
//   aNullableFloatArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullableFloatArray),
//   aNullableEnum: ffi_bridge.NIAnEnum.values[aNullableEnum.index],
//   anotherNullableEnum: ffi_bridge.NIAnotherEnum.values[anotherNullableEnum.index],
//   aNullableString: _PigeonFfiCodec.writeValue<NSString>(aNullableString),
//   aNullableObject: _PigeonFfiCodec.writeValue<ObjCObjectBase>(aNullableObject),
//   allNullableTypes: allNullableTypes == null ? null : allNullableTypes!.toFfi(),
//   list: _PigeonFfiCodec.writeValue<NSMutableArray>(list),
//   stringList: _PigeonFfiCodec.writeValue<NSMutableArray>(stringList),
//   intList: _PigeonFfiCodec.writeValue<NSMutableArray>(intList),
//   doubleList: _PigeonFfiCodec.writeValue<NSMutableArray>(doubleList),
//   boolList: _PigeonFfiCodec.writeValue<NSMutableArray>(boolList),
//   enumList: _PigeonFfiCodec.writeValue<NSMutableArray>(enumList),
//   objectList: _PigeonFfiCodec.writeValue<NSMutableArray>(objectList),
//   listList: _PigeonFfiCodec.writeValue<NSMutableArray>(listList),
//   mapList: _PigeonFfiCodec.writeValue<NSMutableArray>(mapList),
//   recursiveClassList: _PigeonFfiCodec.writeValue<NSMutableArray>(recursiveClassList),
//   map: _PigeonFfiCodec.writeValue<NSDictionary>(map),
//   stringMap: _PigeonFfiCodec.writeValue<NSDictionary>(stringMap),
//   intMap: _PigeonFfiCodec.writeValue<NSDictionary>(intMap),
//   enumMap: _PigeonFfiCodec.writeValue<NSDictionary>(enumMap),
//   objectMap: _PigeonFfiCodec.writeValue<NSDictionary>(objectMap),
//   listMap: _PigeonFfiCodec.writeValue<NSDictionary>(listMap),
//   mapMap: _PigeonFfiCodec.writeValue<NSDictionary>(mapMap),
//   recursiveClassMap: _PigeonFfiCodec.writeValue<NSDictionary>(recursiveClassMap),
// );
// }

// Object encode() {
// return _toList();}

// static NIAllNullableTypes? fromJni(jni_bridge.NIAllNullableTypes? jniClass) {
// return jniClass == null ? null : NIAllNullableTypes(
//   aNullableBool: jniClass.getANullableBool()?.booleanValue(releaseOriginal: true),
//   aNullableInt: jniClass.getANullableInt()?.longValue(releaseOriginal: true),
//   aNullableInt64: jniClass.getANullableInt64()?.longValue(releaseOriginal: true),
//   aNullableDouble: jniClass.getANullableDouble()?.doubleValue(releaseOriginal: true),
//   aNullableByteArray: (_PigeonJniCodec.readValue(jniClass.getANullableByteArray()) as Uint8List?),
//   aNullable4ByteArray: (_PigeonJniCodec.readValue(jniClass.getANullable4ByteArray()) as Int32List?),
//   aNullable8ByteArray: (_PigeonJniCodec.readValue(jniClass.getANullable8ByteArray()) as Int64List?),
//   aNullableFloatArray: (_PigeonJniCodec.readValue(jniClass.getANullableFloatArray()) as Float64List?),
//   aNullableEnum: NIAnEnum.fromJni(jniClass.getANullableEnum()),
//   anotherNullableEnum: NIAnotherEnum.fromJni(jniClass.getAnotherNullableEnum()),
//   aNullableString: jniClass.getANullableString()?.toDartString(releaseOriginal: true),
//   aNullableObject: _PigeonJniCodec.readValue(jniClass.getANullableObject()),
//   allNullableTypes: NIAllNullableTypes.fromJni(jniClass.getAllNullableTypes()),
//   list: (_PigeonJniCodec.readValue(jniClass.getList()) as List<Object?>?)?.cast<Object?>(),
//   stringList: (_PigeonJniCodec.readValue(jniClass.getStringList()) as List<Object?>?)?.cast<String?>(),
//   intList: (_PigeonJniCodec.readValue(jniClass.getIntList()) as List<Object?>?)?.cast<int?>(),
//   doubleList: (_PigeonJniCodec.readValue(jniClass.getDoubleList()) as List<Object?>?)?.cast<double?>(),
//   boolList: (_PigeonJniCodec.readValue(jniClass.getBoolList()) as List<Object?>?)?.cast<bool?>(),
//   enumList: (_PigeonJniCodec.readValue(jniClass.getEnumList()) as List<Object?>?)?.cast<NIAnEnum?>(),
//   objectList: (_PigeonJniCodec.readValue(jniClass.getObjectList()) as List<Object?>?)?.cast<Object?>(),
//   listList: (_PigeonJniCodec.readValue(jniClass.getListList()) as List<Object?>?)?.cast<List<Object?>?>(),
//   mapList: (_PigeonJniCodec.readValue(jniClass.getMapList()) as List<Object?>?)?.cast<Map<Object?, Object?>?>(),
//   recursiveClassList: (_PigeonJniCodec.readValue(jniClass.getRecursiveClassList()) as List<Object?>?)?.cast<NIAllNullableTypes?>(),
//   map: (_PigeonJniCodec.readValue(jniClass.getMap()) as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   stringMap: (_PigeonJniCodec.readValue(jniClass.getStringMap()) as Map<Object?, Object?>?)?.cast<String?, String?>(),
//   intMap: (_PigeonJniCodec.readValue(jniClass.getIntMap()) as Map<Object?, Object?>?)?.cast<int?, int?>(),
//   enumMap: (_PigeonJniCodec.readValue(jniClass.getEnumMap()) as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>(),
//   objectMap: (_PigeonJniCodec.readValue(jniClass.getObjectMap()) as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   listMap: (_PigeonJniCodec.readValue(jniClass.getListMap()) as Map<Object?, Object?>?)?.cast<int?, List<Object?>?>(),
//   mapMap: (_PigeonJniCodec.readValue(jniClass.getMapMap()) as Map<Object?, Object?>?)?.cast<int?, Map<Object?, Object?>?>(),
//   recursiveClassMap: (_PigeonJniCodec.readValue(jniClass.getRecursiveClassMap()) as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>(),
// );
// }

// static NIAllNullableTypes? fromFfi(ffi_bridge.NIAllNullableTypes? ffiClass) {
// return ffiClass == null ? null : NIAllNullableTypes(
//   aNullableBool: ffiClass.aNullableBool?.boolValue,
//   aNullableInt: ffiClass.aNullableInt?.longValue,
//   aNullableInt64: ffiClass.aNullableInt64?.longValue,
//   aNullableDouble: ffiClass.aNullableDouble?.doubleValue,
//   aNullableByteArray: (_PigeonFfiCodec.readValue(ffiClass.aNullableByteArray) as Uint8List?),
//   aNullable4ByteArray: (_PigeonFfiCodec.readValue(ffiClass.aNullable4ByteArray) as Int32List?),
//   aNullable8ByteArray: (_PigeonFfiCodec.readValue(ffiClass.aNullable8ByteArray) as Int64List?),
//   aNullableFloatArray: (_PigeonFfiCodec.readValue(ffiClass.aNullableFloatArray) as Float64List?),
//   aNullableEnum: NIAnEnum.values[ffiClass.aNullableEnum.index],
//   anotherNullableEnum: NIAnotherEnum.values[ffiClass.anotherNullableEnum.index],
//   aNullableString: ffiClass.aNullableString?.toDartString(),
//   aNullableObject: _PigeonFfiCodec.readValue(ffiClass.aNullableObject),
//   allNullableTypes: NIAllNullableTypes.fromFfi(ffiClass.allNullableTypes),
//   list: (_PigeonFfiCodec.readValue(ffiClass.list) as List<Object?>?)?.cast<Object?>(),
//   stringList: (_PigeonFfiCodec.readValue(ffiClass.stringList) as List<Object?>?)?.cast<String?>(),
//   intList: (_PigeonFfiCodec.readValue(ffiClass.intList) as List<Object?>?)?.cast<int?>(),
//   doubleList: (_PigeonFfiCodec.readValue(ffiClass.doubleList) as List<Object?>?)?.cast<double?>(),
//   boolList: (_PigeonFfiCodec.readValue(ffiClass.boolList) as List<Object?>?)?.cast<bool?>(),
//   enumList: (_PigeonFfiCodec.readValue(ffiClass.enumList) as List<Object?>?)?.cast<NIAnEnum?>(),
//   objectList: (_PigeonFfiCodec.readValue(ffiClass.objectList) as List<Object?>?)?.cast<Object?>(),
//   listList: (_PigeonFfiCodec.readValue(ffiClass.listList) as List<Object?>?)?.cast<List<Object?>?>(),
//   mapList: (_PigeonFfiCodec.readValue(ffiClass.mapList) as List<Object?>?)?.cast<Map<Object?, Object?>?>(),
//   recursiveClassList: (_PigeonFfiCodec.readValue(ffiClass.recursiveClassList) as List<Object?>?)?.cast<NIAllNullableTypes?>(),
//   map: (_PigeonFfiCodec.readValue(ffiClass.map) as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   stringMap: (_PigeonFfiCodec.readValue(ffiClass.stringMap) as Map<Object?, Object?>?)?.cast<String?, String?>(),
//   intMap: (_PigeonFfiCodec.readValue(ffiClass.intMap) as Map<Object?, Object?>?)?.cast<int?, int?>(),
//   enumMap: (_PigeonFfiCodec.readValue(ffiClass.enumMap) as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>(),
//   objectMap: (_PigeonFfiCodec.readValue(ffiClass.objectMap) as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   listMap: (_PigeonFfiCodec.readValue(ffiClass.listMap) as Map<Object?, Object?>?)?.cast<int?, List<Object?>?>(),
//   mapMap: (_PigeonFfiCodec.readValue(ffiClass.mapMap) as Map<Object?, Object?>?)?.cast<int?, Map<Object?, Object?>?>(),
//   recursiveClassMap: (_PigeonFfiCodec.readValue(ffiClass.recursiveClassMap) as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>(),
// );
// }

// static NIAllNullableTypes decode(Object result) {
// result as List<Object?>;
// return NIAllNullableTypes(
//   aNullableBool: result[0] as bool?,
//   aNullableInt: result[1] as int?,
//   aNullableInt64: result[2] as int?,
//   aNullableDouble: result[3] as double?,
//   aNullableByteArray: result[4] as Uint8List?,
//   aNullable4ByteArray: result[5] as Int32List?,
//   aNullable8ByteArray: result[6] as Int64List?,
//   aNullableFloatArray: result[7] as Float64List?,
//   aNullableEnum: result[8] as NIAnEnum?,
//   anotherNullableEnum: result[9] as NIAnotherEnum?,
//   aNullableString: result[10] as String?,
//   aNullableObject: result[11],
//   allNullableTypes: result[12] as NIAllNullableTypes?,
//   list: result[13] as List<Object?>?,
//   stringList: (result[14] as List<Object?>?)?.cast<String?>(),
//   intList: (result[15] as List<Object?>?)?.cast<int?>(),
//   doubleList: (result[16] as List<Object?>?)?.cast<double?>(),
//   boolList: (result[17] as List<Object?>?)?.cast<bool?>(),
//   enumList: (result[18] as List<Object?>?)?.cast<NIAnEnum?>(),
//   objectList: (result[19] as List<Object?>?)?.cast<Object?>(),
//   listList: (result[20] as List<Object?>?)?.cast<List<Object?>?>(),
//   mapList: (result[21] as List<Object?>?)?.cast<Map<Object?, Object?>?>(),
//   recursiveClassList: (result[22] as List<Object?>?)?.cast<NIAllNullableTypes?>(),
//   map: result[23] as Map<Object?, Object?>?,
//   stringMap: (result[24] as Map<Object?, Object?>?)?.cast<String?, String?>(),
//   intMap: (result[25] as Map<Object?, Object?>?)?.cast<int?, int?>(),
//   enumMap: (result[26] as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>(),
//   objectMap: (result[27] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   listMap: (result[28] as Map<Object?, Object?>?)?.cast<int?, List<Object?>?>(),
//   mapMap: (result[29] as Map<Object?, Object?>?)?.cast<int?, Map<Object?, Object?>?>(),
//   recursiveClassMap: (result[30] as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>(),
// );
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// bool operator ==(Object other) {
// if (other is! NIAllNullableTypes || other.runtimeType != runtimeType) {
//   return false;
// }
// if (identical(this, other)) {
//   return true;
// }
// return
//   aNullableBool == other.aNullableBool
//   && aNullableInt == other.aNullableInt
//   && aNullableInt64 == other.aNullableInt64
//   && aNullableDouble == other.aNullableDouble
//   && _deepEquals(aNullableByteArray, other.aNullableByteArray)
//   && _deepEquals(aNullable4ByteArray, other.aNullable4ByteArray)
//   && _deepEquals(aNullable8ByteArray, other.aNullable8ByteArray)
//   && _deepEquals(aNullableFloatArray, other.aNullableFloatArray)
//   && aNullableEnum == other.aNullableEnum
//   && anotherNullableEnum == other.anotherNullableEnum
//   && aNullableString == other.aNullableString
//   && aNullableObject == other.aNullableObject
//   && allNullableTypes == other.allNullableTypes
//   && _deepEquals(list, other.list)
//   && _deepEquals(stringList, other.stringList)
//   && _deepEquals(intList, other.intList)
//   && _deepEquals(doubleList, other.doubleList)
//   && _deepEquals(boolList, other.boolList)
//   && _deepEquals(enumList, other.enumList)
//   && _deepEquals(objectList, other.objectList)
//   && _deepEquals(listList, other.listList)
//   && _deepEquals(mapList, other.mapList)
//   && _deepEquals(recursiveClassList, other.recursiveClassList)
//   && _deepEquals(map, other.map)
//   && _deepEquals(stringMap, other.stringMap)
//   && _deepEquals(intMap, other.intMap)
//   && _deepEquals(enumMap, other.enumMap)
//   && _deepEquals(objectMap, other.objectMap)
//   && _deepEquals(listMap, other.listMap)
//   && _deepEquals(mapMap, other.mapMap)
//   && _deepEquals(recursiveClassMap, other.recursiveClassMap);
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// int get hashCode => Object.hashAll(_toList())
// ;
// }

// /// The primary purpose for this class is to ensure coverage of Swift structs
// /// with nullable items, as the primary [NIAllNullableTypes] class is being used to
// /// test Swift classes.
// class NIAllNullableTypesWithoutRecursion {
// NIAllNullableTypesWithoutRecursion({
// this.aNullableBool,
// this.aNullableInt,
// this.aNullableInt64,
// this.aNullableDouble,
// this.aNullableByteArray,
// this.aNullable4ByteArray,
// this.aNullable8ByteArray,
// this.aNullableFloatArray,
// this.aNullableEnum,
// this.anotherNullableEnum,
// this.aNullableString,
// this.aNullableObject,
// this.list,
// this.stringList,
// this.intList,
// this.doubleList,
// this.boolList,
// this.enumList,
// this.objectList,
// this.listList,
// this.mapList,
// this.map,
// this.stringMap,
// this.intMap,
// this.enumMap,
// this.objectMap,
// this.listMap,
// this.mapMap,
// });

// bool? aNullableBool;

// int? aNullableInt;

// int? aNullableInt64;

// double? aNullableDouble;

// Uint8List? aNullableByteArray;

// Int32List? aNullable4ByteArray;

// Int64List? aNullable8ByteArray;

// Float64List? aNullableFloatArray;

// NIAnEnum? aNullableEnum;

// NIAnotherEnum? anotherNullableEnum;

// String? aNullableString;

// Object? aNullableObject;

// List<Object?>? list;

// List<String?>? stringList;

// List<int?>? intList;

// List<double?>? doubleList;

// List<bool?>? boolList;

// List<NIAnEnum?>? enumList;

// List<Object?>? objectList;

// List<List<Object?>?>? listList;

// List<Map<Object?, Object?>?>? mapList;

// Map<Object?, Object?>? map;

// Map<String?, String?>? stringMap;

// Map<int?, int?>? intMap;

// Map<NIAnEnum?, NIAnEnum?>? enumMap;

// Map<Object?, Object?>? objectMap;

// Map<int?, List<Object?>?>? listMap;

// Map<int?, Map<Object?, Object?>?>? mapMap;

// List<Object?> _toList() {
// return <Object?>[
//   aNullableBool,
//   aNullableInt,
//   aNullableInt64,
//   aNullableDouble,
//   aNullableByteArray,
//   aNullable4ByteArray,
//   aNullable8ByteArray,
//   aNullableFloatArray,
//   aNullableEnum,
//   anotherNullableEnum,
//   aNullableString,
//   aNullableObject,
//   list,
//   stringList,
//   intList,
//   doubleList,
//   boolList,
//   enumList,
//   objectList,
//   listList,
//   mapList,
//   map,
//   stringMap,
//   intMap,
//   enumMap,
//   objectMap,
//   listMap,
//   mapMap,
// ];
// }

// jni_bridge.NIAllNullableTypesWithoutRecursion toJni() {
// return jni_bridge.NIAllNullableTypesWithoutRecursion (
//   aNullableBool: _PigeonJniCodec.writeValue<JBoolean?>(aNullableBool),
//   aNullableInt: _PigeonJniCodec.writeValue<JLong?>(aNullableInt),
//   aNullableInt64: _PigeonJniCodec.writeValue<JLong?>(aNullableInt64),
//   aNullableDouble: _PigeonJniCodec.writeValue<JDouble?>(aNullableDouble),
//   aNullableByteArray: _PigeonJniCodec.writeValue<JByteArray?>(aNullableByteArray),
//   aNullable4ByteArray: _PigeonJniCodec.writeValue<JIntArray?>(aNullable4ByteArray),
//   aNullable8ByteArray: _PigeonJniCodec.writeValue<JLongArray?>(aNullable8ByteArray),
//   aNullableFloatArray: _PigeonJniCodec.writeValue<JDoubleArray?>(aNullableFloatArray),
//   aNullableEnum: aNullableEnum == null ? null : aNullableEnum!.toJni(),
//   anotherNullableEnum: anotherNullableEnum == null ? null : anotherNullableEnum!.toJni(),
//   aNullableString: _PigeonJniCodec.writeValue<JString?>(aNullableString),
//   aNullableObject: _PigeonJniCodec.writeValue<JObject?>(aNullableObject),
//   list: _PigeonJniCodec.writeValue<JList<JObject?>?>(list),
//   stringList: _PigeonJniCodec.writeValue<JList<JString?>?>(stringList),
//   intList: _PigeonJniCodec.writeValue<JList<JLong?>?>(intList),
//   doubleList: _PigeonJniCodec.writeValue<JList<JDouble?>?>(doubleList),
//   boolList: _PigeonJniCodec.writeValue<JList<JBoolean?>?>(boolList),
//   enumList: _PigeonJniCodec.writeValue<JList<jni_bridge.NIAnEnum?>?>(enumList),
//   objectList: _PigeonJniCodec.writeValue<JList<JObject?>?>(objectList),
//   listList: _PigeonJniCodec.writeValue<JList<JList<JObject?>?>?>(listList),
//   mapList: _PigeonJniCodec.writeValue<JList<JMap<JObject?, JObject?>?>?>(mapList),
//   map: _PigeonJniCodec.writeValue<JMap<JObject, JObject?>?>(map),
//   stringMap: _PigeonJniCodec.writeValue<JMap<JString?, JString?>?>(stringMap),
//   intMap: _PigeonJniCodec.writeValue<JMap<JLong?, JLong?>?>(intMap),
//   enumMap: _PigeonJniCodec.writeValue<JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?>?>(enumMap),
//   objectMap: _PigeonJniCodec.writeValue<JMap<JObject?, JObject?>?>(objectMap),
//   listMap: _PigeonJniCodec.writeValue<JMap<JLong?, JList<JObject?>?>?>(listMap),
//   mapMap: _PigeonJniCodec.writeValue<JMap<JLong?, JMap<JObject?, JObject?>?>?>(mapMap),
// );
// }

// ffi_bridge.NIAllNullableTypesWithoutRecursion toFfi() {
// return ffi_bridge.NIAllNullableTypesWithoutRecursion.alloc().initWithANullableBool(
//   _PigeonFfiCodec.writeValue<NSNumber>(aNullableBool),
//   aNullableInt: _PigeonFfiCodec.writeValue<NSNumber>(aNullableInt),
//   aNullableInt64: _PigeonFfiCodec.writeValue<NSNumber>(aNullableInt64),
//   aNullableDouble: _PigeonFfiCodec.writeValue<NSNumber>(aNullableDouble),
//   aNullableByteArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullableByteArray),
//   aNullable4ByteArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullable4ByteArray),
//   aNullable8ByteArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullable8ByteArray),
//   aNullableFloatArray: _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullableFloatArray),
//   aNullableEnum: ffi_bridge.NIAnEnum.values[aNullableEnum.index],
//   anotherNullableEnum: ffi_bridge.NIAnotherEnum.values[anotherNullableEnum.index],
//   aNullableString: _PigeonFfiCodec.writeValue<NSString>(aNullableString),
//   aNullableObject: _PigeonFfiCodec.writeValue<ObjCObjectBase>(aNullableObject),
//   list: _PigeonFfiCodec.writeValue<NSMutableArray>(list),
//   stringList: _PigeonFfiCodec.writeValue<NSMutableArray>(stringList),
//   intList: _PigeonFfiCodec.writeValue<NSMutableArray>(intList),
//   doubleList: _PigeonFfiCodec.writeValue<NSMutableArray>(doubleList),
//   boolList: _PigeonFfiCodec.writeValue<NSMutableArray>(boolList),
//   enumList: _PigeonFfiCodec.writeValue<NSMutableArray>(enumList),
//   objectList: _PigeonFfiCodec.writeValue<NSMutableArray>(objectList),
//   listList: _PigeonFfiCodec.writeValue<NSMutableArray>(listList),
//   mapList: _PigeonFfiCodec.writeValue<NSMutableArray>(mapList),
//   map: _PigeonFfiCodec.writeValue<NSDictionary>(map),
//   stringMap: _PigeonFfiCodec.writeValue<NSDictionary>(stringMap),
//   intMap: _PigeonFfiCodec.writeValue<NSDictionary>(intMap),
//   enumMap: _PigeonFfiCodec.writeValue<NSDictionary>(enumMap),
//   objectMap: _PigeonFfiCodec.writeValue<NSDictionary>(objectMap),
//   listMap: _PigeonFfiCodec.writeValue<NSDictionary>(listMap),
//   mapMap: _PigeonFfiCodec.writeValue<NSDictionary>(mapMap),
// );
// }

// Object encode() {
// return _toList();}

// static NIAllNullableTypesWithoutRecursion? fromJni(jni_bridge.NIAllNullableTypesWithoutRecursion? jniClass) {
// return jniClass == null ? null : NIAllNullableTypesWithoutRecursion(
//   aNullableBool: jniClass.getANullableBool()?.booleanValue(releaseOriginal: true),
//   aNullableInt: jniClass.getANullableInt()?.longValue(releaseOriginal: true),
//   aNullableInt64: jniClass.getANullableInt64()?.longValue(releaseOriginal: true),
//   aNullableDouble: jniClass.getANullableDouble()?.doubleValue(releaseOriginal: true),
//   aNullableByteArray: (_PigeonJniCodec.readValue(jniClass.getANullableByteArray()) as Uint8List?),
//   aNullable4ByteArray: (_PigeonJniCodec.readValue(jniClass.getANullable4ByteArray()) as Int32List?),
//   aNullable8ByteArray: (_PigeonJniCodec.readValue(jniClass.getANullable8ByteArray()) as Int64List?),
//   aNullableFloatArray: (_PigeonJniCodec.readValue(jniClass.getANullableFloatArray()) as Float64List?),
//   aNullableEnum: NIAnEnum.fromJni(jniClass.getANullableEnum()),
//   anotherNullableEnum: NIAnotherEnum.fromJni(jniClass.getAnotherNullableEnum()),
//   aNullableString: jniClass.getANullableString()?.toDartString(releaseOriginal: true),
//   aNullableObject: _PigeonJniCodec.readValue(jniClass.getANullableObject()),
//   list: (_PigeonJniCodec.readValue(jniClass.getList()) as List<Object?>?)?.cast<Object?>(),
//   stringList: (_PigeonJniCodec.readValue(jniClass.getStringList()) as List<Object?>?)?.cast<String?>(),
//   intList: (_PigeonJniCodec.readValue(jniClass.getIntList()) as List<Object?>?)?.cast<int?>(),
//   doubleList: (_PigeonJniCodec.readValue(jniClass.getDoubleList()) as List<Object?>?)?.cast<double?>(),
//   boolList: (_PigeonJniCodec.readValue(jniClass.getBoolList()) as List<Object?>?)?.cast<bool?>(),
//   enumList: (_PigeonJniCodec.readValue(jniClass.getEnumList()) as List<Object?>?)?.cast<NIAnEnum?>(),
//   objectList: (_PigeonJniCodec.readValue(jniClass.getObjectList()) as List<Object?>?)?.cast<Object?>(),
//   listList: (_PigeonJniCodec.readValue(jniClass.getListList()) as List<Object?>?)?.cast<List<Object?>?>(),
//   mapList: (_PigeonJniCodec.readValue(jniClass.getMapList()) as List<Object?>?)?.cast<Map<Object?, Object?>?>(),
//   map: (_PigeonJniCodec.readValue(jniClass.getMap()) as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   stringMap: (_PigeonJniCodec.readValue(jniClass.getStringMap()) as Map<Object?, Object?>?)?.cast<String?, String?>(),
//   intMap: (_PigeonJniCodec.readValue(jniClass.getIntMap()) as Map<Object?, Object?>?)?.cast<int?, int?>(),
//   enumMap: (_PigeonJniCodec.readValue(jniClass.getEnumMap()) as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>(),
//   objectMap: (_PigeonJniCodec.readValue(jniClass.getObjectMap()) as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   listMap: (_PigeonJniCodec.readValue(jniClass.getListMap()) as Map<Object?, Object?>?)?.cast<int?, List<Object?>?>(),
//   mapMap: (_PigeonJniCodec.readValue(jniClass.getMapMap()) as Map<Object?, Object?>?)?.cast<int?, Map<Object?, Object?>?>(),
// );
// }

// static NIAllNullableTypesWithoutRecursion? fromFfi(ffi_bridge.NIAllNullableTypesWithoutRecursion? ffiClass) {
// return ffiClass == null ? null : NIAllNullableTypesWithoutRecursion(
//   aNullableBool: ffiClass.aNullableBool?.boolValue,
//   aNullableInt: ffiClass.aNullableInt?.longValue,
//   aNullableInt64: ffiClass.aNullableInt64?.longValue,
//   aNullableDouble: ffiClass.aNullableDouble?.doubleValue,
//   aNullableByteArray: (_PigeonFfiCodec.readValue(ffiClass.aNullableByteArray) as Uint8List?),
//   aNullable4ByteArray: (_PigeonFfiCodec.readValue(ffiClass.aNullable4ByteArray) as Int32List?),
//   aNullable8ByteArray: (_PigeonFfiCodec.readValue(ffiClass.aNullable8ByteArray) as Int64List?),
//   aNullableFloatArray: (_PigeonFfiCodec.readValue(ffiClass.aNullableFloatArray) as Float64List?),
//   aNullableEnum: NIAnEnum.values[ffiClass.aNullableEnum.index],
//   anotherNullableEnum: NIAnotherEnum.values[ffiClass.anotherNullableEnum.index],
//   aNullableString: ffiClass.aNullableString?.toDartString(),
//   aNullableObject: _PigeonFfiCodec.readValue(ffiClass.aNullableObject),
//   list: (_PigeonFfiCodec.readValue(ffiClass.list) as List<Object?>?)?.cast<Object?>(),
//   stringList: (_PigeonFfiCodec.readValue(ffiClass.stringList) as List<Object?>?)?.cast<String?>(),
//   intList: (_PigeonFfiCodec.readValue(ffiClass.intList) as List<Object?>?)?.cast<int?>(),
//   doubleList: (_PigeonFfiCodec.readValue(ffiClass.doubleList) as List<Object?>?)?.cast<double?>(),
//   boolList: (_PigeonFfiCodec.readValue(ffiClass.boolList) as List<Object?>?)?.cast<bool?>(),
//   enumList: (_PigeonFfiCodec.readValue(ffiClass.enumList) as List<Object?>?)?.cast<NIAnEnum?>(),
//   objectList: (_PigeonFfiCodec.readValue(ffiClass.objectList) as List<Object?>?)?.cast<Object?>(),
//   listList: (_PigeonFfiCodec.readValue(ffiClass.listList) as List<Object?>?)?.cast<List<Object?>?>(),
//   mapList: (_PigeonFfiCodec.readValue(ffiClass.mapList) as List<Object?>?)?.cast<Map<Object?, Object?>?>(),
//   map: (_PigeonFfiCodec.readValue(ffiClass.map) as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   stringMap: (_PigeonFfiCodec.readValue(ffiClass.stringMap) as Map<Object?, Object?>?)?.cast<String?, String?>(),
//   intMap: (_PigeonFfiCodec.readValue(ffiClass.intMap) as Map<Object?, Object?>?)?.cast<int?, int?>(),
//   enumMap: (_PigeonFfiCodec.readValue(ffiClass.enumMap) as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>(),
//   objectMap: (_PigeonFfiCodec.readValue(ffiClass.objectMap) as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   listMap: (_PigeonFfiCodec.readValue(ffiClass.listMap) as Map<Object?, Object?>?)?.cast<int?, List<Object?>?>(),
//   mapMap: (_PigeonFfiCodec.readValue(ffiClass.mapMap) as Map<Object?, Object?>?)?.cast<int?, Map<Object?, Object?>?>(),
// );
// }

// static NIAllNullableTypesWithoutRecursion decode(Object result) {
// result as List<Object?>;
// return NIAllNullableTypesWithoutRecursion(
//   aNullableBool: result[0] as bool?,
//   aNullableInt: result[1] as int?,
//   aNullableInt64: result[2] as int?,
//   aNullableDouble: result[3] as double?,
//   aNullableByteArray: result[4] as Uint8List?,
//   aNullable4ByteArray: result[5] as Int32List?,
//   aNullable8ByteArray: result[6] as Int64List?,
//   aNullableFloatArray: result[7] as Float64List?,
//   aNullableEnum: result[8] as NIAnEnum?,
//   anotherNullableEnum: result[9] as NIAnotherEnum?,
//   aNullableString: result[10] as String?,
//   aNullableObject: result[11],
//   list: result[12] as List<Object?>?,
//   stringList: (result[13] as List<Object?>?)?.cast<String?>(),
//   intList: (result[14] as List<Object?>?)?.cast<int?>(),
//   doubleList: (result[15] as List<Object?>?)?.cast<double?>(),
//   boolList: (result[16] as List<Object?>?)?.cast<bool?>(),
//   enumList: (result[17] as List<Object?>?)?.cast<NIAnEnum?>(),
//   objectList: (result[18] as List<Object?>?)?.cast<Object?>(),
//   listList: (result[19] as List<Object?>?)?.cast<List<Object?>?>(),
//   mapList: (result[20] as List<Object?>?)?.cast<Map<Object?, Object?>?>(),
//   map: result[21] as Map<Object?, Object?>?,
//   stringMap: (result[22] as Map<Object?, Object?>?)?.cast<String?, String?>(),
//   intMap: (result[23] as Map<Object?, Object?>?)?.cast<int?, int?>(),
//   enumMap: (result[24] as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>(),
//   objectMap: (result[25] as Map<Object?, Object?>?)?.cast<Object?, Object?>(),
//   listMap: (result[26] as Map<Object?, Object?>?)?.cast<int?, List<Object?>?>(),
//   mapMap: (result[27] as Map<Object?, Object?>?)?.cast<int?, Map<Object?, Object?>?>(),
// );
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// bool operator ==(Object other) {
// if (other is! NIAllNullableTypesWithoutRecursion || other.runtimeType != runtimeType) {
//   return false;
// }
// if (identical(this, other)) {
//   return true;
// }
// return
//   aNullableBool == other.aNullableBool
//   && aNullableInt == other.aNullableInt
//   && aNullableInt64 == other.aNullableInt64
//   && aNullableDouble == other.aNullableDouble
//   && _deepEquals(aNullableByteArray, other.aNullableByteArray)
//   && _deepEquals(aNullable4ByteArray, other.aNullable4ByteArray)
//   && _deepEquals(aNullable8ByteArray, other.aNullable8ByteArray)
//   && _deepEquals(aNullableFloatArray, other.aNullableFloatArray)
//   && aNullableEnum == other.aNullableEnum
//   && anotherNullableEnum == other.anotherNullableEnum
//   && aNullableString == other.aNullableString
//   && aNullableObject == other.aNullableObject
//   && _deepEquals(list, other.list)
//   && _deepEquals(stringList, other.stringList)
//   && _deepEquals(intList, other.intList)
//   && _deepEquals(doubleList, other.doubleList)
//   && _deepEquals(boolList, other.boolList)
//   && _deepEquals(enumList, other.enumList)
//   && _deepEquals(objectList, other.objectList)
//   && _deepEquals(listList, other.listList)
//   && _deepEquals(mapList, other.mapList)
//   && _deepEquals(map, other.map)
//   && _deepEquals(stringMap, other.stringMap)
//   && _deepEquals(intMap, other.intMap)
//   && _deepEquals(enumMap, other.enumMap)
//   && _deepEquals(objectMap, other.objectMap)
//   && _deepEquals(listMap, other.listMap)
//   && _deepEquals(mapMap, other.mapMap);
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// int get hashCode => Object.hashAll(_toList())
// ;
// }

// /// A class for testing nested class handling.
// ///
// /// This is needed to test nested nullable and non-nullable classes,
// /// `NIAllNullableTypes` is non-nullable here as it is easier to instantiate
// /// than `NIAllTypes` when testing doesn't require both (ie. testing null classes).
// class NIAllClassesWrapper {
// NIAllClassesWrapper({
// required this.allNullableTypes,
// this.allNullableTypesWithoutRecursion,
// this.allTypes,
// required this.classList,
// this.nullableClassList,
// required this.classMap,
// this.nullableClassMap,
// });

// NIAllNullableTypes allNullableTypes;

// NIAllNullableTypesWithoutRecursion? allNullableTypesWithoutRecursion;

// NIAllTypes? allTypes;

// List<NIAllTypes?> classList;

// List<NIAllNullableTypesWithoutRecursion?>? nullableClassList;

// Map<int?, NIAllTypes?> classMap;

// Map<int?, NIAllNullableTypesWithoutRecursion?>? nullableClassMap;

// List<Object?> _toList() {
// return <Object?>[
//   allNullableTypes,
//   allNullableTypesWithoutRecursion,
//   allTypes,
//   classList,
//   nullableClassList,
//   classMap,
//   nullableClassMap,
// ];
// }

// jni_bridge.NIAllClassesWrapper toJni() {
// return jni_bridge.NIAllClassesWrapper (
//   allNullableTypes: allNullableTypes.toJni(),
//   allNullableTypesWithoutRecursion: allNullableTypesWithoutRecursion == null ? null : allNullableTypesWithoutRecursion!.toJni(),
//   allTypes: allTypes == null ? null : allTypes!.toJni(),
//   classList: _PigeonJniCodec.writeValue<JList<jni_bridge.NIAllTypes?>>(classList),
//   nullableClassList: _PigeonJniCodec.writeValue<JList<jni_bridge.NIAllNullableTypesWithoutRecursion?>?>(nullableClassList),
//   classMap: _PigeonJniCodec.writeValue<JMap<JLong?, jni_bridge.NIAllTypes?>>(classMap),
//   nullableClassMap: _PigeonJniCodec.writeValue<JMap<JLong?, jni_bridge.NIAllNullableTypesWithoutRecursion?>?>(nullableClassMap),
// );
// }

// ffi_bridge.NIAllClassesWrapper toFfi() {
// return ffi_bridge.NIAllClassesWrapper.alloc().initWithAllNullableTypes(
//   allNullableTypes.toFfi(),
//   allNullableTypesWithoutRecursion: allNullableTypesWithoutRecursion == null ? null : allNullableTypesWithoutRecursion!.toFfi(),
//   allTypes: allTypes == null ? null : allTypes!.toFfi(),
//   classList: _PigeonFfiCodec.writeValue<NSMutableArray>(classList),
//   nullableClassList: _PigeonFfiCodec.writeValue<NSMutableArray>(nullableClassList),
//   classMap: _PigeonFfiCodec.writeValue<NSDictionary>(classMap),
//   nullableClassMap: _PigeonFfiCodec.writeValue<NSDictionary>(nullableClassMap),
// );
// }

// Object encode() {
// return _toList();}

// static NIAllClassesWrapper? fromJni(jni_bridge.NIAllClassesWrapper? jniClass) {
// return jniClass == null ? null : NIAllClassesWrapper(
//   allNullableTypes: NIAllNullableTypes.fromJni(jniClass.getAllNullableTypes())!,
//   allNullableTypesWithoutRecursion: NIAllNullableTypesWithoutRecursion.fromJni(jniClass.getAllNullableTypesWithoutRecursion()),
//   allTypes: NIAllTypes.fromJni(jniClass.getAllTypes()),
//   classList: (_PigeonJniCodec.readValue(jniClass.getClassList())! as List<Object?>).cast<NIAllTypes?>(),
//   nullableClassList: (_PigeonJniCodec.readValue(jniClass.getNullableClassList()) as List<Object?>?)?.cast<NIAllNullableTypesWithoutRecursion?>(),
//   classMap: (_PigeonJniCodec.readValue(jniClass.getClassMap())! as Map<Object?, Object?>).cast<int?, NIAllTypes?>(),
//   nullableClassMap: (_PigeonJniCodec.readValue(jniClass.getNullableClassMap()) as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypesWithoutRecursion?>(),
// );
// }

// static NIAllClassesWrapper? fromFfi(ffi_bridge.NIAllClassesWrapper? ffiClass) {
// return ffiClass == null ? null : NIAllClassesWrapper(
//   allNullableTypes: NIAllNullableTypes.fromFfi(ffiClass.allNullableTypes)!,
//   allNullableTypesWithoutRecursion: NIAllNullableTypesWithoutRecursion.fromFfi(ffiClass.allNullableTypesWithoutRecursion),
//   allTypes: NIAllTypes.fromFfi(ffiClass.allTypes),
//   classList: (_PigeonFfiCodec.readValue(ffiClass.classList)! as List<Object?>).cast<NIAllTypes?>(),
//   nullableClassList: (_PigeonFfiCodec.readValue(ffiClass.nullableClassList) as List<Object?>?)?.cast<NIAllNullableTypesWithoutRecursion?>(),
//   classMap: (_PigeonFfiCodec.readValue(ffiClass.classMap)! as Map<Object?, Object?>).cast<int?, NIAllTypes?>(),
//   nullableClassMap: (_PigeonFfiCodec.readValue(ffiClass.nullableClassMap) as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypesWithoutRecursion?>(),
// );
// }

// static NIAllClassesWrapper decode(Object result) {
// result as List<Object?>;
// return NIAllClassesWrapper(
//   allNullableTypes: result[0]! as NIAllNullableTypes,
//   allNullableTypesWithoutRecursion: result[1] as NIAllNullableTypesWithoutRecursion?,
//   allTypes: result[2] as NIAllTypes?,
//   classList: (result[3] as List<Object?>?)!.cast<NIAllTypes?>(),
//   nullableClassList: (result[4] as List<Object?>?)?.cast<NIAllNullableTypesWithoutRecursion?>(),
//   classMap: (result[5] as Map<Object?, Object?>?)!.cast<int?, NIAllTypes?>(),
//   nullableClassMap: (result[6] as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypesWithoutRecursion?>(),
// );
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// bool operator ==(Object other) {
// if (other is! NIAllClassesWrapper || other.runtimeType != runtimeType) {
//   return false;
// }
// if (identical(this, other)) {
//   return true;
// }
// return
//   allNullableTypes == other.allNullableTypes
//   && allNullableTypesWithoutRecursion == other.allNullableTypesWithoutRecursion
//   && allTypes == other.allTypes
//   && _deepEquals(classList, other.classList)
//   && _deepEquals(nullableClassList, other.nullableClassList)
//   && _deepEquals(classMap, other.classMap)
//   && _deepEquals(nullableClassMap, other.nullableClassMap);
// }

// @override
// // ignore: avoid_equals_and_hash_code_on_mutable_classes
// int get hashCode => Object.hashAll(_toList())
// ;
// }

// class _PigeonCodec extends StandardMessageCodec {
// const _PigeonCodec();
// @override
// void writeValue(WriteBuffer buffer, Object? value) {
// if (value is int) {
//   buffer.putUint8(4);
//   buffer.putInt64(value);
// }else if (value is NIAnEnum) {
//   buffer.putUint8(129);
//   writeValue(buffer, value.index);
// }else if (value is NIAnotherEnum) {
//   buffer.putUint8(130);
//   writeValue(buffer, value.index);
// }else if (value is NIUnusedClass) {
//   buffer.putUint8(131);
//   writeValue(buffer, value.encode());
// }else if (value is NIAllTypes) {
//   buffer.putUint8(132);
//   writeValue(buffer, value.encode());
// }else if (value is NIAllNullableTypes) {
//   buffer.putUint8(133);
//   writeValue(buffer, value.encode());
// }else if (value is NIAllNullableTypesWithoutRecursion) {
//   buffer.putUint8(134);
//   writeValue(buffer, value.encode());
// }else if (value is NIAllClassesWrapper) {
//   buffer.putUint8(135);
//   writeValue(buffer, value.encode());
// } else {
//   super.writeValue(buffer, value);
// }
// }

// @override
// Object? readValueOfType(int type, ReadBuffer buffer) {
// switch (type) {
//   case 129:
//     final int? value = readValue(buffer) as int?;
//     return value == null ? null : NIAnEnum.values[value];
//   case 130:
//     final int? value = readValue(buffer) as int?;
//     return value == null ? null : NIAnotherEnum.values[value];
//   case 131:
//     return NIUnusedClass.decode(readValue(buffer)!);
//   case 132:
//     return NIAllTypes.decode(readValue(buffer)!);
//   case 133:
//     return NIAllNullableTypes.decode(readValue(buffer)!);
//   case 134:
//     return NIAllNullableTypesWithoutRecursion.decode(readValue(buffer)!);
//   case 135:
//     return NIAllClassesWrapper.decode(readValue(buffer)!);
//   default:
//     return super.readValueOfType(type, buffer);
// }
// }
// }
// const String defaultInstanceName = 'PigeonDefaultClassName32uh4ui3lh445uh4h3l2l455g4y34u';

// class NIHostIntegrationCoreApiForNativeInterop {
// NIHostIntegrationCoreApiForNativeInterop._withRegistrar({jni_bridge.NIHostIntegrationCoreApiRegistrar? jniApi, ffi_bridge.NIHostIntegrationCoreApiSetup? ffiApi}) : _jniApi = jniApi, _ffiApi = ffiApi;

// /// Returns instance of NIHostIntegrationCoreApiForNativeInterop with specified [channelName] if one has been registered.
// static NIHostIntegrationCoreApiForNativeInterop? getInstance({String channelName = defaultInstanceName}) {
// late NIHostIntegrationCoreApiForNativeInterop res;
//   if (Platform.isAndroid) {
//     final jni_bridge.NIHostIntegrationCoreApiRegistrar? link =
//         jni_bridge.NIHostIntegrationCoreApiRegistrar().getInstance(JString.fromString(channelName));
//     if (link == null) {
//       _throwNoInstanceError(channelName);
//     }
//     res = NIHostIntegrationCoreApiForNativeInterop._withRegistrar(jniApi: link);
//   } else if (Platform.isIOS || Platform.isMacOS) {
//     final ffi_bridge.NIHostIntegrationCoreApiSetup? link =
//         ffi_bridge.NIHostIntegrationCoreApiSetup.getInstanceWithName(NSString(channelName));
//     if (link == null) {
//       _throwNoInstanceError(channelName);
//     }
//     res = NIHostIntegrationCoreApiForNativeInterop._withRegistrar(ffiApi: link);
//   }
//   return res;
// }

// late final jni_bridge.NIHostIntegrationCoreApiRegistrar? _jniApi;
// late final ffi_bridge.NIHostIntegrationCoreApiSetup? _ffiApi;

// void noop() {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     _ffiApi.noopWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       return;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllTypes echoAllTypes(NIAllTypes everything) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllTypes? res = _ffiApi.echoAllTypesWithEverything(everything.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllTypes dartTypeRes = NIAllTypes.fromFfi(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Object? throwError() {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ObjCObjectBase? res = _ffiApi.throwErrorWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Object? dartTypeRes = _PigeonFfiCodec.readValue(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// void throwErrorFromVoid() {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     _ffiApi.throwErrorFromVoidWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       return;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Object? throwFlutterError() {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ObjCObjectBase? res = _ffiApi.throwFlutterErrorWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Object? dartTypeRes = _PigeonFfiCodec.readValue(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// int echoInt(int anInt) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoIntWithAnInt(_PigeonFfiCodec.writeValue<NSNumber>(anInt), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final int dartTypeRes = res!.longValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// double echoDouble(double aDouble) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoDoubleWithADouble(_PigeonFfiCodec.writeValue<NSNumber>(aDouble), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final double dartTypeRes = res!.doubleValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// bool echoBool(bool aBool) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoBoolWithABool(_PigeonFfiCodec.writeValue<NSNumber>(aBool), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final bool dartTypeRes = res!.boolValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// String echoString(String aString) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSString? res = _ffiApi.echoStringWithAString(_PigeonFfiCodec.writeValue<NSString>(aString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String dartTypeRes = res!.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Uint8List echoUint8List(Uint8List aUint8List) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.echoUint8ListWithAUint8List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aUint8List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Uint8List dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Uint8List);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Int32List echoInt32List(Int32List aInt32List) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.echoInt32ListWithAInt32List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aInt32List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Int32List dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Int32List);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Int64List echoInt64List(Int64List aInt64List) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.echoInt64ListWithAInt64List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aInt64List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Int64List dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Int64List);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Float64List echoFloat64List(Float64List aFloat64List) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.echoFloat64ListWithAFloat64List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aFloat64List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Float64List dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Float64List);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Object echoObject(Object anObject) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ObjCObjectBase? res = _ffiApi.echoObjectWithAnObject(_PigeonFfiCodec.writeValue<ObjCObjectBase>(anObject), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Object dartTypeRes = _PigeonFfiCodec.readValue(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<Object?> echoList(List<Object?> list) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoListWithList(_PigeonFfiCodec.writeValue<NSMutableArray>(list), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<Object?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAnEnum?> echoEnumList(List<NIAnEnum?> enumList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAllNullableTypes?> echoClassList(List<NIAllNullableTypes?> classList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAnEnum> echoNonNullEnumList(List<NIAnEnum> enumList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoNonNullEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAnEnum>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAllNullableTypes> echoNonNullClassList(List<NIAllNullableTypes> classList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoNonNullClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAllNullableTypes>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<Object?, Object?> echoMap(Map<Object?, Object?> map) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoMapWithMap(_PigeonFfiCodec.writeValue<NSDictionary>(map), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<Object?, Object?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<Object?, Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<String?, String?> echoStringMap(Map<String?, String?> stringMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String?, String?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<String?, String?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int?, int?> echoIntMap(Map<int?, int?> intMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, int?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int?, int?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<NIAnEnum?, NIAnEnum?> echoEnumMap(Map<NIAnEnum?, NIAnEnum?> enumMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum?, NIAnEnum?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<NIAnEnum?, NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int?, NIAllNullableTypes?> echoClassMap(Map<int?, NIAllNullableTypes?> classMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, NIAllNullableTypes?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int?, NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<String, String> echoNonNullStringMap(Map<String, String> stringMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNonNullStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String, String> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<String, String>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int, int> echoNonNullIntMap(Map<int, int> intMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNonNullIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int, int> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int, int>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<NIAnEnum, NIAnEnum> echoNonNullEnumMap(Map<NIAnEnum, NIAnEnum> enumMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNonNullEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum, NIAnEnum> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<NIAnEnum, NIAnEnum>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int, NIAllNullableTypes> echoNonNullClassMap(Map<int, NIAllNullableTypes> classMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNonNullClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int, NIAllNullableTypes> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int, NIAllNullableTypes>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllClassesWrapper echoClassWrapper(NIAllClassesWrapper wrapper) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllClassesWrapper? res = _ffiApi.echoClassWrapperWithWrapper(wrapper.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllClassesWrapper dartTypeRes = NIAllClassesWrapper.fromFfi(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAnEnum echoEnum(NIAnEnum anEnum) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoEnumWithAnEnum(ffi_bridge.NIAnEnum.values[anEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnEnum dartTypeRes = (_PigeonFfiCodec.readValue(res)! as NIAnEnum);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAnotherEnum echoAnotherEnum(NIAnotherEnum anotherEnum) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoAnotherEnumWithAnotherEnum(ffi_bridge.NIAnotherEnum.values[anotherEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnotherEnum dartTypeRes = (_PigeonFfiCodec.readValue(res)! as NIAnotherEnum);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// String echoNamedDefaultString({String aString = 'default'}) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSString? res = _ffiApi.echoNamedDefaultStringWithAString(_PigeonFfiCodec.writeValue<NSString>(aString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String dartTypeRes = res!.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// double echoOptionalDefaultDouble([double aDouble = 3.14]) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoOptionalDefaultDoubleWithADouble(_PigeonFfiCodec.writeValue<NSNumber>(aDouble), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final double dartTypeRes = res!.doubleValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// int echoRequiredInt({required int anInt}) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoRequiredIntWithAnInt(_PigeonFfiCodec.writeValue<NSNumber>(anInt), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final int dartTypeRes = res!.longValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllNullableTypes? echoAllNullableTypes(NIAllNullableTypes? everything) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllNullableTypes? res = _ffiApi.echoAllNullableTypesWithEverything(everything == null ? null : everything.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypes? dartTypeRes = NIAllNullableTypes.fromFfi(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllNullableTypesWithoutRecursion? echoAllNullableTypesWithoutRecursion(NIAllNullableTypesWithoutRecursion? everything) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllNullableTypesWithoutRecursion? res = _ffiApi.echoAllNullableTypesWithoutRecursionWithEverything(everything == null ? null : everything.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypesWithoutRecursion? dartTypeRes = NIAllNullableTypesWithoutRecursion.fromFfi(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// String? extractNestedNullableString(NIAllClassesWrapper wrapper) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSString? res = _ffiApi.extractNestedNullableStringWithWrapper(wrapper.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String? dartTypeRes = res!?.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllClassesWrapper createNestedNullableString(String? nullableString) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllClassesWrapper? res = _ffiApi.createNestedNullableStringWithNullableString(_PigeonFfiCodec.writeValue<NSString>(nullableString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllClassesWrapper dartTypeRes = NIAllClassesWrapper.fromFfi(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllNullableTypes sendMultipleNullableTypes(bool? aNullableBool, int? aNullableInt, String? aNullableString) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllNullableTypes? res = _ffiApi.sendMultipleNullableTypesWithANullableBool(_PigeonFfiCodec.writeValue<NSNumber>(aNullableBool), _PigeonFfiCodec.writeValue<NSNumber>(aNullableInt), _PigeonFfiCodec.writeValue<NSString>(aNullableString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypes dartTypeRes = NIAllNullableTypes.fromFfi(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllNullableTypesWithoutRecursion sendMultipleNullableTypesWithoutRecursion(bool? aNullableBool, int? aNullableInt, String? aNullableString) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllNullableTypesWithoutRecursion? res = _ffiApi.sendMultipleNullableTypesWithoutRecursionWithANullableBool(_PigeonFfiCodec.writeValue<NSNumber>(aNullableBool), _PigeonFfiCodec.writeValue<NSNumber>(aNullableInt), _PigeonFfiCodec.writeValue<NSString>(aNullableString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypesWithoutRecursion dartTypeRes = NIAllNullableTypesWithoutRecursion.fromFfi(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// int? echoNullableInt(int? aNullableInt) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoNullableIntWithANullableInt(_PigeonFfiCodec.writeValue<NSNumber>(aNullableInt), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final int? dartTypeRes = res!?.longValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// double? echoNullableDouble(double? aNullableDouble) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoNullableDoubleWithANullableDouble(_PigeonFfiCodec.writeValue<NSNumber>(aNullableDouble), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final double? dartTypeRes = res!?.doubleValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// bool? echoNullableBool(bool? aNullableBool) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoNullableBoolWithANullableBool(_PigeonFfiCodec.writeValue<NSNumber>(aNullableBool), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final bool? dartTypeRes = res!?.boolValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// String? echoNullableString(String? aNullableString) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSString? res = _ffiApi.echoNullableStringWithANullableString(_PigeonFfiCodec.writeValue<NSString>(aNullableString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String? dartTypeRes = res!?.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Uint8List? echoNullableUint8List(Uint8List? aNullableUint8List) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.echoNullableUint8ListWithANullableUint8List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullableUint8List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Uint8List? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Uint8List?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Int32List? echoNullableInt32List(Int32List? aNullableInt32List) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.echoNullableInt32ListWithANullableInt32List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullableInt32List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Int32List? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Int32List?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Int64List? echoNullableInt64List(Int64List? aNullableInt64List) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.echoNullableInt64ListWithANullableInt64List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullableInt64List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Int64List? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Int64List?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Float64List? echoNullableFloat64List(Float64List? aNullableFloat64List) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.echoNullableFloat64ListWithANullableFloat64List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aNullableFloat64List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Float64List? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Float64List?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Object? echoNullableObject(Object? aNullableObject) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ObjCObjectBase? res = _ffiApi.echoNullableObjectWithANullableObject(_PigeonFfiCodec.writeValue<ObjCObjectBase>(aNullableObject), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Object? dartTypeRes = _PigeonFfiCodec.readValue(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<Object?>? echoNullableList(List<Object?>? aNullableList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoNullableListWithANullableList(_PigeonFfiCodec.writeValue<NSMutableArray>(aNullableList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<Object?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAnEnum?>? echoNullableEnumList(List<NIAnEnum?>? enumList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoNullableEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAllNullableTypes?>? echoNullableClassList(List<NIAllNullableTypes?>? classList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoNullableClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAnEnum>? echoNullableNonNullEnumList(List<NIAnEnum>? enumList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoNullableNonNullEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAnEnum>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAllNullableTypes>? echoNullableNonNullClassList(List<NIAllNullableTypes>? classList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.echoNullableNonNullClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAllNullableTypes>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<Object?, Object?>? echoNullableMap(Map<Object?, Object?>? map) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNullableMapWithMap(_PigeonFfiCodec.writeValue<NSDictionary>(map), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<Object?, Object?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<Object?, Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<String?, String?>? echoNullableStringMap(Map<String?, String?>? stringMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNullableStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String?, String?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<String?, String?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int?, int?>? echoNullableIntMap(Map<int?, int?>? intMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNullableIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, int?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int?, int?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<NIAnEnum?, NIAnEnum?>? echoNullableEnumMap(Map<NIAnEnum?, NIAnEnum?>? enumMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNullableEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum?, NIAnEnum?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int?, NIAllNullableTypes?>? echoNullableClassMap(Map<int?, NIAllNullableTypes?>? classMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNullableClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, NIAllNullableTypes?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<String, String>? echoNullableNonNullStringMap(Map<String, String>? stringMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNullableNonNullStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String, String>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<String, String>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int, int>? echoNullableNonNullIntMap(Map<int, int>? intMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNullableNonNullIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int, int>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int, int>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<NIAnEnum, NIAnEnum>? echoNullableNonNullEnumMap(Map<NIAnEnum, NIAnEnum>? enumMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNullableNonNullEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum, NIAnEnum>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<NIAnEnum, NIAnEnum>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int, NIAllNullableTypes>? echoNullableNonNullClassMap(Map<int, NIAllNullableTypes>? classMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.echoNullableNonNullClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int, NIAllNullableTypes>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int, NIAllNullableTypes>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAnEnum? echoNullableEnum(NIAnEnum? anEnum) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoNullableEnumWithAnEnum(ffi_bridge.NIAnEnum.values[anEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnEnum? dartTypeRes = (_PigeonFfiCodec.readValue(res) as NIAnEnum?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAnotherEnum? echoAnotherNullableEnum(NIAnotherEnum? anotherEnum) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoAnotherNullableEnumWithAnotherEnum(ffi_bridge.NIAnotherEnum.values[anotherEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnotherEnum? dartTypeRes = (_PigeonFfiCodec.readValue(res) as NIAnotherEnum?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// int? echoOptionalNullableInt([int? aNullableInt]) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.echoOptionalNullableIntWithANullableInt(_PigeonFfiCodec.writeValue<NSNumber>(aNullableInt), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final int? dartTypeRes = res!?.longValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// String? echoNamedNullableString({String? aNullableString}) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSString? res = _ffiApi.echoNamedNullableStringWithANullableString(_PigeonFfiCodec.writeValue<NSString>(aNullableString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String? dartTypeRes = res!?.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<void> noopAsync() async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.noopAsyncWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       return;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<int> echoAsyncInt(int anInt) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncIntWithAnInt(_PigeonFfiCodec.writeValue<NSNumber>(anInt), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final int dartTypeRes = res!.longValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<double> echoAsyncDouble(double aDouble) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncDoubleWithADouble(_PigeonFfiCodec.writeValue<NSNumber>(aDouble), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final double dartTypeRes = res!.doubleValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<bool> echoAsyncBool(bool aBool) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncBoolWithABool(_PigeonFfiCodec.writeValue<NSNumber>(aBool), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final bool dartTypeRes = res!.boolValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<String> echoAsyncString(String aString) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncStringWithAString(_PigeonFfiCodec.writeValue<NSString>(aString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String dartTypeRes = res!.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Uint8List> echoAsyncUint8List(Uint8List aUint8List) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncUint8ListWithAUint8List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aUint8List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Uint8List dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Uint8List);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Int32List> echoAsyncInt32List(Int32List aInt32List) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncInt32ListWithAInt32List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aInt32List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Int32List dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Int32List);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Int64List> echoAsyncInt64List(Int64List aInt64List) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncInt64ListWithAInt64List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aInt64List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Int64List dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Int64List);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Float64List> echoAsyncFloat64List(Float64List aFloat64List) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncFloat64ListWithAFloat64List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aFloat64List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Float64List dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Float64List);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Object> echoAsyncObject(Object anObject) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncObjectWithAnObject(_PigeonFfiCodec.writeValue<ObjCObjectBase>(anObject), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Object dartTypeRes = _PigeonFfiCodec.readValue(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<List<Object?>> echoAsyncList(List<Object?> list) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncListWithList(_PigeonFfiCodec.writeValue<NSMutableArray>(list), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<Object?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<List<NIAnEnum?>> echoAsyncEnumList(List<NIAnEnum?> enumList) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<List<NIAllNullableTypes?>> echoAsyncClassList(List<NIAllNullableTypes?> classList) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<Object?, Object?>> echoAsyncMap(Map<Object?, Object?> map) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncMapWithMap(_PigeonFfiCodec.writeValue<NSDictionary>(map), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<Object?, Object?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<Object?, Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<String?, String?>> echoAsyncStringMap(Map<String?, String?> stringMap) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String?, String?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<String?, String?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<int?, int?>> echoAsyncIntMap(Map<int?, int?> intMap) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, int?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int?, int?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<NIAnEnum?, NIAnEnum?>> echoAsyncEnumMap(Map<NIAnEnum?, NIAnEnum?> enumMap) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum?, NIAnEnum?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<NIAnEnum?, NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<int?, NIAllNullableTypes?>> echoAsyncClassMap(Map<int?, NIAllNullableTypes?> classMap) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, NIAllNullableTypes?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int?, NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<NIAnEnum> echoAsyncEnum(NIAnEnum anEnum) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncEnumWithAnEnum(ffi_bridge.NIAnEnum.values[anEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnEnum dartTypeRes = (_PigeonFfiCodec.readValue(res)! as NIAnEnum);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<NIAnotherEnum> echoAnotherAsyncEnum(NIAnotherEnum anotherEnum) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAnotherAsyncEnumWithAnotherEnum(ffi_bridge.NIAnotherEnum.values[anotherEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnotherEnum dartTypeRes = (_PigeonFfiCodec.readValue(res)! as NIAnotherEnum);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Object?> throwAsyncError() async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.throwAsyncErrorWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Object? dartTypeRes = _PigeonFfiCodec.readValue(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<void> throwAsyncErrorFromVoid() async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.throwAsyncErrorFromVoidWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       return;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Object?> throwAsyncFlutterError() async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.throwAsyncFlutterErrorWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Object? dartTypeRes = _PigeonFfiCodec.readValue(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<NIAllTypes> echoAsyncNIAllTypes(NIAllTypes everything) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNIAllTypesWithEverything(everything.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllTypes dartTypeRes = NIAllTypes.fromFfi(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<NIAllNullableTypes?> echoAsyncNullableNIAllNullableTypes(NIAllNullableTypes? everything) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableNIAllNullableTypesWithEverything(everything == null ? null : everything.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypes? dartTypeRes = NIAllNullableTypes.fromFfi(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<NIAllNullableTypesWithoutRecursion?> echoAsyncNullableNIAllNullableTypesWithoutRecursion(NIAllNullableTypesWithoutRecursion? everything) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableNIAllNullableTypesWithoutRecursionWithEverything(everything == null ? null : everything.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypesWithoutRecursion? dartTypeRes = NIAllNullableTypesWithoutRecursion.fromFfi(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<int?> echoAsyncNullableInt(int? anInt) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableIntWithAnInt(_PigeonFfiCodec.writeValue<NSNumber>(anInt), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final int? dartTypeRes = res!?.longValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<double?> echoAsyncNullableDouble(double? aDouble) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableDoubleWithADouble(_PigeonFfiCodec.writeValue<NSNumber>(aDouble), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final double? dartTypeRes = res!?.doubleValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<bool?> echoAsyncNullableBool(bool? aBool) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableBoolWithABool(_PigeonFfiCodec.writeValue<NSNumber>(aBool), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final bool? dartTypeRes = res!?.boolValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<String?> echoAsyncNullableString(String? aString) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableStringWithAString(_PigeonFfiCodec.writeValue<NSString>(aString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String? dartTypeRes = res!?.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Uint8List?> echoAsyncNullableUint8List(Uint8List? aUint8List) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableUint8ListWithAUint8List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aUint8List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Uint8List? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Uint8List?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Int32List?> echoAsyncNullableInt32List(Int32List? aInt32List) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableInt32ListWithAInt32List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aInt32List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Int32List? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Int32List?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Int64List?> echoAsyncNullableInt64List(Int64List? aInt64List) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableInt64ListWithAInt64List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aInt64List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Int64List? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Int64List?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Float64List?> echoAsyncNullableFloat64List(Float64List? aFloat64List) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableFloat64ListWithAFloat64List(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(aFloat64List), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Float64List? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Float64List?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Object?> echoAsyncNullableObject(Object? anObject) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableObjectWithAnObject(_PigeonFfiCodec.writeValue<ObjCObjectBase>(anObject), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Object? dartTypeRes = _PigeonFfiCodec.readValue(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<List<Object?>?> echoAsyncNullableList(List<Object?>? list) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableListWithList(_PigeonFfiCodec.writeValue<NSMutableArray>(list), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<Object?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<List<NIAnEnum?>?> echoAsyncNullableEnumList(List<NIAnEnum?>? enumList) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<List<NIAllNullableTypes?>?> echoAsyncNullableClassList(List<NIAllNullableTypes?>? classList) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<Object?, Object?>?> echoAsyncNullableMap(Map<Object?, Object?>? map) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableMapWithMap(_PigeonFfiCodec.writeValue<NSDictionary>(map), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<Object?, Object?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<Object?, Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<String?, String?>?> echoAsyncNullableStringMap(Map<String?, String?>? stringMap) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String?, String?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<String?, String?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<int?, int?>?> echoAsyncNullableIntMap(Map<int?, int?>? intMap) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, int?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int?, int?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<NIAnEnum?, NIAnEnum?>?> echoAsyncNullableEnumMap(Map<NIAnEnum?, NIAnEnum?>? enumMap) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum?, NIAnEnum?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<Map<int?, NIAllNullableTypes?>?> echoAsyncNullableClassMap(Map<int?, NIAllNullableTypes?>? classMap) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, NIAllNullableTypes?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<NIAnEnum?> echoAsyncNullableEnum(NIAnEnum? anEnum) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAsyncNullableEnumWithAnEnum(ffi_bridge.NIAnEnum.values[anEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnEnum? dartTypeRes = (_PigeonFfiCodec.readValue(res) as NIAnEnum?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<NIAnotherEnum?> echoAnotherAsyncNullableEnum(NIAnotherEnum? anotherEnum) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoAnotherAsyncNullableEnumWithAnotherEnum(ffi_bridge.NIAnotherEnum.values[anotherEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnotherEnum? dartTypeRes = (_PigeonFfiCodec.readValue(res) as NIAnotherEnum?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// void callFlutterNoop() {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     _ffiApi.callFlutterNoopWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       return;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Object? callFlutterThrowError() {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ObjCObjectBase? res = _ffiApi.callFlutterThrowErrorWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Object? dartTypeRes = _PigeonFfiCodec.readValue(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// void callFlutterThrowErrorFromVoid() {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     _ffiApi.callFlutterThrowErrorFromVoidWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       return;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllTypes callFlutterEchoNIAllTypes(NIAllTypes everything) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllTypes? res = _ffiApi.callFlutterEchoNIAllTypesWithEverything(everything.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllTypes dartTypeRes = NIAllTypes.fromFfi(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllNullableTypes? callFlutterEchoNIAllNullableTypes(NIAllNullableTypes? everything) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllNullableTypes? res = _ffiApi.callFlutterEchoNIAllNullableTypesWithEverything(everything == null ? null : everything.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypes? dartTypeRes = NIAllNullableTypes.fromFfi(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllNullableTypes callFlutterSendMultipleNullableTypes(bool? aNullableBool, int? aNullableInt, String? aNullableString) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllNullableTypes? res = _ffiApi.callFlutterSendMultipleNullableTypesWithANullableBool(_PigeonFfiCodec.writeValue<NSNumber>(aNullableBool), _PigeonFfiCodec.writeValue<NSNumber>(aNullableInt), _PigeonFfiCodec.writeValue<NSString>(aNullableString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypes dartTypeRes = NIAllNullableTypes.fromFfi(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllNullableTypesWithoutRecursion? callFlutterEchoNIAllNullableTypesWithoutRecursion(NIAllNullableTypesWithoutRecursion? everything) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllNullableTypesWithoutRecursion? res = _ffiApi.callFlutterEchoNIAllNullableTypesWithoutRecursionWithEverything(everything == null ? null : everything.toFfi(), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypesWithoutRecursion? dartTypeRes = NIAllNullableTypesWithoutRecursion.fromFfi(res);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAllNullableTypesWithoutRecursion callFlutterSendMultipleNullableTypesWithoutRecursion(bool? aNullableBool, int? aNullableInt, String? aNullableString) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final ffi_bridge.NIAllNullableTypesWithoutRecursion? res = _ffiApi.callFlutterSendMultipleNullableTypesWithoutRecursionWithANullableBool(_PigeonFfiCodec.writeValue<NSNumber>(aNullableBool), _PigeonFfiCodec.writeValue<NSNumber>(aNullableInt), _PigeonFfiCodec.writeValue<NSString>(aNullableString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAllNullableTypesWithoutRecursion dartTypeRes = NIAllNullableTypesWithoutRecursion.fromFfi(res)!;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// bool callFlutterEchoBool(bool aBool) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoBoolWithABool(_PigeonFfiCodec.writeValue<NSNumber>(aBool), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final bool dartTypeRes = res!.boolValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// int callFlutterEchoInt(int anInt) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoIntWithAnInt(_PigeonFfiCodec.writeValue<NSNumber>(anInt), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final int dartTypeRes = res!.longValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// double callFlutterEchoDouble(double aDouble) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoDoubleWithADouble(_PigeonFfiCodec.writeValue<NSNumber>(aDouble), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final double dartTypeRes = res!.doubleValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// String callFlutterEchoString(String aString) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSString? res = _ffiApi.callFlutterEchoStringWithAString(_PigeonFfiCodec.writeValue<NSString>(aString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String dartTypeRes = res!.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Uint8List callFlutterEchoUint8List(Uint8List list) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.callFlutterEchoUint8ListWithList(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(list), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Uint8List dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Uint8List);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<Object?> callFlutterEchoList(List<Object?> list) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoListWithList(_PigeonFfiCodec.writeValue<NSMutableArray>(list), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<Object?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAnEnum?> callFlutterEchoEnumList(List<NIAnEnum?> enumList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAllNullableTypes?> callFlutterEchoClassList(List<NIAllNullableTypes?> classList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAnEnum> callFlutterEchoNonNullEnumList(List<NIAnEnum> enumList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoNonNullEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAnEnum>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAllNullableTypes> callFlutterEchoNonNullClassList(List<NIAllNullableTypes> classList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoNonNullClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as List<Object?>).cast<NIAllNullableTypes>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<Object?, Object?> callFlutterEchoMap(Map<Object?, Object?> map) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoMapWithMap(_PigeonFfiCodec.writeValue<NSDictionary>(map), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<Object?, Object?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<Object?, Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<String?, String?> callFlutterEchoStringMap(Map<String?, String?> stringMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String?, String?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<String?, String?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int?, int?> callFlutterEchoIntMap(Map<int?, int?> intMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, int?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int?, int?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<NIAnEnum?, NIAnEnum?> callFlutterEchoEnumMap(Map<NIAnEnum?, NIAnEnum?> enumMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum?, NIAnEnum?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<NIAnEnum?, NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int?, NIAllNullableTypes?> callFlutterEchoClassMap(Map<int?, NIAllNullableTypes?> classMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, NIAllNullableTypes?> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int?, NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<String, String> callFlutterEchoNonNullStringMap(Map<String, String> stringMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNonNullStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String, String> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<String, String>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int, int> callFlutterEchoNonNullIntMap(Map<int, int> intMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNonNullIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int, int> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int, int>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<NIAnEnum, NIAnEnum> callFlutterEchoNonNullEnumMap(Map<NIAnEnum, NIAnEnum> enumMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNonNullEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum, NIAnEnum> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<NIAnEnum, NIAnEnum>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int, NIAllNullableTypes> callFlutterEchoNonNullClassMap(Map<int, NIAllNullableTypes> classMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNonNullClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int, NIAllNullableTypes> dartTypeRes = (_PigeonFfiCodec.readValue(res)! as Map<Object?, Object?>).cast<int, NIAllNullableTypes>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAnEnum callFlutterEchoEnum(NIAnEnum anEnum) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoEnumWithAnEnum(ffi_bridge.NIAnEnum.values[anEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnEnum dartTypeRes = (_PigeonFfiCodec.readValue(res)! as NIAnEnum);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAnotherEnum callFlutterEchoNIAnotherEnum(NIAnotherEnum anotherEnum) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoNIAnotherEnumWithAnotherEnum(ffi_bridge.NIAnotherEnum.values[anotherEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnotherEnum dartTypeRes = (_PigeonFfiCodec.readValue(res)! as NIAnotherEnum);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// bool? callFlutterEchoNullableBool(bool? aBool) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoNullableBoolWithABool(_PigeonFfiCodec.writeValue<NSNumber>(aBool), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final bool? dartTypeRes = res!?.boolValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// int? callFlutterEchoNullableInt(int? anInt) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoNullableIntWithAnInt(_PigeonFfiCodec.writeValue<NSNumber>(anInt), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final int? dartTypeRes = res!?.longValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// double? callFlutterEchoNullableDouble(double? aDouble) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoNullableDoubleWithADouble(_PigeonFfiCodec.writeValue<NSNumber>(aDouble), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final double? dartTypeRes = res!?.doubleValue;
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// String? callFlutterEchoNullableString(String? aString) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSString? res = _ffiApi.callFlutterEchoNullableStringWithAString(_PigeonFfiCodec.writeValue<NSString>(aString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String? dartTypeRes = res!?.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Uint8List? callFlutterEchoNullableUint8List(Uint8List? list) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final There is something wrong, a type is not classified? res = _ffiApi.callFlutterEchoNullableUint8ListWithList(_PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(list), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Uint8List? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Uint8List?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<Object?>? callFlutterEchoNullableList(List<Object?>? list) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoNullableListWithList(_PigeonFfiCodec.writeValue<NSMutableArray>(list), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<Object?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAnEnum?>? callFlutterEchoNullableEnumList(List<NIAnEnum?>? enumList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoNullableEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAllNullableTypes?>? callFlutterEchoNullableClassList(List<NIAllNullableTypes?>? classList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoNullableClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAnEnum>? callFlutterEchoNullableNonNullEnumList(List<NIAnEnum>? enumList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoNullableNonNullEnumListWithEnumList(_PigeonFfiCodec.writeValue<NSMutableArray>(enumList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAnEnum>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAnEnum>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// List<NIAllNullableTypes>? callFlutterEchoNullableNonNullClassList(List<NIAllNullableTypes>? classList) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSArray? res = _ffiApi.callFlutterEchoNullableNonNullClassListWithClassList(_PigeonFfiCodec.writeValue<NSMutableArray>(classList), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final List<NIAllNullableTypes>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as List<Object?>?)?.cast<NIAllNullableTypes>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<Object?, Object?>? callFlutterEchoNullableMap(Map<Object?, Object?>? map) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNullableMapWithMap(_PigeonFfiCodec.writeValue<NSDictionary>(map), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<Object?, Object?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<Object?, Object?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<String?, String?>? callFlutterEchoNullableStringMap(Map<String?, String?>? stringMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNullableStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String?, String?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<String?, String?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int?, int?>? callFlutterEchoNullableIntMap(Map<int?, int?>? intMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNullableIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, int?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int?, int?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<NIAnEnum?, NIAnEnum?>? callFlutterEchoNullableEnumMap(Map<NIAnEnum?, NIAnEnum?>? enumMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNullableEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum?, NIAnEnum?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int?, NIAllNullableTypes?>? callFlutterEchoNullableClassMap(Map<int?, NIAllNullableTypes?>? classMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNullableClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int?, NIAllNullableTypes?>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<String, String>? callFlutterEchoNullableNonNullStringMap(Map<String, String>? stringMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNullableNonNullStringMapWithStringMap(_PigeonFfiCodec.writeValue<NSDictionary>(stringMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<String, String>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<String, String>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int, int>? callFlutterEchoNullableNonNullIntMap(Map<int, int>? intMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNullableNonNullIntMapWithIntMap(_PigeonFfiCodec.writeValue<NSDictionary>(intMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int, int>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int, int>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<NIAnEnum, NIAnEnum>? callFlutterEchoNullableNonNullEnumMap(Map<NIAnEnum, NIAnEnum>? enumMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNullableNonNullEnumMapWithEnumMap(_PigeonFfiCodec.writeValue<NSDictionary>(enumMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<NIAnEnum, NIAnEnum>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<NIAnEnum, NIAnEnum>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Map<int, NIAllNullableTypes>? callFlutterEchoNullableNonNullClassMap(Map<int, NIAllNullableTypes>? classMap) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSDictionary? res = _ffiApi.callFlutterEchoNullableNonNullClassMapWithClassMap(_PigeonFfiCodec.writeValue<NSDictionary>(classMap), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final Map<int, NIAllNullableTypes>? dartTypeRes = (_PigeonFfiCodec.readValue(res) as Map<Object?, Object?>?)?.cast<int, NIAllNullableTypes>();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAnEnum? callFlutterEchoNullableEnum(NIAnEnum? anEnum) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoNullableEnumWithAnEnum(ffi_bridge.NIAnEnum.values[anEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnEnum? dartTypeRes = (_PigeonFfiCodec.readValue(res) as NIAnEnum?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// NIAnotherEnum? callFlutterEchoAnotherNullableEnum(NIAnotherEnum? anotherEnum) {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     final NSNumber? res = _ffiApi.callFlutterEchoAnotherNullableEnumWithAnotherEnum(ffi_bridge.NIAnotherEnum.values[anotherEnum.index], wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final NIAnotherEnum? dartTypeRes = (_PigeonFfiCodec.readValue(res) as NIAnotherEnum?);
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// }

// /// The core interface that each host language plugin must implement in
// /// platform_test integration tests.
// class NIHostIntegrationCoreApi {
// /// Constructor for [NIHostIntegrationCoreApi]. The [binaryMessenger] named argument is
// /// available for dependency injection. If it is left null, the default
// /// BinaryMessenger will be used which routes to the host platform.
// NIHostIntegrationCoreApi({
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//     NIHostIntegrationCoreApiForNativeInterop? nativeInteropApi,
// })
//     : pigeonVar_binaryMessenger = binaryMessenger,
//       pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '',
// _nativeInteropApi = nativeInteropApi;

// /// Creates an instance of [NIHostIntegrationCoreApi] that requests an instance of
// /// [NIHostIntegrationCoreApiForNativeInterop] from the host platform with a matching instance name
// /// to [messageChannelSuffix] or the default instance.
// ///
// /// Throws [ArgumentError] if no matching instance can be found.
// factory NIHostIntegrationCoreApi.createWithNativeInteropApi({
//   BinaryMessenger? binaryMessenger,
//   String messageChannelSuffix = '',
// }) {
//   NIHostIntegrationCoreApiForNativeInterop? nativeInteropApi;
//   String nativeInteropApiInstanceName = '';
//   if (Platform.isAndroid) {
//     if (messageChannelSuffix.isEmpty) {
//       nativeInteropApi = NIHostIntegrationCoreApiForNativeInterop.getInstance();
//     } else {
//       nativeInteropApiInstanceName = messageChannelSuffix;
//       nativeInteropApi = NIHostIntegrationCoreApiForNativeInterop.getInstance(
//           channelName: messageChannelSuffix);
//     }
//   }
//   if (nativeInteropApi == null) {
//     throw ArgumentError(
//         'No NIHostIntegrationCoreApi instance with ${nativeInteropApiInstanceName.isEmpty ? 'no ' : ''} instance name ${nativeInteropApiInstanceName.isNotEmpty ? '"$nativeInteropApiInstanceName"' : ''} "$nativeInteropApiInstanceName "}found.');
//   }
//   return NIHostIntegrationCoreApi(
//     binaryMessenger: binaryMessenger,
//     messageChannelSuffix: messageChannelSuffix,
//     nativeInteropApi: nativeInteropApi,
//   );
// }

// final BinaryMessenger? pigeonVar_binaryMessenger;
// static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

// final String pigeonVar_messageChannelSuffix;

// final NIHostIntegrationCoreApiForNativeInterop? _nativeInteropApi;

// /// A no-op function taking no arguments and returning no value, to sanity
// /// test basic calling.
// Future<void> noop() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.noop();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.noop$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return;
// }
// }

// /// Returns the passed object, to test serialization and deserialization.
// Future<NIAllTypes> echoAllTypes(NIAllTypes everything) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAllTypes(everything);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAllTypes$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[everything]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllTypes?)!;
// }
// }

// /// Returns an error, to test error handling.
// Future<Object?> throwError() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.throwError();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.throwError$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return pigeonVar_replyList[0];
// }
// }

// /// Returns an error from a void function, to test error handling.
// Future<void> throwErrorFromVoid() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.throwErrorFromVoid();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.throwErrorFromVoid$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return;
// }
// }

// /// Returns a Flutter error, to test error handling.
// Future<Object?> throwFlutterError() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.throwFlutterError();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.throwFlutterError$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return pigeonVar_replyList[0];
// }
// }

// /// Returns passed in int.
// Future<int> echoInt(int anInt) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoInt(anInt);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoInt$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anInt]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as int?)!;
// }
// }

// /// Returns passed in double.
// Future<double> echoDouble(double aDouble) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoDouble(aDouble);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoDouble$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aDouble]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as double?)!;
// }
// }

// /// Returns the passed in boolean.
// Future<bool> echoBool(bool aBool) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoBool(aBool);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoBool$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aBool]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as bool?)!;
// }
// }

// /// Returns the passed in string.
// Future<String> echoString(String aString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoString(aString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?)!;
// }
// }

// /// Returns the passed in Uint8List.
// Future<Uint8List> echoUint8List(Uint8List aUint8List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoUint8List(aUint8List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoUint8List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aUint8List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Uint8List?)!;
// }
// }

// /// Returns the passed in Int32List.
// Future<Int32List> echoInt32List(Int32List aInt32List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoInt32List(aInt32List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoInt32List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aInt32List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Int32List?)!;
// }
// }

// /// Returns the passed in Int64List.
// Future<Int64List> echoInt64List(Int64List aInt64List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoInt64List(aInt64List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoInt64List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aInt64List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Int64List?)!;
// }
// }

// /// Returns the passed in Float64List.
// Future<Float64List> echoFloat64List(Float64List aFloat64List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoFloat64List(aFloat64List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoFloat64List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aFloat64List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Float64List?)!;
// }
// }

// /// Returns the passed in generic Object.
// Future<Object> echoObject(Object anObject) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoObject(anObject);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoObject$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anObject]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return pigeonVar_replyList[0]!;
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<Object?>> echoList(List<Object?> list) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoList(list);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[list]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Object?>();
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<NIAnEnum?>> echoEnumList(List<NIAnEnum?> enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAnEnum?>();
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<NIAllNullableTypes?>> echoClassList(List<NIAllNullableTypes?> classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAllNullableTypes?>();
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<NIAnEnum>> echoNonNullEnumList(List<NIAnEnum> enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNonNullEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNonNullEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAnEnum>();
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<NIAllNullableTypes>> echoNonNullClassList(List<NIAllNullableTypes> classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNonNullClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNonNullClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAllNullableTypes>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<Object?, Object?>> echoMap(Map<Object?, Object?> map) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoMap(map);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[map]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<Object?, Object?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<String?, String?>> echoStringMap(Map<String?, String?> stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<String?, String?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<int?, int?>> echoIntMap(Map<int?, int?> intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int?, int?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<NIAnEnum?, NIAnEnum?>> echoEnumMap(Map<NIAnEnum?, NIAnEnum?> enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<NIAnEnum?, NIAnEnum?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<int?, NIAllNullableTypes?>> echoClassMap(Map<int?, NIAllNullableTypes?> classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int?, NIAllNullableTypes?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<String, String>> echoNonNullStringMap(Map<String, String> stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNonNullStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNonNullStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<String, String>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<int, int>> echoNonNullIntMap(Map<int, int> intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNonNullIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNonNullIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int, int>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<NIAnEnum, NIAnEnum>> echoNonNullEnumMap(Map<NIAnEnum, NIAnEnum> enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNonNullEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNonNullEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<NIAnEnum, NIAnEnum>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<int, NIAllNullableTypes>> echoNonNullClassMap(Map<int, NIAllNullableTypes> classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNonNullClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNonNullClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int, NIAllNullableTypes>();
// }
// }

// /// Returns the passed class to test nested class serialization and deserialization.
// Future<NIAllClassesWrapper> echoClassWrapper(NIAllClassesWrapper wrapper) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoClassWrapper(wrapper);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoClassWrapper$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[wrapper]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllClassesWrapper?)!;
// }
// }

// /// Returns the passed enum to test serialization and deserialization.
// Future<NIAnEnum> echoEnum(NIAnEnum anEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoEnum(anEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnEnum?)!;
// }
// }

// /// Returns the passed enum to test serialization and deserialization.
// Future<NIAnotherEnum> echoAnotherEnum(NIAnotherEnum anotherEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAnotherEnum(anotherEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAnotherEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anotherEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnotherEnum?)!;
// }
// }

// /// Returns the default string.
// Future<String> echoNamedDefaultString({String aString = 'default'}) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNamedDefaultString(aString: aString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNamedDefaultString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?)!;
// }
// }

// /// Returns passed in double.
// Future<double> echoOptionalDefaultDouble([double aDouble = 3.14]) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoOptionalDefaultDouble(aDouble);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoOptionalDefaultDouble$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aDouble]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as double?)!;
// }
// }

// /// Returns passed in int.
// Future<int> echoRequiredInt({required int anInt}) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoRequiredInt(anInt: anInt);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoRequiredInt$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anInt]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as int?)!;
// }
// }

// /// Returns the passed object, to test serialization and deserialization.
// Future<NIAllNullableTypes?> echoAllNullableTypes(NIAllNullableTypes? everything) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAllNullableTypes(everything);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAllNullableTypes$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[everything]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypes?);
// }
// }

// /// Returns the passed object, to test serialization and deserialization.
// Future<NIAllNullableTypesWithoutRecursion?> echoAllNullableTypesWithoutRecursion(NIAllNullableTypesWithoutRecursion? everything) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAllNullableTypesWithoutRecursion(everything);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAllNullableTypesWithoutRecursion$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[everything]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypesWithoutRecursion?);
// }
// }

// /// Returns the inner `aString` value from the wrapped object, to test
// /// sending of nested objects.
// Future<String?> extractNestedNullableString(NIAllClassesWrapper wrapper) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.extractNestedNullableString(wrapper);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.extractNestedNullableString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[wrapper]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?);
// }
// }

// /// Returns the inner `aString` value from the wrapped object, to test
// /// sending of nested objects.
// Future<NIAllClassesWrapper> createNestedNullableString(String? nullableString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.createNestedNullableString(nullableString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.createNestedNullableString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[nullableString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllClassesWrapper?)!;
// }
// }

// /// Returns passed in arguments of multiple types.
// Future<NIAllNullableTypes> sendMultipleNullableTypes(bool? aNullableBool, int? aNullableInt, String? aNullableString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.sendMultipleNullableTypes(aNullableBool, aNullableInt, aNullableString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.sendMultipleNullableTypes$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableBool, aNullableInt, aNullableString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypes?)!;
// }
// }

// /// Returns passed in arguments of multiple types.
// Future<NIAllNullableTypesWithoutRecursion> sendMultipleNullableTypesWithoutRecursion(bool? aNullableBool, int? aNullableInt, String? aNullableString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.sendMultipleNullableTypesWithoutRecursion(aNullableBool, aNullableInt, aNullableString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.sendMultipleNullableTypesWithoutRecursion$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableBool, aNullableInt, aNullableString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypesWithoutRecursion?)!;
// }
// }

// /// Returns passed in int.
// Future<int?> echoNullableInt(int? aNullableInt) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableInt(aNullableInt);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableInt$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableInt]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as int?);
// }
// }

// /// Returns passed in double.
// Future<double?> echoNullableDouble(double? aNullableDouble) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableDouble(aNullableDouble);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableDouble$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableDouble]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as double?);
// }
// }

// /// Returns the passed in boolean.
// Future<bool?> echoNullableBool(bool? aNullableBool) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableBool(aNullableBool);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableBool$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableBool]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as bool?);
// }
// }

// /// Returns the passed in string.
// Future<String?> echoNullableString(String? aNullableString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableString(aNullableString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?);
// }
// }

// /// Returns the passed in Uint8List.
// Future<Uint8List?> echoNullableUint8List(Uint8List? aNullableUint8List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableUint8List(aNullableUint8List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableUint8List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableUint8List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Uint8List?);
// }
// }

// /// Returns the passed in Int32List.
// Future<Int32List?> echoNullableInt32List(Int32List? aNullableInt32List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableInt32List(aNullableInt32List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableInt32List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableInt32List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Int32List?);
// }
// }

// /// Returns the passed in Int64List.
// Future<Int64List?> echoNullableInt64List(Int64List? aNullableInt64List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableInt64List(aNullableInt64List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableInt64List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableInt64List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Int64List?);
// }
// }

// /// Returns the passed in Float64List.
// Future<Float64List?> echoNullableFloat64List(Float64List? aNullableFloat64List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableFloat64List(aNullableFloat64List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableFloat64List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableFloat64List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Float64List?);
// }
// }

// /// Returns the passed in generic Object.
// Future<Object?> echoNullableObject(Object? aNullableObject) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableObject(aNullableObject);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableObject$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableObject]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return pigeonVar_replyList[0];
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<Object?>?> echoNullableList(List<Object?>? aNullableList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableList(aNullableList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<Object?>();
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<NIAnEnum?>?> echoNullableEnumList(List<NIAnEnum?>? enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAnEnum?>();
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<NIAllNullableTypes?>?> echoNullableClassList(List<NIAllNullableTypes?>? classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAllNullableTypes?>();
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<NIAnEnum>?> echoNullableNonNullEnumList(List<NIAnEnum>? enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableNonNullEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableNonNullEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAnEnum>();
// }
// }

// /// Returns the passed list, to test serialization and deserialization.
// Future<List<NIAllNullableTypes>?> echoNullableNonNullClassList(List<NIAllNullableTypes>? classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableNonNullClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableNonNullClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAllNullableTypes>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<Object?, Object?>?> echoNullableMap(Map<Object?, Object?>? map) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableMap(map);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[map]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<Object?, Object?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<String?, String?>?> echoNullableStringMap(Map<String?, String?>? stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<String?, String?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<int?, int?>?> echoNullableIntMap(Map<int?, int?>? intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int?, int?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<NIAnEnum?, NIAnEnum?>?> echoNullableEnumMap(Map<NIAnEnum?, NIAnEnum?>? enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<int?, NIAllNullableTypes?>?> echoNullableClassMap(Map<int?, NIAllNullableTypes?>? classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<String, String>?> echoNullableNonNullStringMap(Map<String, String>? stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableNonNullStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableNonNullStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<String, String>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<int, int>?> echoNullableNonNullIntMap(Map<int, int>? intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableNonNullIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableNonNullIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int, int>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<NIAnEnum, NIAnEnum>?> echoNullableNonNullEnumMap(Map<NIAnEnum, NIAnEnum>? enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableNonNullEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableNonNullEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<NIAnEnum, NIAnEnum>();
// }
// }

// /// Returns the passed map, to test serialization and deserialization.
// Future<Map<int, NIAllNullableTypes>?> echoNullableNonNullClassMap(Map<int, NIAllNullableTypes>? classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableNonNullClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableNonNullClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int, NIAllNullableTypes>();
// }
// }

// Future<NIAnEnum?> echoNullableEnum(NIAnEnum? anEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNullableEnum(anEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNullableEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnEnum?);
// }
// }

// Future<NIAnotherEnum?> echoAnotherNullableEnum(NIAnotherEnum? anotherEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAnotherNullableEnum(anotherEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAnotherNullableEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anotherEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnotherEnum?);
// }
// }

// /// Returns passed in int.
// Future<int?> echoOptionalNullableInt([int? aNullableInt]) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoOptionalNullableInt(aNullableInt);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoOptionalNullableInt$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableInt]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as int?);
// }
// }

// /// Returns the passed in string.
// Future<String?> echoNamedNullableString({String? aNullableString}) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoNamedNullableString(aNullableString: aNullableString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoNamedNullableString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?);
// }
// }

// /// A no-op function taking no arguments and returning no value, to sanity
// /// test basic asynchronous calling.
// Future<void> noopAsync() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.noopAsync();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.noopAsync$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return;
// }
// }

// /// Returns passed in int asynchronously.
// Future<int> echoAsyncInt(int anInt) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncInt(anInt);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncInt$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anInt]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as int?)!;
// }
// }

// /// Returns passed in double asynchronously.
// Future<double> echoAsyncDouble(double aDouble) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncDouble(aDouble);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncDouble$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aDouble]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as double?)!;
// }
// }

// /// Returns the passed in boolean asynchronously.
// Future<bool> echoAsyncBool(bool aBool) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncBool(aBool);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncBool$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aBool]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as bool?)!;
// }
// }

// /// Returns the passed string asynchronously.
// Future<String> echoAsyncString(String aString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncString(aString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?)!;
// }
// }

// /// Returns the passed in Uint8List asynchronously.
// Future<Uint8List> echoAsyncUint8List(Uint8List aUint8List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncUint8List(aUint8List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncUint8List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aUint8List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Uint8List?)!;
// }
// }

// /// Returns the passed in Int32List asynchronously.
// Future<Int32List> echoAsyncInt32List(Int32List aInt32List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncInt32List(aInt32List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncInt32List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aInt32List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Int32List?)!;
// }
// }

// /// Returns the passed in Int64List asynchronously.
// Future<Int64List> echoAsyncInt64List(Int64List aInt64List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncInt64List(aInt64List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncInt64List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aInt64List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Int64List?)!;
// }
// }

// /// Returns the passed in Float64List asynchronously.
// Future<Float64List> echoAsyncFloat64List(Float64List aFloat64List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncFloat64List(aFloat64List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncFloat64List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aFloat64List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Float64List?)!;
// }
// }

// /// Returns the passed in generic Object asynchronously.
// Future<Object> echoAsyncObject(Object anObject) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncObject(anObject);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncObject$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anObject]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return pigeonVar_replyList[0]!;
// }
// }

// /// Returns the passed list, to test asynchronous serialization and deserialization.
// Future<List<Object?>> echoAsyncList(List<Object?> list) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncList(list);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[list]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Object?>();
// }
// }

// /// Returns the passed list, to test asynchronous serialization and deserialization.
// Future<List<NIAnEnum?>> echoAsyncEnumList(List<NIAnEnum?> enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAnEnum?>();
// }
// }

// /// Returns the passed list, to test asynchronous serialization and deserialization.
// Future<List<NIAllNullableTypes?>> echoAsyncClassList(List<NIAllNullableTypes?> classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAllNullableTypes?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<Object?, Object?>> echoAsyncMap(Map<Object?, Object?> map) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncMap(map);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[map]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<Object?, Object?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<String?, String?>> echoAsyncStringMap(Map<String?, String?> stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<String?, String?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<int?, int?>> echoAsyncIntMap(Map<int?, int?> intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int?, int?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<NIAnEnum?, NIAnEnum?>> echoAsyncEnumMap(Map<NIAnEnum?, NIAnEnum?> enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<NIAnEnum?, NIAnEnum?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<int?, NIAllNullableTypes?>> echoAsyncClassMap(Map<int?, NIAllNullableTypes?> classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int?, NIAllNullableTypes?>();
// }
// }

// /// Returns the passed enum, to test asynchronous serialization and deserialization.
// Future<NIAnEnum> echoAsyncEnum(NIAnEnum anEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncEnum(anEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnEnum?)!;
// }
// }

// /// Returns the passed enum, to test asynchronous serialization and deserialization.
// Future<NIAnotherEnum> echoAnotherAsyncEnum(NIAnotherEnum anotherEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAnotherAsyncEnum(anotherEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAnotherAsyncEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anotherEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnotherEnum?)!;
// }
// }

// /// Responds with an error from an async function returning a value.
// Future<Object?> throwAsyncError() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.throwAsyncError();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.throwAsyncError$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return pigeonVar_replyList[0];
// }
// }

// /// Responds with an error from an async void function.
// Future<void> throwAsyncErrorFromVoid() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.throwAsyncErrorFromVoid();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.throwAsyncErrorFromVoid$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return;
// }
// }

// /// Responds with a Flutter error from an async function returning a value.
// Future<Object?> throwAsyncFlutterError() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.throwAsyncFlutterError();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.throwAsyncFlutterError$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return pigeonVar_replyList[0];
// }
// }

// /// Returns the passed object, to test async serialization and deserialization.
// Future<NIAllTypes> echoAsyncNIAllTypes(NIAllTypes everything) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNIAllTypes(everything);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNIAllTypes$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[everything]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllTypes?)!;
// }
// }

// /// Returns the passed object, to test serialization and deserialization.
// Future<NIAllNullableTypes?> echoAsyncNullableNIAllNullableTypes(NIAllNullableTypes? everything) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableNIAllNullableTypes(everything);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableNIAllNullableTypes$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[everything]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypes?);
// }
// }

// /// Returns the passed object, to test serialization and deserialization.
// Future<NIAllNullableTypesWithoutRecursion?> echoAsyncNullableNIAllNullableTypesWithoutRecursion(NIAllNullableTypesWithoutRecursion? everything) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableNIAllNullableTypesWithoutRecursion(everything);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableNIAllNullableTypesWithoutRecursion$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[everything]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypesWithoutRecursion?);
// }
// }

// /// Returns passed in int asynchronously.
// Future<int?> echoAsyncNullableInt(int? anInt) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableInt(anInt);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableInt$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anInt]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as int?);
// }
// }

// /// Returns passed in double asynchronously.
// Future<double?> echoAsyncNullableDouble(double? aDouble) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableDouble(aDouble);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableDouble$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aDouble]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as double?);
// }
// }

// /// Returns the passed in boolean asynchronously.
// Future<bool?> echoAsyncNullableBool(bool? aBool) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableBool(aBool);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableBool$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aBool]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as bool?);
// }
// }

// /// Returns the passed string asynchronously.
// Future<String?> echoAsyncNullableString(String? aString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableString(aString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?);
// }
// }

// /// Returns the passed in Uint8List asynchronously.
// Future<Uint8List?> echoAsyncNullableUint8List(Uint8List? aUint8List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableUint8List(aUint8List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableUint8List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aUint8List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Uint8List?);
// }
// }

// /// Returns the passed in Int32List asynchronously.
// Future<Int32List?> echoAsyncNullableInt32List(Int32List? aInt32List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableInt32List(aInt32List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableInt32List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aInt32List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Int32List?);
// }
// }

// /// Returns the passed in Int64List asynchronously.
// Future<Int64List?> echoAsyncNullableInt64List(Int64List? aInt64List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableInt64List(aInt64List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableInt64List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aInt64List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Int64List?);
// }
// }

// /// Returns the passed in Float64List asynchronously.
// Future<Float64List?> echoAsyncNullableFloat64List(Float64List? aFloat64List) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableFloat64List(aFloat64List);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableFloat64List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aFloat64List]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Float64List?);
// }
// }

// /// Returns the passed in generic Object asynchronously.
// Future<Object?> echoAsyncNullableObject(Object? anObject) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableObject(anObject);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableObject$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anObject]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return pigeonVar_replyList[0];
// }
// }

// /// Returns the passed list, to test asynchronous serialization and deserialization.
// Future<List<Object?>?> echoAsyncNullableList(List<Object?>? list) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableList(list);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[list]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<Object?>();
// }
// }

// /// Returns the passed list, to test asynchronous serialization and deserialization.
// Future<List<NIAnEnum?>?> echoAsyncNullableEnumList(List<NIAnEnum?>? enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAnEnum?>();
// }
// }

// /// Returns the passed list, to test asynchronous serialization and deserialization.
// Future<List<NIAllNullableTypes?>?> echoAsyncNullableClassList(List<NIAllNullableTypes?>? classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAllNullableTypes?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<Object?, Object?>?> echoAsyncNullableMap(Map<Object?, Object?>? map) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableMap(map);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[map]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<Object?, Object?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<String?, String?>?> echoAsyncNullableStringMap(Map<String?, String?>? stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<String?, String?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<int?, int?>?> echoAsyncNullableIntMap(Map<int?, int?>? intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int?, int?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<NIAnEnum?, NIAnEnum?>?> echoAsyncNullableEnumMap(Map<NIAnEnum?, NIAnEnum?>? enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>();
// }
// }

// /// Returns the passed map, to test asynchronous serialization and deserialization.
// Future<Map<int?, NIAllNullableTypes?>?> echoAsyncNullableClassMap(Map<int?, NIAllNullableTypes?>? classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>();
// }
// }

// /// Returns the passed enum, to test asynchronous serialization and deserialization.
// Future<NIAnEnum?> echoAsyncNullableEnum(NIAnEnum? anEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAsyncNullableEnum(anEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAsyncNullableEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnEnum?);
// }
// }

// /// Returns the passed enum, to test asynchronous serialization and deserialization.
// Future<NIAnotherEnum?> echoAnotherAsyncNullableEnum(NIAnotherEnum? anotherEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echoAnotherAsyncNullableEnum(anotherEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.echoAnotherAsyncNullableEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anotherEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnotherEnum?);
// }
// }

// Future<void> callFlutterNoop() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterNoop();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterNoop$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return;
// }
// }

// Future<Object?> callFlutterThrowError() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterThrowError();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterThrowError$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return pigeonVar_replyList[0];
// }
// }

// Future<void> callFlutterThrowErrorFromVoid() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterThrowErrorFromVoid();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterThrowErrorFromVoid$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return;
// }
// }

// Future<NIAllTypes> callFlutterEchoNIAllTypes(NIAllTypes everything) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNIAllTypes(everything);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNIAllTypes$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[everything]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllTypes?)!;
// }
// }

// Future<NIAllNullableTypes?> callFlutterEchoNIAllNullableTypes(NIAllNullableTypes? everything) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNIAllNullableTypes(everything);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNIAllNullableTypes$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[everything]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypes?);
// }
// }

// Future<NIAllNullableTypes> callFlutterSendMultipleNullableTypes(bool? aNullableBool, int? aNullableInt, String? aNullableString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterSendMultipleNullableTypes(aNullableBool, aNullableInt, aNullableString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterSendMultipleNullableTypes$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableBool, aNullableInt, aNullableString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypes?)!;
// }
// }

// Future<NIAllNullableTypesWithoutRecursion?> callFlutterEchoNIAllNullableTypesWithoutRecursion(NIAllNullableTypesWithoutRecursion? everything) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNIAllNullableTypesWithoutRecursion(everything);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNIAllNullableTypesWithoutRecursion$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[everything]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypesWithoutRecursion?);
// }
// }

// Future<NIAllNullableTypesWithoutRecursion> callFlutterSendMultipleNullableTypesWithoutRecursion(bool? aNullableBool, int? aNullableInt, String? aNullableString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterSendMultipleNullableTypesWithoutRecursion(aNullableBool, aNullableInt, aNullableString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterSendMultipleNullableTypesWithoutRecursion$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aNullableBool, aNullableInt, aNullableString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAllNullableTypesWithoutRecursion?)!;
// }
// }

// Future<bool> callFlutterEchoBool(bool aBool) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoBool(aBool);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoBool$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aBool]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as bool?)!;
// }
// }

// Future<int> callFlutterEchoInt(int anInt) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoInt(anInt);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoInt$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anInt]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as int?)!;
// }
// }

// Future<double> callFlutterEchoDouble(double aDouble) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoDouble(aDouble);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoDouble$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aDouble]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as double?)!;
// }
// }

// Future<String> callFlutterEchoString(String aString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoString(aString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?)!;
// }
// }

// Future<Uint8List> callFlutterEchoUint8List(Uint8List list) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoUint8List(list);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoUint8List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[list]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Uint8List?)!;
// }
// }

// Future<List<Object?>> callFlutterEchoList(List<Object?> list) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoList(list);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[list]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<Object?>();
// }
// }

// Future<List<NIAnEnum?>> callFlutterEchoEnumList(List<NIAnEnum?> enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAnEnum?>();
// }
// }

// Future<List<NIAllNullableTypes?>> callFlutterEchoClassList(List<NIAllNullableTypes?> classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAllNullableTypes?>();
// }
// }

// Future<List<NIAnEnum>> callFlutterEchoNonNullEnumList(List<NIAnEnum> enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNonNullEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNonNullEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAnEnum>();
// }
// }

// Future<List<NIAllNullableTypes>> callFlutterEchoNonNullClassList(List<NIAllNullableTypes> classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNonNullClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNonNullClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)!.cast<NIAllNullableTypes>();
// }
// }

// Future<Map<Object?, Object?>> callFlutterEchoMap(Map<Object?, Object?> map) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoMap(map);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[map]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<Object?, Object?>();
// }
// }

// Future<Map<String?, String?>> callFlutterEchoStringMap(Map<String?, String?> stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<String?, String?>();
// }
// }

// Future<Map<int?, int?>> callFlutterEchoIntMap(Map<int?, int?> intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int?, int?>();
// }
// }

// Future<Map<NIAnEnum?, NIAnEnum?>> callFlutterEchoEnumMap(Map<NIAnEnum?, NIAnEnum?> enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<NIAnEnum?, NIAnEnum?>();
// }
// }

// Future<Map<int?, NIAllNullableTypes?>> callFlutterEchoClassMap(Map<int?, NIAllNullableTypes?> classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int?, NIAllNullableTypes?>();
// }
// }

// Future<Map<String, String>> callFlutterEchoNonNullStringMap(Map<String, String> stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNonNullStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNonNullStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<String, String>();
// }
// }

// Future<Map<int, int>> callFlutterEchoNonNullIntMap(Map<int, int> intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNonNullIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNonNullIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int, int>();
// }
// }

// Future<Map<NIAnEnum, NIAnEnum>> callFlutterEchoNonNullEnumMap(Map<NIAnEnum, NIAnEnum> enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNonNullEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNonNullEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<NIAnEnum, NIAnEnum>();
// }
// }

// Future<Map<int, NIAllNullableTypes>> callFlutterEchoNonNullClassMap(Map<int, NIAllNullableTypes> classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNonNullClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNonNullClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)!.cast<int, NIAllNullableTypes>();
// }
// }

// Future<NIAnEnum> callFlutterEchoEnum(NIAnEnum anEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoEnum(anEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnEnum?)!;
// }
// }

// Future<NIAnotherEnum> callFlutterEchoNIAnotherEnum(NIAnotherEnum anotherEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNIAnotherEnum(anotherEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNIAnotherEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anotherEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnotherEnum?)!;
// }
// }

// Future<bool?> callFlutterEchoNullableBool(bool? aBool) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableBool(aBool);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableBool$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aBool]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as bool?);
// }
// }

// Future<int?> callFlutterEchoNullableInt(int? anInt) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableInt(anInt);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableInt$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anInt]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as int?);
// }
// }

// Future<double?> callFlutterEchoNullableDouble(double? aDouble) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableDouble(aDouble);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableDouble$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aDouble]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as double?);
// }
// }

// Future<String?> callFlutterEchoNullableString(String? aString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableString(aString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableString$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?);
// }
// }

// Future<Uint8List?> callFlutterEchoNullableUint8List(Uint8List? list) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableUint8List(list);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableUint8List$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[list]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Uint8List?);
// }
// }

// Future<List<Object?>?> callFlutterEchoNullableList(List<Object?>? list) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableList(list);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[list]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<Object?>();
// }
// }

// Future<List<NIAnEnum?>?> callFlutterEchoNullableEnumList(List<NIAnEnum?>? enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAnEnum?>();
// }
// }

// Future<List<NIAllNullableTypes?>?> callFlutterEchoNullableClassList(List<NIAllNullableTypes?>? classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAllNullableTypes?>();
// }
// }

// Future<List<NIAnEnum>?> callFlutterEchoNullableNonNullEnumList(List<NIAnEnum>? enumList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableNonNullEnumList(enumList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableNonNullEnumList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAnEnum>();
// }
// }

// Future<List<NIAllNullableTypes>?> callFlutterEchoNullableNonNullClassList(List<NIAllNullableTypes>? classList) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableNonNullClassList(classList);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableNonNullClassList$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classList]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as List<Object?>?)?.cast<NIAllNullableTypes>();
// }
// }

// Future<Map<Object?, Object?>?> callFlutterEchoNullableMap(Map<Object?, Object?>? map) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableMap(map);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[map]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<Object?, Object?>();
// }
// }

// Future<Map<String?, String?>?> callFlutterEchoNullableStringMap(Map<String?, String?>? stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<String?, String?>();
// }
// }

// Future<Map<int?, int?>?> callFlutterEchoNullableIntMap(Map<int?, int?>? intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int?, int?>();
// }
// }

// Future<Map<NIAnEnum?, NIAnEnum?>?> callFlutterEchoNullableEnumMap(Map<NIAnEnum?, NIAnEnum?>? enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>();
// }
// }

// Future<Map<int?, NIAllNullableTypes?>?> callFlutterEchoNullableClassMap(Map<int?, NIAllNullableTypes?>? classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>();
// }
// }

// Future<Map<String, String>?> callFlutterEchoNullableNonNullStringMap(Map<String, String>? stringMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableNonNullStringMap(stringMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableNonNullStringMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[stringMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<String, String>();
// }
// }

// Future<Map<int, int>?> callFlutterEchoNullableNonNullIntMap(Map<int, int>? intMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableNonNullIntMap(intMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableNonNullIntMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[intMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int, int>();
// }
// }

// Future<Map<NIAnEnum, NIAnEnum>?> callFlutterEchoNullableNonNullEnumMap(Map<NIAnEnum, NIAnEnum>? enumMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableNonNullEnumMap(enumMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableNonNullEnumMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[enumMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<NIAnEnum, NIAnEnum>();
// }
// }

// Future<Map<int, NIAllNullableTypes>?> callFlutterEchoNullableNonNullClassMap(Map<int, NIAllNullableTypes>? classMap) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableNonNullClassMap(classMap);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableNonNullClassMap$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[classMap]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as Map<Object?, Object?>?)?.cast<int, NIAllNullableTypes>();
// }
// }

// Future<NIAnEnum?> callFlutterEchoNullableEnum(NIAnEnum? anEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoNullableEnum(anEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoNullableEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnEnum?);
// }
// }

// Future<NIAnotherEnum?> callFlutterEchoAnotherNullableEnum(NIAnotherEnum? anotherEnum) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.callFlutterEchoAnotherNullableEnum(anotherEnum);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostIntegrationCoreApi.callFlutterEchoAnotherNullableEnum$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[anotherEnum]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return (pigeonVar_replyList[0] as NIAnotherEnum?);
// }
// }
// }

// class NIHostTrivialApiForNativeInterop {
// NIHostTrivialApiForNativeInterop._withRegistrar({jni_bridge.NIHostTrivialApiRegistrar? jniApi, ffi_bridge.NIHostTrivialApiSetup? ffiApi}) : _jniApi = jniApi, _ffiApi = ffiApi;

// /// Returns instance of NIHostTrivialApiForNativeInterop with specified [channelName] if one has been registered.
// static NIHostTrivialApiForNativeInterop? getInstance({String channelName = defaultInstanceName}) {
// late NIHostTrivialApiForNativeInterop res;
//   if (Platform.isAndroid) {
//     final jni_bridge.NIHostTrivialApiRegistrar? link =
//         jni_bridge.NIHostTrivialApiRegistrar().getInstance(JString.fromString(channelName));
//     if (link == null) {
//       _throwNoInstanceError(channelName);
//     }
//     res = NIHostTrivialApiForNativeInterop._withRegistrar(jniApi: link);
//   } else if (Platform.isIOS || Platform.isMacOS) {
//     final ffi_bridge.NIHostTrivialApiSetup? link =
//         ffi_bridge.NIHostTrivialApiSetup.getInstanceWithName(NSString(channelName));
//     if (link == null) {
//       _throwNoInstanceError(channelName);
//     }
//     res = NIHostTrivialApiForNativeInterop._withRegistrar(ffiApi: link);
//   }
//   return res;
// }

// late final jni_bridge.NIHostTrivialApiRegistrar? _jniApi;
// late final ffi_bridge.NIHostTrivialApiSetup? _ffiApi;

// void noop() {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     _ffiApi.noopWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       return;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// }

// /// An API that can be implemented for minimal, compile-only tests.
// class NIHostTrivialApi {
// /// Constructor for [NIHostTrivialApi]. The [binaryMessenger] named argument is
// /// available for dependency injection. If it is left null, the default
// /// BinaryMessenger will be used which routes to the host platform.
// NIHostTrivialApi({
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//     NIHostTrivialApiForNativeInterop? nativeInteropApi,
// })
//     : pigeonVar_binaryMessenger = binaryMessenger,
//       pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '',
// _nativeInteropApi = nativeInteropApi;

// /// Creates an instance of [NIHostTrivialApi] that requests an instance of
// /// [NIHostTrivialApiForNativeInterop] from the host platform with a matching instance name
// /// to [messageChannelSuffix] or the default instance.
// ///
// /// Throws [ArgumentError] if no matching instance can be found.
// factory NIHostTrivialApi.createWithNativeInteropApi({
//   BinaryMessenger? binaryMessenger,
//   String messageChannelSuffix = '',
// }) {
//   NIHostTrivialApiForNativeInterop? nativeInteropApi;
//   String nativeInteropApiInstanceName = '';
//   if (Platform.isAndroid) {
//     if (messageChannelSuffix.isEmpty) {
//       nativeInteropApi = NIHostTrivialApiForNativeInterop.getInstance();
//     } else {
//       nativeInteropApiInstanceName = messageChannelSuffix;
//       nativeInteropApi = NIHostTrivialApiForNativeInterop.getInstance(
//           channelName: messageChannelSuffix);
//     }
//   }
//   if (nativeInteropApi == null) {
//     throw ArgumentError(
//         'No NIHostTrivialApi instance with ${nativeInteropApiInstanceName.isEmpty ? 'no ' : ''} instance name ${nativeInteropApiInstanceName.isNotEmpty ? '"$nativeInteropApiInstanceName"' : ''} "$nativeInteropApiInstanceName "}found.');
//   }
//   return NIHostTrivialApi(
//     binaryMessenger: binaryMessenger,
//     messageChannelSuffix: messageChannelSuffix,
//     nativeInteropApi: nativeInteropApi,
//   );
// }

// final BinaryMessenger? pigeonVar_binaryMessenger;
// static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

// final String pigeonVar_messageChannelSuffix;

// final NIHostTrivialApiForNativeInterop? _nativeInteropApi;

// Future<void> noop() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.noop();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostTrivialApi.noop$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return;
// }
// }
// }

// class NIHostSmallApiForNativeInterop {
// NIHostSmallApiForNativeInterop._withRegistrar({jni_bridge.NIHostSmallApiRegistrar? jniApi, ffi_bridge.NIHostSmallApiSetup? ffiApi}) : _jniApi = jniApi, _ffiApi = ffiApi;

// /// Returns instance of NIHostSmallApiForNativeInterop with specified [channelName] if one has been registered.
// static NIHostSmallApiForNativeInterop? getInstance({String channelName = defaultInstanceName}) {
// late NIHostSmallApiForNativeInterop res;
//   if (Platform.isAndroid) {
//     final jni_bridge.NIHostSmallApiRegistrar? link =
//         jni_bridge.NIHostSmallApiRegistrar().getInstance(JString.fromString(channelName));
//     if (link == null) {
//       _throwNoInstanceError(channelName);
//     }
//     res = NIHostSmallApiForNativeInterop._withRegistrar(jniApi: link);
//   } else if (Platform.isIOS || Platform.isMacOS) {
//     final ffi_bridge.NIHostSmallApiSetup? link =
//         ffi_bridge.NIHostSmallApiSetup.getInstanceWithName(NSString(channelName));
//     if (link == null) {
//       _throwNoInstanceError(channelName);
//     }
//     res = NIHostSmallApiForNativeInterop._withRegistrar(ffiApi: link);
//   }
//   return res;
// }

// late final jni_bridge.NIHostSmallApiRegistrar? _jniApi;
// late final ffi_bridge.NIHostSmallApiSetup? _ffiApi;

// Future<String> echo(String aString) async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.echoWithAString(_PigeonFfiCodec.writeValue<NSString>(aString), wrappedError: error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       final String dartTypeRes = res!.toDartString();
//       return dartTypeRes;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// Future<void> voidVoid() async {
// try {
//   if (_jniApi != null) {
//   } else if (_ffiApi != null) {
//     final ffi_bridge.JniTestsError error = ffi_bridge.JniTestsError();
//     await _ffiApi.voidVoidWithWrappedError(error);
//     if (error.code != null) {
//       throw PlatformException(code: error.code!.toDartString(), message: error.message?.toDartString(), details: error.details.toString());
//     } else {
//       return;
//     }
//   }
// } on JniException catch (e) {
//   throw PlatformException(code: 'PlatformException', message: e.message, stacktrace: e.stackTrace,);
// } catch (e) {
//   rethrow;
// }
// throw Exception("this shouldn't be possible");
// }

// }

// /// A simple API implemented in some unit tests.
// class NIHostSmallApi {
// /// Constructor for [NIHostSmallApi]. The [binaryMessenger] named argument is
// /// available for dependency injection. If it is left null, the default
// /// BinaryMessenger will be used which routes to the host platform.
// NIHostSmallApi({
//     BinaryMessenger? binaryMessenger,
//     String messageChannelSuffix = '',
//     NIHostSmallApiForNativeInterop? nativeInteropApi,
// })
//     : pigeonVar_binaryMessenger = binaryMessenger,
//       pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '',
// _nativeInteropApi = nativeInteropApi;

// /// Creates an instance of [NIHostSmallApi] that requests an instance of
// /// [NIHostSmallApiForNativeInterop] from the host platform with a matching instance name
// /// to [messageChannelSuffix] or the default instance.
// ///
// /// Throws [ArgumentError] if no matching instance can be found.
// factory NIHostSmallApi.createWithNativeInteropApi({
//   BinaryMessenger? binaryMessenger,
//   String messageChannelSuffix = '',
// }) {
//   NIHostSmallApiForNativeInterop? nativeInteropApi;
//   String nativeInteropApiInstanceName = '';
//   if (Platform.isAndroid) {
//     if (messageChannelSuffix.isEmpty) {
//       nativeInteropApi = NIHostSmallApiForNativeInterop.getInstance();
//     } else {
//       nativeInteropApiInstanceName = messageChannelSuffix;
//       nativeInteropApi = NIHostSmallApiForNativeInterop.getInstance(
//           channelName: messageChannelSuffix);
//     }
//   }
//   if (nativeInteropApi == null) {
//     throw ArgumentError(
//         'No NIHostSmallApi instance with ${nativeInteropApiInstanceName.isEmpty ? 'no ' : ''} instance name ${nativeInteropApiInstanceName.isNotEmpty ? '"$nativeInteropApiInstanceName"' : ''} "$nativeInteropApiInstanceName "}found.');
//   }
//   return NIHostSmallApi(
//     binaryMessenger: binaryMessenger,
//     messageChannelSuffix: messageChannelSuffix,
//     nativeInteropApi: nativeInteropApi,
//   );
// }

// final BinaryMessenger? pigeonVar_binaryMessenger;
// static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

// final String pigeonVar_messageChannelSuffix;

// final NIHostSmallApiForNativeInterop? _nativeInteropApi;

// Future<String> echo(String aString) async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.echo(aString);
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostSmallApi.echo$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[aString]);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else if (pigeonVar_replyList[0] == null) {
//   throw PlatformException(
//     code: 'null-error',
//     message: 'Host platform returned null value for non-null return value.',
//   );
// } else {
//   return (pigeonVar_replyList[0] as String?)!;
// }
// }

// Future<void> voidVoid() async {
// if ((Platform.isAndroid || Platform.isIOS || Platform.isMacOS) && _nativeInteropApi != null) {
//   return _nativeInteropApi.voidVoid();
// }
// final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_integration_tests.NIHostSmallApi.voidVoid$pigeonVar_messageChannelSuffix';
// final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//   pigeonVar_channelName,
//   pigeonChannelCodec,
//   binaryMessenger: pigeonVar_binaryMessenger,
// );
// final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
// final List<Object?>? pigeonVar_replyList =
//     await pigeonVar_sendFuture as List<Object?>?;
// if (pigeonVar_replyList == null) {
//   throw _createConnectionError(pigeonVar_channelName);
// } else if (pigeonVar_replyList.length > 1) {
//   throw PlatformException(
//     code: pigeonVar_replyList[0]! as String,
//     message: pigeonVar_replyList[1] as String?,
//     details: pigeonVar_replyList[2],
//   );
// } else {
//   return;
// }
// }
// }

// /// The core interface that the Dart platform_test code implements for host
// /// integration tests to call into.
// final class NIFlutterIntegrationCoreApiRegistrar with jni_bridge.$NIFlutterIntegrationCoreApi {
// NIFlutterIntegrationCoreApi? dartApi;

// NIFlutterIntegrationCoreApi register(
// NIFlutterIntegrationCoreApi api, {
// String name = defaultInstanceName,
// }
// ) {
// dartApi = api;
// final jni_bridge.NIFlutterIntegrationCoreApi impl =
//     jni_bridge.NIFlutterIntegrationCoreApi.implement(this);
// jni_bridge.NIFlutterIntegrationCoreApiRegistrar()
//     .registerInstance(impl, JString.fromString(name));
// return api;

// }

// @override
// void noop() {
// if (dartApi != null) {
//   return dartApi!.noop();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JObject? throwError() {
// if (dartApi != null) {
//   final Object? response = dartApi!.throwError();
//   return _PigeonJniCodec.writeValue<JObject?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// void throwErrorFromVoid() {
// if (dartApi != null) {
//   return dartApi!.throwErrorFromVoid();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// jni_bridge.NIAllTypes echoNIAllTypes(jni_bridge.NIAllTypes everything) {
// if (dartApi != null) {
//   final NIAllTypes response = dartApi!.echoNIAllTypes(NIAllTypes.fromJni(everything)!);
//   return response.toJni();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// jni_bridge.NIAllNullableTypes? echoNIAllNullableTypes(jni_bridge.NIAllNullableTypes? everything) {
// if (dartApi != null) {
//   final NIAllNullableTypes? response = dartApi!.echoNIAllNullableTypes(NIAllNullableTypes.fromJni(everything));
//   return response == null ? null : response.toJni();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// jni_bridge.NIAllNullableTypes sendMultipleNullableTypes(JBoolean? aNullableBool,JLong? aNullableInt,JString? aNullableString,) {
// if (dartApi != null) {
//   final NIAllNullableTypes response = dartApi!.sendMultipleNullableTypes(aNullableBool?.booleanValue(releaseOriginal: true), aNullableInt?.longValue(releaseOriginal: true), aNullableString?.toDartString(releaseOriginal: true));
//   return response.toJni();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// jni_bridge.NIAllNullableTypesWithoutRecursion? echoNIAllNullableTypesWithoutRecursion(jni_bridge.NIAllNullableTypesWithoutRecursion? everything) {
// if (dartApi != null) {
//   final NIAllNullableTypesWithoutRecursion? response = dartApi!.echoNIAllNullableTypesWithoutRecursion(NIAllNullableTypesWithoutRecursion.fromJni(everything));
//   return response == null ? null : response.toJni();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// jni_bridge.NIAllNullableTypesWithoutRecursion sendMultipleNullableTypesWithoutRecursion(JBoolean? aNullableBool,JLong? aNullableInt,JString? aNullableString,) {
// if (dartApi != null) {
//   final NIAllNullableTypesWithoutRecursion response = dartApi!.sendMultipleNullableTypesWithoutRecursion(aNullableBool?.booleanValue(releaseOriginal: true), aNullableInt?.longValue(releaseOriginal: true), aNullableString?.toDartString(releaseOriginal: true));
//   return response.toJni();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// bool echoBool(bool aBool) {
// if (dartApi != null) {
//   final bool response = dartApi!.echoBool(aBool);
//   return response;
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// int echoInt(int anInt) {
// if (dartApi != null) {
//   final int response = dartApi!.echoInt(anInt);
//   return response;
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// double echoDouble(double aDouble) {
// if (dartApi != null) {
//   final double response = dartApi!.echoDouble(aDouble);
//   return response;
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JString echoString(JString aString) {
// if (dartApi != null) {
//   final String response = dartApi!.echoString(aString.toDartString(releaseOriginal: true));
//   return _PigeonJniCodec.writeValue<JString>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JByteArray echoUint8List(JByteArray list) {
// if (dartApi != null) {
//   final Uint8List response = dartApi!.echoUint8List((_PigeonJniCodec.readValue(list)! as Uint8List));
//   return _PigeonJniCodec.writeValue<JByteArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<JObject?> echoList(JList<JObject?> list) {
// if (dartApi != null) {
//   final List<Object?> response = dartApi!.echoList((_PigeonJniCodec.readValue(list)! as List<Object?>).cast<Object?>());
//   return _PigeonJniCodec.writeValue<JList<JObject?>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<jni_bridge.NIAnEnum?> echoEnumList(JList<jni_bridge.NIAnEnum?> enumList) {
// if (dartApi != null) {
//   final List<NIAnEnum?> response = dartApi!.echoEnumList((_PigeonJniCodec.readValue(enumList)! as List<Object?>).cast<NIAnEnum?>());
//   return _PigeonJniCodec.writeValue<JList<jni_bridge.NIAnEnum?>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<jni_bridge.NIAllNullableTypes?> echoClassList(JList<jni_bridge.NIAllNullableTypes?> classList) {
// if (dartApi != null) {
//   final List<NIAllNullableTypes?> response = dartApi!.echoClassList((_PigeonJniCodec.readValue(classList)! as List<Object?>).cast<NIAllNullableTypes?>());
//   return _PigeonJniCodec.writeValue<JList<jni_bridge.NIAllNullableTypes?>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<jni_bridge.NIAnEnum> echoNonNullEnumList(JList<jni_bridge.NIAnEnum> enumList) {
// if (dartApi != null) {
//   final List<NIAnEnum> response = dartApi!.echoNonNullEnumList((_PigeonJniCodec.readValue(enumList)! as List<Object?>).cast<NIAnEnum>());
//   return _PigeonJniCodec.writeValue<JList<jni_bridge.NIAnEnum>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<jni_bridge.NIAllNullableTypes> echoNonNullClassList(JList<jni_bridge.NIAllNullableTypes> classList) {
// if (dartApi != null) {
//   final List<NIAllNullableTypes> response = dartApi!.echoNonNullClassList((_PigeonJniCodec.readValue(classList)! as List<Object?>).cast<NIAllNullableTypes>());
//   return _PigeonJniCodec.writeValue<JList<jni_bridge.NIAllNullableTypes>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JObject?, JObject?> echoMap(JMap<JObject?, JObject?> map) {
// if (dartApi != null) {
//   final Map<Object?, Object?> response = dartApi!.echoMap((_PigeonJniCodec.readValue(map)! as Map<Object?, Object?>).cast<Object?, Object?>());
//   return _PigeonJniCodec.writeValue<JMap<JObject?, JObject?>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JString?, JString?> echoStringMap(JMap<JString?, JString?> stringMap) {
// if (dartApi != null) {
//   final Map<String?, String?> response = dartApi!.echoStringMap((_PigeonJniCodec.readValue(stringMap)! as Map<Object?, Object?>).cast<String?, String?>());
//   return _PigeonJniCodec.writeValue<JMap<JString?, JString?>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JLong?, JLong?> echoIntMap(JMap<JLong?, JLong?> intMap) {
// if (dartApi != null) {
//   final Map<int?, int?> response = dartApi!.echoIntMap((_PigeonJniCodec.readValue(intMap)! as Map<Object?, Object?>).cast<int?, int?>());
//   return _PigeonJniCodec.writeValue<JMap<JLong?, JLong?>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?> echoEnumMap(JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?> enumMap) {
// if (dartApi != null) {
//   final Map<NIAnEnum?, NIAnEnum?> response = dartApi!.echoEnumMap((_PigeonJniCodec.readValue(enumMap)! as Map<Object?, Object?>).cast<NIAnEnum?, NIAnEnum?>());
//   return _PigeonJniCodec.writeValue<JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JLong?, jni_bridge.NIAllNullableTypes?> echoClassMap(JMap<JLong?, jni_bridge.NIAllNullableTypes?> classMap) {
// if (dartApi != null) {
//   final Map<int?, NIAllNullableTypes?> response = dartApi!.echoClassMap((_PigeonJniCodec.readValue(classMap)! as Map<Object?, Object?>).cast<int?, NIAllNullableTypes?>());
//   return _PigeonJniCodec.writeValue<JMap<JLong?, jni_bridge.NIAllNullableTypes?>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JString, JString> echoNonNullStringMap(JMap<JString, JString> stringMap) {
// if (dartApi != null) {
//   final Map<String, String> response = dartApi!.echoNonNullStringMap((_PigeonJniCodec.readValue(stringMap)! as Map<Object?, Object?>).cast<String, String>());
//   return _PigeonJniCodec.writeValue<JMap<JString, JString>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JLong, JLong> echoNonNullIntMap(JMap<JLong, JLong> intMap) {
// if (dartApi != null) {
//   final Map<int, int> response = dartApi!.echoNonNullIntMap((_PigeonJniCodec.readValue(intMap)! as Map<Object?, Object?>).cast<int, int>());
//   return _PigeonJniCodec.writeValue<JMap<JLong, JLong>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum> echoNonNullEnumMap(JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum> enumMap) {
// if (dartApi != null) {
//   final Map<NIAnEnum, NIAnEnum> response = dartApi!.echoNonNullEnumMap((_PigeonJniCodec.readValue(enumMap)! as Map<Object?, Object?>).cast<NIAnEnum, NIAnEnum>());
//   return _PigeonJniCodec.writeValue<JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JLong, jni_bridge.NIAllNullableTypes> echoNonNullClassMap(JMap<JLong, jni_bridge.NIAllNullableTypes> classMap) {
// if (dartApi != null) {
//   final Map<int, NIAllNullableTypes> response = dartApi!.echoNonNullClassMap((_PigeonJniCodec.readValue(classMap)! as Map<Object?, Object?>).cast<int, NIAllNullableTypes>());
//   return _PigeonJniCodec.writeValue<JMap<JLong, jni_bridge.NIAllNullableTypes>>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// jni_bridge.NIAnEnum echoEnum(jni_bridge.NIAnEnum anEnum) {
// if (dartApi != null) {
//   final NIAnEnum response = dartApi!.echoEnum(NIAnEnum.fromJni(anEnum)!);
//   return response.toJni();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// jni_bridge.NIAnotherEnum echoNIAnotherEnum(jni_bridge.NIAnotherEnum anotherEnum) {
// if (dartApi != null) {
//   final NIAnotherEnum response = dartApi!.echoNIAnotherEnum(NIAnotherEnum.fromJni(anotherEnum)!);
//   return response.toJni();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JBoolean? echoNullableBool(JBoolean? aBool) {
// if (dartApi != null) {
//   final bool? response = dartApi!.echoNullableBool(aBool?.booleanValue(releaseOriginal: true));
//   return _PigeonJniCodec.writeValue<JBoolean?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JLong? echoNullableInt(JLong? anInt) {
// if (dartApi != null) {
//   final int? response = dartApi!.echoNullableInt(anInt?.longValue(releaseOriginal: true));
//   return _PigeonJniCodec.writeValue<JLong?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JDouble? echoNullableDouble(JDouble? aDouble) {
// if (dartApi != null) {
//   final double? response = dartApi!.echoNullableDouble(aDouble?.doubleValue(releaseOriginal: true));
//   return _PigeonJniCodec.writeValue<JDouble?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JString? echoNullableString(JString? aString) {
// if (dartApi != null) {
//   final String? response = dartApi!.echoNullableString(aString?.toDartString(releaseOriginal: true));
//   return _PigeonJniCodec.writeValue<JString?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JByteArray? echoNullableUint8List(JByteArray? list) {
// if (dartApi != null) {
//   final Uint8List? response = dartApi!.echoNullableUint8List((_PigeonJniCodec.readValue(list) as Uint8List?));
//   return _PigeonJniCodec.writeValue<JByteArray?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<JObject?>? echoNullableList(JList<JObject?>? list) {
// if (dartApi != null) {
//   final List<Object?>? response = dartApi!.echoNullableList((_PigeonJniCodec.readValue(list) as List<Object?>?)?.cast<Object?>());
//   return _PigeonJniCodec.writeValue<JList<JObject?>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<jni_bridge.NIAnEnum?>? echoNullableEnumList(JList<jni_bridge.NIAnEnum?>? enumList) {
// if (dartApi != null) {
//   final List<NIAnEnum?>? response = dartApi!.echoNullableEnumList((_PigeonJniCodec.readValue(enumList) as List<Object?>?)?.cast<NIAnEnum?>());
//   return _PigeonJniCodec.writeValue<JList<jni_bridge.NIAnEnum?>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<jni_bridge.NIAllNullableTypes?>? echoNullableClassList(JList<jni_bridge.NIAllNullableTypes?>? classList) {
// if (dartApi != null) {
//   final List<NIAllNullableTypes?>? response = dartApi!.echoNullableClassList((_PigeonJniCodec.readValue(classList) as List<Object?>?)?.cast<NIAllNullableTypes?>());
//   return _PigeonJniCodec.writeValue<JList<jni_bridge.NIAllNullableTypes?>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<jni_bridge.NIAnEnum>? echoNullableNonNullEnumList(JList<jni_bridge.NIAnEnum>? enumList) {
// if (dartApi != null) {
//   final List<NIAnEnum>? response = dartApi!.echoNullableNonNullEnumList((_PigeonJniCodec.readValue(enumList) as List<Object?>?)?.cast<NIAnEnum>());
//   return _PigeonJniCodec.writeValue<JList<jni_bridge.NIAnEnum>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JList<jni_bridge.NIAllNullableTypes>? echoNullableNonNullClassList(JList<jni_bridge.NIAllNullableTypes>? classList) {
// if (dartApi != null) {
//   final List<NIAllNullableTypes>? response = dartApi!.echoNullableNonNullClassList((_PigeonJniCodec.readValue(classList) as List<Object?>?)?.cast<NIAllNullableTypes>());
//   return _PigeonJniCodec.writeValue<JList<jni_bridge.NIAllNullableTypes>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JObject?, JObject?>? echoNullableMap(JMap<JObject?, JObject?>? map) {
// if (dartApi != null) {
//   final Map<Object?, Object?>? response = dartApi!.echoNullableMap((_PigeonJniCodec.readValue(map) as Map<Object?, Object?>?)?.cast<Object?, Object?>());
//   return _PigeonJniCodec.writeValue<JMap<JObject?, JObject?>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JString?, JString?>? echoNullableStringMap(JMap<JString?, JString?>? stringMap) {
// if (dartApi != null) {
//   final Map<String?, String?>? response = dartApi!.echoNullableStringMap((_PigeonJniCodec.readValue(stringMap) as Map<Object?, Object?>?)?.cast<String?, String?>());
//   return _PigeonJniCodec.writeValue<JMap<JString?, JString?>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JLong?, JLong?>? echoNullableIntMap(JMap<JLong?, JLong?>? intMap) {
// if (dartApi != null) {
//   final Map<int?, int?>? response = dartApi!.echoNullableIntMap((_PigeonJniCodec.readValue(intMap) as Map<Object?, Object?>?)?.cast<int?, int?>());
//   return _PigeonJniCodec.writeValue<JMap<JLong?, JLong?>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?>? echoNullableEnumMap(JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?>? enumMap) {
// if (dartApi != null) {
//   final Map<NIAnEnum?, NIAnEnum?>? response = dartApi!.echoNullableEnumMap((_PigeonJniCodec.readValue(enumMap) as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>());
//   return _PigeonJniCodec.writeValue<JMap<jni_bridge.NIAnEnum?, jni_bridge.NIAnEnum?>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JLong?, jni_bridge.NIAllNullableTypes?>? echoNullableClassMap(JMap<JLong?, jni_bridge.NIAllNullableTypes?>? classMap) {
// if (dartApi != null) {
//   final Map<int?, NIAllNullableTypes?>? response = dartApi!.echoNullableClassMap((_PigeonJniCodec.readValue(classMap) as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>());
//   return _PigeonJniCodec.writeValue<JMap<JLong?, jni_bridge.NIAllNullableTypes?>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JString, JString>? echoNullableNonNullStringMap(JMap<JString, JString>? stringMap) {
// if (dartApi != null) {
//   final Map<String, String>? response = dartApi!.echoNullableNonNullStringMap((_PigeonJniCodec.readValue(stringMap) as Map<Object?, Object?>?)?.cast<String, String>());
//   return _PigeonJniCodec.writeValue<JMap<JString, JString>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JLong, JLong>? echoNullableNonNullIntMap(JMap<JLong, JLong>? intMap) {
// if (dartApi != null) {
//   final Map<int, int>? response = dartApi!.echoNullableNonNullIntMap((_PigeonJniCodec.readValue(intMap) as Map<Object?, Object?>?)?.cast<int, int>());
//   return _PigeonJniCodec.writeValue<JMap<JLong, JLong>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum>? echoNullableNonNullEnumMap(JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum>? enumMap) {
// if (dartApi != null) {
//   final Map<NIAnEnum, NIAnEnum>? response = dartApi!.echoNullableNonNullEnumMap((_PigeonJniCodec.readValue(enumMap) as Map<Object?, Object?>?)?.cast<NIAnEnum, NIAnEnum>());
//   return _PigeonJniCodec.writeValue<JMap<jni_bridge.NIAnEnum, jni_bridge.NIAnEnum>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// JMap<JLong, jni_bridge.NIAllNullableTypes>? echoNullableNonNullClassMap(JMap<JLong, jni_bridge.NIAllNullableTypes>? classMap) {
// if (dartApi != null) {
//   final Map<int, NIAllNullableTypes>? response = dartApi!.echoNullableNonNullClassMap((_PigeonJniCodec.readValue(classMap) as Map<Object?, Object?>?)?.cast<int, NIAllNullableTypes>());
//   return _PigeonJniCodec.writeValue<JMap<JLong, jni_bridge.NIAllNullableTypes>?>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// jni_bridge.NIAnEnum? echoNullableEnum(jni_bridge.NIAnEnum? anEnum) {
// if (dartApi != null) {
//   final NIAnEnum? response = dartApi!.echoNullableEnum(NIAnEnum.fromJni(anEnum));
//   return response == null ? null : response.toJni();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// jni_bridge.NIAnotherEnum? echoAnotherNullableEnum(jni_bridge.NIAnotherEnum? anotherEnum) {
// if (dartApi != null) {
//   final NIAnotherEnum? response = dartApi!.echoAnotherNullableEnum(NIAnotherEnum.fromJni(anotherEnum));
//   return response == null ? null : response.toJni();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }
// }
// final class NIFlutterIntegrationCoreApiRegistrar with ffi_bridge.$NIFlutterIntegrationCoreApi {
// NIFlutterIntegrationCoreApi? dartApi;

// NIFlutterIntegrationCoreApi register(
// NIFlutterIntegrationCoreApi api, {
// String name = defaultInstanceName,
// }
// ) {
// dartApi = api;
// final ffi_bridge.NIFlutterIntegrationCoreApi impl =
//     ffi_bridge.NIFlutterIntegrationCoreApi.implement(this);
// ffi_bridge.NIFlutterIntegrationCoreApiRegistrar()
//     .registerInstance(impl, JString.fromString(name));
// return api;

// }

// @override
// NSVoid noop() {
// if (dartApi != null) {
//   return dartApi!.noop();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ObjCObjectBase? throwError() {
// if (dartApi != null) {
//   final Object? response = dartApi!.throwError();
//   return _PigeonFfiCodec.writeValue<ObjCObjectBase>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSVoid throwErrorFromVoid() {
// if (dartApi != null) {
//   return dartApi!.throwErrorFromVoid();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ffi_bridge.NIAllTypes echoNIAllTypes(ffi_bridge.NIAllTypes everything) {
// if (dartApi != null) {
//   final NIAllTypes response = dartApi!.echoNIAllTypes(NIAllTypes.fromFfi(everything)!);
//   return response.toFfi();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ffi_bridge.NIAllNullableTypes? echoNIAllNullableTypes(ffi_bridge.NIAllNullableTypes? everything) {
// if (dartApi != null) {
//   final NIAllNullableTypes? response = dartApi!.echoNIAllNullableTypes(NIAllNullableTypes.fromFfi(everything));
//   return response == null ? null : response.toFfi();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ffi_bridge.NIAllNullableTypes sendMultipleNullableTypes(NSNumber? aNullableBool,NSNumber? aNullableInt,NSString? aNullableString,) {
// if (dartApi != null) {
//   final NIAllNullableTypes response = dartApi!.sendMultipleNullableTypes(aNullableBool?.boolValue, aNullableInt?.longValue, aNullableString?.toDartString());
//   return response.toFfi();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ffi_bridge.NIAllNullableTypesWithoutRecursion? echoNIAllNullableTypesWithoutRecursion(ffi_bridge.NIAllNullableTypesWithoutRecursion? everything) {
// if (dartApi != null) {
//   final NIAllNullableTypesWithoutRecursion? response = dartApi!.echoNIAllNullableTypesWithoutRecursion(NIAllNullableTypesWithoutRecursion.fromFfi(everything));
//   return response == null ? null : response.toFfi();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ffi_bridge.NIAllNullableTypesWithoutRecursion sendMultipleNullableTypesWithoutRecursion(NSNumber? aNullableBool,NSNumber? aNullableInt,NSString? aNullableString,) {
// if (dartApi != null) {
//   final NIAllNullableTypesWithoutRecursion response = dartApi!.sendMultipleNullableTypesWithoutRecursion(aNullableBool?.boolValue, aNullableInt?.longValue, aNullableString?.toDartString());
//   return response.toFfi();
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSNumber echoBool(NSNumber aBool) {
// if (dartApi != null) {
//   final bool response = dartApi!.echoBool(aBool.boolValue);
//   return _PigeonFfiCodec.writeValue<NSNumber>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSNumber echoInt(NSNumber anInt) {
// if (dartApi != null) {
//   final int response = dartApi!.echoInt(anInt.longValue);
//   return _PigeonFfiCodec.writeValue<NSNumber>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSNumber echoDouble(NSNumber aDouble) {
// if (dartApi != null) {
//   final double response = dartApi!.echoDouble(aDouble.doubleValue);
//   return _PigeonFfiCodec.writeValue<NSNumber>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSString echoString(NSString aString) {
// if (dartApi != null) {
//   final String response = dartApi!.echoString(aString.toDartString());
//   return _PigeonFfiCodec.writeValue<NSString>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// There is something wrong, a type is not classified echoUint8List(There is something wrong, a type is not classified list) {
// if (dartApi != null) {
//   final Uint8List response = dartApi!.echoUint8List((_PigeonFfiCodec.readValue(list)! as Uint8List));
//   return _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoList(NSArray? list) {
// if (dartApi != null) {
//   final List<Object?> response = dartApi!.echoList((_PigeonFfiCodec.readValue(list)! as List<Object?>).cast<Object?>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoEnumList(NSArray? enumList) {
// if (dartApi != null) {
//   final List<NIAnEnum?> response = dartApi!.echoEnumList((_PigeonFfiCodec.readValue(enumList)! as List<Object?>).cast<NIAnEnum?>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoClassList(NSArray? classList) {
// if (dartApi != null) {
//   final List<NIAllNullableTypes?> response = dartApi!.echoClassList((_PigeonFfiCodec.readValue(classList)! as List<Object?>).cast<NIAllNullableTypes?>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoNonNullEnumList(NSArray? enumList) {
// if (dartApi != null) {
//   final List<NIAnEnum> response = dartApi!.echoNonNullEnumList((_PigeonFfiCodec.readValue(enumList)! as List<Object?>).cast<NIAnEnum>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoNonNullClassList(NSArray? classList) {
// if (dartApi != null) {
//   final List<NIAllNullableTypes> response = dartApi!.echoNonNullClassList((_PigeonFfiCodec.readValue(classList)! as List<Object?>).cast<NIAllNullableTypes>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary echoMap(NSDictionary map) {
// if (dartApi != null) {
//   final Map<Object?, Object?> response = dartApi!.echoMap((_PigeonFfiCodec.readValue(map)! as Map<Object?, Object?>).cast<Object?, Object?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary echoStringMap(NSDictionary stringMap) {
// if (dartApi != null) {
//   final Map<String?, String?> response = dartApi!.echoStringMap((_PigeonFfiCodec.readValue(stringMap)! as Map<Object?, Object?>).cast<String?, String?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary echoIntMap(NSDictionary intMap) {
// if (dartApi != null) {
//   final Map<int?, int?> response = dartApi!.echoIntMap((_PigeonFfiCodec.readValue(intMap)! as Map<Object?, Object?>).cast<int?, int?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary echoEnumMap(NSDictionary enumMap) {
// if (dartApi != null) {
//   final Map<NIAnEnum?, NIAnEnum?> response = dartApi!.echoEnumMap((_PigeonFfiCodec.readValue(enumMap)! as Map<Object?, Object?>).cast<NIAnEnum?, NIAnEnum?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary echoClassMap(NSDictionary classMap) {
// if (dartApi != null) {
//   final Map<int?, NIAllNullableTypes?> response = dartApi!.echoClassMap((_PigeonFfiCodec.readValue(classMap)! as Map<Object?, Object?>).cast<int?, NIAllNullableTypes?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary echoNonNullStringMap(NSDictionary stringMap) {
// if (dartApi != null) {
//   final Map<String, String> response = dartApi!.echoNonNullStringMap((_PigeonFfiCodec.readValue(stringMap)! as Map<Object?, Object?>).cast<String, String>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary echoNonNullIntMap(NSDictionary intMap) {
// if (dartApi != null) {
//   final Map<int, int> response = dartApi!.echoNonNullIntMap((_PigeonFfiCodec.readValue(intMap)! as Map<Object?, Object?>).cast<int, int>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary echoNonNullEnumMap(NSDictionary enumMap) {
// if (dartApi != null) {
//   final Map<NIAnEnum, NIAnEnum> response = dartApi!.echoNonNullEnumMap((_PigeonFfiCodec.readValue(enumMap)! as Map<Object?, Object?>).cast<NIAnEnum, NIAnEnum>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary echoNonNullClassMap(NSDictionary classMap) {
// if (dartApi != null) {
//   final Map<int, NIAllNullableTypes> response = dartApi!.echoNonNullClassMap((_PigeonFfiCodec.readValue(classMap)! as Map<Object?, Object?>).cast<int, NIAllNullableTypes>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ffi_bridge.NIAnEnum echoEnum(ffi_bridge.NIAnEnum anEnum) {
// if (dartApi != null) {
//   final NIAnEnum response = dartApi!.echoEnum((_PigeonFfiCodec.readValue(anEnum)! as NIAnEnum));
//   return ffi_bridge.NIAnEnum.values[response];
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ffi_bridge.NIAnotherEnum echoNIAnotherEnum(ffi_bridge.NIAnotherEnum anotherEnum) {
// if (dartApi != null) {
//   final NIAnotherEnum response = dartApi!.echoNIAnotherEnum((_PigeonFfiCodec.readValue(anotherEnum)! as NIAnotherEnum));
//   return ffi_bridge.NIAnotherEnum.values[response];
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSNumber? echoNullableBool(NSNumber? aBool) {
// if (dartApi != null) {
//   final bool? response = dartApi!.echoNullableBool(aBool?.boolValue);
//   return _PigeonFfiCodec.writeValue<NSNumber>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSNumber? echoNullableInt(NSNumber? anInt) {
// if (dartApi != null) {
//   final int? response = dartApi!.echoNullableInt(anInt?.longValue);
//   return _PigeonFfiCodec.writeValue<NSNumber>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSNumber? echoNullableDouble(NSNumber? aDouble) {
// if (dartApi != null) {
//   final double? response = dartApi!.echoNullableDouble(aDouble?.doubleValue);
//   return _PigeonFfiCodec.writeValue<NSNumber>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSString? echoNullableString(NSString? aString) {
// if (dartApi != null) {
//   final String? response = dartApi!.echoNullableString(aString?.toDartString());
//   return _PigeonFfiCodec.writeValue<NSString>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// There is something wrong, a type is not classified? echoNullableUint8List(There is something wrong, a type is not classified? list) {
// if (dartApi != null) {
//   final Uint8List? response = dartApi!.echoNullableUint8List((_PigeonFfiCodec.readValue(list) as Uint8List?));
//   return _PigeonFfiCodec.writeValue<There is something wrong, a type is not classified>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoNullableList(NSArray? list) {
// if (dartApi != null) {
//   final List<Object?>? response = dartApi!.echoNullableList((_PigeonFfiCodec.readValue(list) as List<Object?>?)?.cast<Object?>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoNullableEnumList(NSArray? enumList) {
// if (dartApi != null) {
//   final List<NIAnEnum?>? response = dartApi!.echoNullableEnumList((_PigeonFfiCodec.readValue(enumList) as List<Object?>?)?.cast<NIAnEnum?>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoNullableClassList(NSArray? classList) {
// if (dartApi != null) {
//   final List<NIAllNullableTypes?>? response = dartApi!.echoNullableClassList((_PigeonFfiCodec.readValue(classList) as List<Object?>?)?.cast<NIAllNullableTypes?>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoNullableNonNullEnumList(NSArray? enumList) {
// if (dartApi != null) {
//   final List<NIAnEnum>? response = dartApi!.echoNullableNonNullEnumList((_PigeonFfiCodec.readValue(enumList) as List<Object?>?)?.cast<NIAnEnum>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSArray? echoNullableNonNullClassList(NSArray? classList) {
// if (dartApi != null) {
//   final List<NIAllNullableTypes>? response = dartApi!.echoNullableNonNullClassList((_PigeonFfiCodec.readValue(classList) as List<Object?>?)?.cast<NIAllNullableTypes>());
//   return _PigeonFfiCodec.writeValue<NSMutableArray>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary? echoNullableMap(NSDictionary? map) {
// if (dartApi != null) {
//   final Map<Object?, Object?>? response = dartApi!.echoNullableMap((_PigeonFfiCodec.readValue(map) as Map<Object?, Object?>?)?.cast<Object?, Object?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary? echoNullableStringMap(NSDictionary? stringMap) {
// if (dartApi != null) {
//   final Map<String?, String?>? response = dartApi!.echoNullableStringMap((_PigeonFfiCodec.readValue(stringMap) as Map<Object?, Object?>?)?.cast<String?, String?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary? echoNullableIntMap(NSDictionary? intMap) {
// if (dartApi != null) {
//   final Map<int?, int?>? response = dartApi!.echoNullableIntMap((_PigeonFfiCodec.readValue(intMap) as Map<Object?, Object?>?)?.cast<int?, int?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary? echoNullableEnumMap(NSDictionary? enumMap) {
// if (dartApi != null) {
//   final Map<NIAnEnum?, NIAnEnum?>? response = dartApi!.echoNullableEnumMap((_PigeonFfiCodec.readValue(enumMap) as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary? echoNullableClassMap(NSDictionary? classMap) {
// if (dartApi != null) {
//   final Map<int?, NIAllNullableTypes?>? response = dartApi!.echoNullableClassMap((_PigeonFfiCodec.readValue(classMap) as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary? echoNullableNonNullStringMap(NSDictionary? stringMap) {
// if (dartApi != null) {
//   final Map<String, String>? response = dartApi!.echoNullableNonNullStringMap((_PigeonFfiCodec.readValue(stringMap) as Map<Object?, Object?>?)?.cast<String, String>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary? echoNullableNonNullIntMap(NSDictionary? intMap) {
// if (dartApi != null) {
//   final Map<int, int>? response = dartApi!.echoNullableNonNullIntMap((_PigeonFfiCodec.readValue(intMap) as Map<Object?, Object?>?)?.cast<int, int>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary? echoNullableNonNullEnumMap(NSDictionary? enumMap) {
// if (dartApi != null) {
//   final Map<NIAnEnum, NIAnEnum>? response = dartApi!.echoNullableNonNullEnumMap((_PigeonFfiCodec.readValue(enumMap) as Map<Object?, Object?>?)?.cast<NIAnEnum, NIAnEnum>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// NSDictionary? echoNullableNonNullClassMap(NSDictionary? classMap) {
// if (dartApi != null) {
//   final Map<int, NIAllNullableTypes>? response = dartApi!.echoNullableNonNullClassMap((_PigeonFfiCodec.readValue(classMap) as Map<Object?, Object?>?)?.cast<int, NIAllNullableTypes>());
//   return _PigeonFfiCodec.writeValue<NSDictionary>(response);
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ffi_bridge.NIAnEnum? echoNullableEnum(ffi_bridge.NIAnEnum? anEnum) {
// if (dartApi != null) {
//   final NIAnEnum? response = dartApi!.echoNullableEnum((_PigeonFfiCodec.readValue(anEnum) as NIAnEnum?));
//   return ffi_bridge.NIAnEnum.values[response];
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }

// @override
// ffi_bridge.NIAnotherEnum? echoAnotherNullableEnum(ffi_bridge.NIAnotherEnum? anotherEnum) {
// if (dartApi != null) {
//   final NIAnotherEnum? response = dartApi!.echoAnotherNullableEnum((_PigeonFfiCodec.readValue(anotherEnum) as NIAnotherEnum?));
//   return ffi_bridge.NIAnotherEnum.values[response];
// }
// else {
//   throw ArgumentError('NIFlutterIntegrationCoreApi was not registered.');
// }
// }
// }
// abstract class NIFlutterIntegrationCoreApi {
// static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

// /// A no-op function taking no arguments and returning no value, to sanity
// /// test basic calling.
// void noop();

// /// Responds with an error from an async function returning a value.
// Object? throwError();

// /// Responds with an error from an async void function.
// void throwErrorFromVoid();

// /// Returns the passed object, to test serialization and deserialization.
// NIAllTypes echoNIAllTypes(NIAllTypes everything);

// /// Returns the passed object, to test serialization and deserialization.
// NIAllNullableTypes? echoNIAllNullableTypes(NIAllNullableTypes? everything);

// /// Returns passed in arguments of multiple types.
// ///
// /// Tests multiple-arity FlutterApi handling.
// NIAllNullableTypes sendMultipleNullableTypes(bool? aNullableBool, int? aNullableInt, String? aNullableString);

// /// Returns the passed object, to test serialization and deserialization.
// NIAllNullableTypesWithoutRecursion? echoNIAllNullableTypesWithoutRecursion(NIAllNullableTypesWithoutRecursion? everything);

// /// Returns passed in arguments of multiple types.
// ///
// /// Tests multiple-arity FlutterApi handling.
// NIAllNullableTypesWithoutRecursion sendMultipleNullableTypesWithoutRecursion(bool? aNullableBool, int? aNullableInt, String? aNullableString);

// /// Returns the passed boolean, to test serialization and deserialization.
// bool echoBool(bool aBool);

// /// Returns the passed int, to test serialization and deserialization.
// int echoInt(int anInt);

// /// Returns the passed double, to test serialization and deserialization.
// double echoDouble(double aDouble);

// /// Returns the passed string, to test serialization and deserialization.
// String echoString(String aString);

// /// Returns the passed byte list, to test serialization and deserialization.
// Uint8List echoUint8List(Uint8List list);

// /// Returns the passed list, to test serialization and deserialization.
// List<Object?> echoList(List<Object?> list);

// /// Returns the passed list, to test serialization and deserialization.
// List<NIAnEnum?> echoEnumList(List<NIAnEnum?> enumList);

// /// Returns the passed list, to test serialization and deserialization.
// List<NIAllNullableTypes?> echoClassList(List<NIAllNullableTypes?> classList);

// /// Returns the passed list, to test serialization and deserialization.
// List<NIAnEnum> echoNonNullEnumList(List<NIAnEnum> enumList);

// /// Returns the passed list, to test serialization and deserialization.
// List<NIAllNullableTypes> echoNonNullClassList(List<NIAllNullableTypes> classList);

// /// Returns the passed map, to test serialization and deserialization.
// Map<Object?, Object?> echoMap(Map<Object?, Object?> map);

// /// Returns the passed map, to test serialization and deserialization.
// Map<String?, String?> echoStringMap(Map<String?, String?> stringMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<int?, int?> echoIntMap(Map<int?, int?> intMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<NIAnEnum?, NIAnEnum?> echoEnumMap(Map<NIAnEnum?, NIAnEnum?> enumMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<int?, NIAllNullableTypes?> echoClassMap(Map<int?, NIAllNullableTypes?> classMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<String, String> echoNonNullStringMap(Map<String, String> stringMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<int, int> echoNonNullIntMap(Map<int, int> intMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<NIAnEnum, NIAnEnum> echoNonNullEnumMap(Map<NIAnEnum, NIAnEnum> enumMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<int, NIAllNullableTypes> echoNonNullClassMap(Map<int, NIAllNullableTypes> classMap);

// /// Returns the passed enum to test serialization and deserialization.
// NIAnEnum echoEnum(NIAnEnum anEnum);

// /// Returns the passed enum to test serialization and deserialization.
// NIAnotherEnum echoNIAnotherEnum(NIAnotherEnum anotherEnum);

// /// Returns the passed boolean, to test serialization and deserialization.
// bool? echoNullableBool(bool? aBool);

// /// Returns the passed int, to test serialization and deserialization.
// int? echoNullableInt(int? anInt);

// /// Returns the passed double, to test serialization and deserialization.
// double? echoNullableDouble(double? aDouble);

// /// Returns the passed string, to test serialization and deserialization.
// String? echoNullableString(String? aString);

// /// Returns the passed byte list, to test serialization and deserialization.
// Uint8List? echoNullableUint8List(Uint8List? list);

// /// Returns the passed list, to test serialization and deserialization.
// List<Object?>? echoNullableList(List<Object?>? list);

// /// Returns the passed list, to test serialization and deserialization.
// List<NIAnEnum?>? echoNullableEnumList(List<NIAnEnum?>? enumList);

// /// Returns the passed list, to test serialization and deserialization.
// List<NIAllNullableTypes?>? echoNullableClassList(List<NIAllNullableTypes?>? classList);

// /// Returns the passed list, to test serialization and deserialization.
// List<NIAnEnum>? echoNullableNonNullEnumList(List<NIAnEnum>? enumList);

// /// Returns the passed list, to test serialization and deserialization.
// List<NIAllNullableTypes>? echoNullableNonNullClassList(List<NIAllNullableTypes>? classList);

// /// Returns the passed map, to test serialization and deserialization.
// Map<Object?, Object?>? echoNullableMap(Map<Object?, Object?>? map);

// /// Returns the passed map, to test serialization and deserialization.
// Map<String?, String?>? echoNullableStringMap(Map<String?, String?>? stringMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<int?, int?>? echoNullableIntMap(Map<int?, int?>? intMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<NIAnEnum?, NIAnEnum?>? echoNullableEnumMap(Map<NIAnEnum?, NIAnEnum?>? enumMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<int?, NIAllNullableTypes?>? echoNullableClassMap(Map<int?, NIAllNullableTypes?>? classMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<String, String>? echoNullableNonNullStringMap(Map<String, String>? stringMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<int, int>? echoNullableNonNullIntMap(Map<int, int>? intMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<NIAnEnum, NIAnEnum>? echoNullableNonNullEnumMap(Map<NIAnEnum, NIAnEnum>? enumMap);

// /// Returns the passed map, to test serialization and deserialization.
// Map<int, NIAllNullableTypes>? echoNullableNonNullClassMap(Map<int, NIAllNullableTypes>? classMap);

// /// Returns the passed enum to test serialization and deserialization.
// NIAnEnum? echoNullableEnum(NIAnEnum? anEnum);

// /// Returns the passed enum to test serialization and deserialization.
// NIAnotherEnum? echoAnotherNullableEnum(NIAnotherEnum? anotherEnum);

// static void setUp(NIFlutterIntegrationCoreApi? api, {
//   BinaryMessenger? binaryMessenger,
//   String messageChannelSuffix = '',
// })
// {
// if (Platform.isAndroid && api != null) {
//   NIFlutterIntegrationCoreApiRegistrar().register(api, name: messageChannelSuffix.isEmpty
//       ? defaultInstanceName
//       : messageChannelSuffix);
// }

// if ((Platform.isIos || Platform.isMacOS) && api != null) {
//   NIFlutterIntegrationCoreApiRegistrar().register(api, name: messageChannelSuffix.isEmpty
//       ? defaultInstanceName
//       : messageChannelSuffix);
// }

// messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.noop$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       try {
//         api.noop();
//         return wrapResponse(empty: true);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.throwError$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       try {
//         final Object? output = api.throwError();
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.throwErrorFromVoid$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       try {
//         api.throwErrorFromVoid();
//         return wrapResponse(empty: true);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAllTypes$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAllTypes was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final NIAllTypes? arg_everything = (args[0] as NIAllTypes?);
//       assert(arg_everything != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAllTypes was null, expected non-null NIAllTypes.');
//       try {
//         final NIAllTypes output = api.echoNIAllTypes(arg_everything!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAllNullableTypes$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAllNullableTypes was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final NIAllNullableTypes? arg_everything = (args[0] as NIAllNullableTypes?);
//       try {
//         final NIAllNullableTypes? output = api.echoNIAllNullableTypes(arg_everything);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.sendMultipleNullableTypes$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.sendMultipleNullableTypes was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final bool? arg_aNullableBool = (args[0] as bool?);
//       final int? arg_aNullableInt = (args[1] as int?);
//       final String? arg_aNullableString = (args[2] as String?);
//       try {
//         final NIAllNullableTypes output = api.sendMultipleNullableTypes(arg_aNullableBool, arg_aNullableInt, arg_aNullableString);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAllNullableTypesWithoutRecursion$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAllNullableTypesWithoutRecursion was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final NIAllNullableTypesWithoutRecursion? arg_everything = (args[0] as NIAllNullableTypesWithoutRecursion?);
//       try {
//         final NIAllNullableTypesWithoutRecursion? output = api.echoNIAllNullableTypesWithoutRecursion(arg_everything);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.sendMultipleNullableTypesWithoutRecursion$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.sendMultipleNullableTypesWithoutRecursion was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final bool? arg_aNullableBool = (args[0] as bool?);
//       final int? arg_aNullableInt = (args[1] as int?);
//       final String? arg_aNullableString = (args[2] as String?);
//       try {
//         final NIAllNullableTypesWithoutRecursion output = api.sendMultipleNullableTypesWithoutRecursion(arg_aNullableBool, arg_aNullableInt, arg_aNullableString);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoBool$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoBool was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final bool? arg_aBool = (args[0] as bool?);
//       assert(arg_aBool != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoBool was null, expected non-null bool.');
//       try {
//         final bool output = api.echoBool(arg_aBool!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoInt$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoInt was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final int? arg_anInt = (args[0] as int?);
//       assert(arg_anInt != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoInt was null, expected non-null int.');
//       try {
//         final int output = api.echoInt(arg_anInt!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoDouble$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoDouble was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final double? arg_aDouble = (args[0] as double?);
//       assert(arg_aDouble != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoDouble was null, expected non-null double.');
//       try {
//         final double output = api.echoDouble(arg_aDouble!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoString$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoString was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final String? arg_aString = (args[0] as String?);
//       assert(arg_aString != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoString was null, expected non-null String.');
//       try {
//         final String output = api.echoString(arg_aString!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoUint8List$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoUint8List was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Uint8List? arg_list = (args[0] as Uint8List?);
//       assert(arg_list != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoUint8List was null, expected non-null Uint8List.');
//       try {
//         final Uint8List output = api.echoUint8List(arg_list!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<Object?>? arg_list = (args[0] as List<Object?>?)?.cast<Object?>();
//       assert(arg_list != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoList was null, expected non-null List<Object?>.');
//       try {
//         final List<Object?> output = api.echoList(arg_list!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoEnumList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoEnumList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<NIAnEnum?>? arg_enumList = (args[0] as List<Object?>?)?.cast<NIAnEnum?>();
//       assert(arg_enumList != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoEnumList was null, expected non-null List<NIAnEnum?>.');
//       try {
//         final List<NIAnEnum?> output = api.echoEnumList(arg_enumList!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoClassList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoClassList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<NIAllNullableTypes?>? arg_classList = (args[0] as List<Object?>?)?.cast<NIAllNullableTypes?>();
//       assert(arg_classList != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoClassList was null, expected non-null List<NIAllNullableTypes?>.');
//       try {
//         final List<NIAllNullableTypes?> output = api.echoClassList(arg_classList!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullEnumList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullEnumList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<NIAnEnum>? arg_enumList = (args[0] as List<Object?>?)?.cast<NIAnEnum>();
//       assert(arg_enumList != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullEnumList was null, expected non-null List<NIAnEnum>.');
//       try {
//         final List<NIAnEnum> output = api.echoNonNullEnumList(arg_enumList!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullClassList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullClassList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<NIAllNullableTypes>? arg_classList = (args[0] as List<Object?>?)?.cast<NIAllNullableTypes>();
//       assert(arg_classList != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullClassList was null, expected non-null List<NIAllNullableTypes>.');
//       try {
//         final List<NIAllNullableTypes> output = api.echoNonNullClassList(arg_classList!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<Object?, Object?>? arg_map = (args[0] as Map<Object?, Object?>?)?.cast<Object?, Object?>();
//       assert(arg_map != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoMap was null, expected non-null Map<Object?, Object?>.');
//       try {
//         final Map<Object?, Object?> output = api.echoMap(arg_map!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoStringMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoStringMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<String?, String?>? arg_stringMap = (args[0] as Map<Object?, Object?>?)?.cast<String?, String?>();
//       assert(arg_stringMap != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoStringMap was null, expected non-null Map<String?, String?>.');
//       try {
//         final Map<String?, String?> output = api.echoStringMap(arg_stringMap!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoIntMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoIntMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<int?, int?>? arg_intMap = (args[0] as Map<Object?, Object?>?)?.cast<int?, int?>();
//       assert(arg_intMap != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoIntMap was null, expected non-null Map<int?, int?>.');
//       try {
//         final Map<int?, int?> output = api.echoIntMap(arg_intMap!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoEnumMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoEnumMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<NIAnEnum?, NIAnEnum?>? arg_enumMap = (args[0] as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>();
//       assert(arg_enumMap != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoEnumMap was null, expected non-null Map<NIAnEnum?, NIAnEnum?>.');
//       try {
//         final Map<NIAnEnum?, NIAnEnum?> output = api.echoEnumMap(arg_enumMap!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoClassMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoClassMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<int?, NIAllNullableTypes?>? arg_classMap = (args[0] as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>();
//       assert(arg_classMap != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoClassMap was null, expected non-null Map<int?, NIAllNullableTypes?>.');
//       try {
//         final Map<int?, NIAllNullableTypes?> output = api.echoClassMap(arg_classMap!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullStringMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullStringMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<String, String>? arg_stringMap = (args[0] as Map<Object?, Object?>?)?.cast<String, String>();
//       assert(arg_stringMap != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullStringMap was null, expected non-null Map<String, String>.');
//       try {
//         final Map<String, String> output = api.echoNonNullStringMap(arg_stringMap!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullIntMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullIntMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<int, int>? arg_intMap = (args[0] as Map<Object?, Object?>?)?.cast<int, int>();
//       assert(arg_intMap != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullIntMap was null, expected non-null Map<int, int>.');
//       try {
//         final Map<int, int> output = api.echoNonNullIntMap(arg_intMap!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullEnumMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullEnumMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<NIAnEnum, NIAnEnum>? arg_enumMap = (args[0] as Map<Object?, Object?>?)?.cast<NIAnEnum, NIAnEnum>();
//       assert(arg_enumMap != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullEnumMap was null, expected non-null Map<NIAnEnum, NIAnEnum>.');
//       try {
//         final Map<NIAnEnum, NIAnEnum> output = api.echoNonNullEnumMap(arg_enumMap!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullClassMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullClassMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<int, NIAllNullableTypes>? arg_classMap = (args[0] as Map<Object?, Object?>?)?.cast<int, NIAllNullableTypes>();
//       assert(arg_classMap != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNonNullClassMap was null, expected non-null Map<int, NIAllNullableTypes>.');
//       try {
//         final Map<int, NIAllNullableTypes> output = api.echoNonNullClassMap(arg_classMap!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoEnum$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoEnum was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final NIAnEnum? arg_anEnum = (args[0] as NIAnEnum?);
//       assert(arg_anEnum != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoEnum was null, expected non-null NIAnEnum.');
//       try {
//         final NIAnEnum output = api.echoEnum(arg_anEnum!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAnotherEnum$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAnotherEnum was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final NIAnotherEnum? arg_anotherEnum = (args[0] as NIAnotherEnum?);
//       assert(arg_anotherEnum != null,
//           'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNIAnotherEnum was null, expected non-null NIAnotherEnum.');
//       try {
//         final NIAnotherEnum output = api.echoNIAnotherEnum(arg_anotherEnum!);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableBool$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableBool was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final bool? arg_aBool = (args[0] as bool?);
//       try {
//         final bool? output = api.echoNullableBool(arg_aBool);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableInt$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableInt was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final int? arg_anInt = (args[0] as int?);
//       try {
//         final int? output = api.echoNullableInt(arg_anInt);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableDouble$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableDouble was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final double? arg_aDouble = (args[0] as double?);
//       try {
//         final double? output = api.echoNullableDouble(arg_aDouble);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableString$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableString was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final String? arg_aString = (args[0] as String?);
//       try {
//         final String? output = api.echoNullableString(arg_aString);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableUint8List$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableUint8List was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Uint8List? arg_list = (args[0] as Uint8List?);
//       try {
//         final Uint8List? output = api.echoNullableUint8List(arg_list);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<Object?>? arg_list = (args[0] as List<Object?>?)?.cast<Object?>();
//       try {
//         final List<Object?>? output = api.echoNullableList(arg_list);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableEnumList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableEnumList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<NIAnEnum?>? arg_enumList = (args[0] as List<Object?>?)?.cast<NIAnEnum?>();
//       try {
//         final List<NIAnEnum?>? output = api.echoNullableEnumList(arg_enumList);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableClassList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableClassList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<NIAllNullableTypes?>? arg_classList = (args[0] as List<Object?>?)?.cast<NIAllNullableTypes?>();
//       try {
//         final List<NIAllNullableTypes?>? output = api.echoNullableClassList(arg_classList);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullEnumList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullEnumList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<NIAnEnum>? arg_enumList = (args[0] as List<Object?>?)?.cast<NIAnEnum>();
//       try {
//         final List<NIAnEnum>? output = api.echoNullableNonNullEnumList(arg_enumList);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullClassList$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullClassList was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final List<NIAllNullableTypes>? arg_classList = (args[0] as List<Object?>?)?.cast<NIAllNullableTypes>();
//       try {
//         final List<NIAllNullableTypes>? output = api.echoNullableNonNullClassList(arg_classList);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<Object?, Object?>? arg_map = (args[0] as Map<Object?, Object?>?)?.cast<Object?, Object?>();
//       try {
//         final Map<Object?, Object?>? output = api.echoNullableMap(arg_map);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableStringMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableStringMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<String?, String?>? arg_stringMap = (args[0] as Map<Object?, Object?>?)?.cast<String?, String?>();
//       try {
//         final Map<String?, String?>? output = api.echoNullableStringMap(arg_stringMap);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableIntMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableIntMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<int?, int?>? arg_intMap = (args[0] as Map<Object?, Object?>?)?.cast<int?, int?>();
//       try {
//         final Map<int?, int?>? output = api.echoNullableIntMap(arg_intMap);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableEnumMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableEnumMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<NIAnEnum?, NIAnEnum?>? arg_enumMap = (args[0] as Map<Object?, Object?>?)?.cast<NIAnEnum?, NIAnEnum?>();
//       try {
//         final Map<NIAnEnum?, NIAnEnum?>? output = api.echoNullableEnumMap(arg_enumMap);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableClassMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableClassMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<int?, NIAllNullableTypes?>? arg_classMap = (args[0] as Map<Object?, Object?>?)?.cast<int?, NIAllNullableTypes?>();
//       try {
//         final Map<int?, NIAllNullableTypes?>? output = api.echoNullableClassMap(arg_classMap);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullStringMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullStringMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<String, String>? arg_stringMap = (args[0] as Map<Object?, Object?>?)?.cast<String, String>();
//       try {
//         final Map<String, String>? output = api.echoNullableNonNullStringMap(arg_stringMap);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullIntMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullIntMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<int, int>? arg_intMap = (args[0] as Map<Object?, Object?>?)?.cast<int, int>();
//       try {
//         final Map<int, int>? output = api.echoNullableNonNullIntMap(arg_intMap);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullEnumMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullEnumMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<NIAnEnum, NIAnEnum>? arg_enumMap = (args[0] as Map<Object?, Object?>?)?.cast<NIAnEnum, NIAnEnum>();
//       try {
//         final Map<NIAnEnum, NIAnEnum>? output = api.echoNullableNonNullEnumMap(arg_enumMap);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullClassMap$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableNonNullClassMap was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final Map<int, NIAllNullableTypes>? arg_classMap = (args[0] as Map<Object?, Object?>?)?.cast<int, NIAllNullableTypes>();
//       try {
//         final Map<int, NIAllNullableTypes>? output = api.echoNullableNonNullClassMap(arg_classMap);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableEnum$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoNullableEnum was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final NIAnEnum? arg_anEnum = (args[0] as NIAnEnum?);
//       try {
//         final NIAnEnum? output = api.echoNullableEnum(arg_anEnum);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// {
//   final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
//       'dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoAnotherNullableEnum$messageChannelSuffix', pigeonChannelCodec,
//       binaryMessenger: binaryMessenger);
//   if (api == null) {
//     pigeonVar_channel.setMessageHandler(null);
//   } else {
//     pigeonVar_channel.setMessageHandler((Object? message) async {
//       assert(message != null,
//       'Argument for dev.flutter.pigeon.pigeon_integration_tests.NIFlutterIntegrationCoreApi.echoAnotherNullableEnum was null.');
//       final List<Object?> args = (message as List<Object?>?)!;
//       final NIAnotherEnum? arg_anotherEnum = (args[0] as NIAnotherEnum?);
//       try {
//         final NIAnotherEnum? output = api.echoAnotherNullableEnum(arg_anotherEnum);
//         return wrapResponse(result: output);
//       } on PlatformException catch (e) {
//         return wrapResponse(error: e);
//       }      catch (e) {
//         return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
//       }
//     });
//   }
// }
// }
// }
