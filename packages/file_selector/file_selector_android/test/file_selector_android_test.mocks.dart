// Mocks generated by Mockito 5.4.4 from annotations
// in file_selector_android/test/file_selector_android_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:file_selector_android/src/file_selector_api.g.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FileSelectorApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSelectorApi extends _i1.Mock implements _i2.FileSelectorApi {
  MockFileSelectorApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get pigeonVar_messageChannelSuffix => (super.noSuchMethod(
        Invocation.getter(#pigeonVar_messageChannelSuffix),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.getter(#pigeonVar_messageChannelSuffix),
        ),
      ) as String);

  @override
  _i4.Future<_i2.FileResponse?> openFile(
    String? initialDirectory,
    _i2.FileTypes? allowedTypes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #openFile,
          [
            initialDirectory,
            allowedTypes,
          ],
        ),
        returnValue: _i4.Future<_i2.FileResponse?>.value(),
      ) as _i4.Future<_i2.FileResponse?>);

  @override
  _i4.Future<List<_i2.FileResponse>> openFiles(
    String? initialDirectory,
    _i2.FileTypes? allowedTypes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #openFiles,
          [
            initialDirectory,
            allowedTypes,
          ],
        ),
        returnValue:
            _i4.Future<List<_i2.FileResponse>>.value(<_i2.FileResponse>[]),
      ) as _i4.Future<List<_i2.FileResponse>>);

  @override
  _i4.Future<String?> getDirectoryPath(String? initialDirectory) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDirectoryPath,
          [initialDirectory],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);
}
