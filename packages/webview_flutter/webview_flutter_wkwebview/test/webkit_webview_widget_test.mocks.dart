// Mocks generated by Mockito 5.4.5 from annotations
// in webview_flutter_wkwebview/test/webkit_webview_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:webview_flutter_wkwebview/src/common/web_kit.g.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePigeonInstanceManager_0 extends _i1.SmartFake
    implements _i2.PigeonInstanceManager {
  _FakePigeonInstanceManager_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWKUIDelegate_1 extends _i1.SmartFake implements _i2.WKUIDelegate {
  _FakeWKUIDelegate_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWKUserContentController_2 extends _i1.SmartFake
    implements _i2.WKUserContentController {
  _FakeWKUserContentController_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWKWebsiteDataStore_3 extends _i1.SmartFake
    implements _i2.WKWebsiteDataStore {
  _FakeWKWebsiteDataStore_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWKPreferences_4 extends _i1.SmartFake implements _i2.WKPreferences {
  _FakeWKPreferences_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWKWebpagePreferences_5 extends _i1.SmartFake
    implements _i2.WKWebpagePreferences {
  _FakeWKWebpagePreferences_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWKWebViewConfiguration_6 extends _i1.SmartFake
    implements _i2.WKWebViewConfiguration {
  _FakeWKWebViewConfiguration_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeUIScrollViewDelegate_7 extends _i1.SmartFake
    implements _i2.UIScrollViewDelegate {
  _FakeUIScrollViewDelegate_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [WKUIDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKUIDelegate extends _i1.Mock implements _i2.WKUIDelegate {
  MockWKUIDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.PermissionDecision> Function(
    _i2.WKUIDelegate,
    _i2.WKWebView,
    _i2.WKSecurityOrigin,
    _i2.WKFrameInfo,
    _i2.MediaCaptureType,
  ) get requestMediaCapturePermission => (super.noSuchMethod(
        Invocation.getter(#requestMediaCapturePermission),
        returnValue: (
          _i2.WKUIDelegate pigeon_instance,
          _i2.WKWebView webView,
          _i2.WKSecurityOrigin origin,
          _i2.WKFrameInfo frame,
          _i2.MediaCaptureType type,
        ) =>
            _i3.Future<_i2.PermissionDecision>.value(
          _i2.PermissionDecision.deny,
        ),
      ) as _i3.Future<_i2.PermissionDecision> Function(
        _i2.WKUIDelegate,
        _i2.WKWebView,
        _i2.WKSecurityOrigin,
        _i2.WKFrameInfo,
        _i2.MediaCaptureType,
      ));

  @override
  _i3.Future<bool> Function(
    _i2.WKUIDelegate,
    _i2.WKWebView,
    String,
    _i2.WKFrameInfo,
  ) get runJavaScriptConfirmPanel => (super.noSuchMethod(
        Invocation.getter(#runJavaScriptConfirmPanel),
        returnValue: (
          _i2.WKUIDelegate pigeon_instance,
          _i2.WKWebView webView,
          String message,
          _i2.WKFrameInfo frame,
        ) =>
            _i3.Future<bool>.value(false),
      ) as _i3.Future<bool> Function(
        _i2.WKUIDelegate,
        _i2.WKWebView,
        String,
        _i2.WKFrameInfo,
      ));

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.WKUIDelegate pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeWKUIDelegate_1(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.WKUIDelegate);

  @override
  _i3.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#addObserver, [observer, keyPath, options]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeObserver(_i2.NSObject? observer, String? keyPath) =>
      (super.noSuchMethod(
        Invocation.method(#removeObserver, [observer, keyPath]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [WKWebViewConfiguration].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKWebViewConfiguration extends _i1.Mock
    implements _i2.WKWebViewConfiguration {
  MockWKWebViewConfiguration() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i3.Future<void> setUserContentController(
    _i2.WKUserContentController? controller,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#setUserContentController, [controller]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.WKUserContentController> getUserContentController() =>
      (super.noSuchMethod(
        Invocation.method(#getUserContentController, []),
        returnValue: _i3.Future<_i2.WKUserContentController>.value(
          _FakeWKUserContentController_2(
            this,
            Invocation.method(#getUserContentController, []),
          ),
        ),
      ) as _i3.Future<_i2.WKUserContentController>);

  @override
  _i3.Future<void> setWebsiteDataStore(_i2.WKWebsiteDataStore? dataStore) =>
      (super.noSuchMethod(
        Invocation.method(#setWebsiteDataStore, [dataStore]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.WKWebsiteDataStore> getWebsiteDataStore() =>
      (super.noSuchMethod(
        Invocation.method(#getWebsiteDataStore, []),
        returnValue: _i3.Future<_i2.WKWebsiteDataStore>.value(
          _FakeWKWebsiteDataStore_3(
            this,
            Invocation.method(#getWebsiteDataStore, []),
          ),
        ),
      ) as _i3.Future<_i2.WKWebsiteDataStore>);

  @override
  _i3.Future<void> setPreferences(_i2.WKPreferences? preferences) =>
      (super.noSuchMethod(
        Invocation.method(#setPreferences, [preferences]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.WKPreferences> getPreferences() => (super.noSuchMethod(
        Invocation.method(#getPreferences, []),
        returnValue: _i3.Future<_i2.WKPreferences>.value(
          _FakeWKPreferences_4(
            this,
            Invocation.method(#getPreferences, []),
          ),
        ),
      ) as _i3.Future<_i2.WKPreferences>);

  @override
  _i3.Future<void> setAllowsInlineMediaPlayback(bool? allow) =>
      (super.noSuchMethod(
        Invocation.method(#setAllowsInlineMediaPlayback, [allow]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setLimitsNavigationsToAppBoundDomains(bool? limit) =>
      (super.noSuchMethod(
        Invocation.method(#setLimitsNavigationsToAppBoundDomains, [limit]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setMediaTypesRequiringUserActionForPlayback(
    _i2.AudiovisualMediaType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#setMediaTypesRequiringUserActionForPlayback, [
          type,
        ]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i2.WKWebpagePreferences> getDefaultWebpagePreferences() =>
      (super.noSuchMethod(
        Invocation.method(#getDefaultWebpagePreferences, []),
        returnValue: _i3.Future<_i2.WKWebpagePreferences>.value(
          _FakeWKWebpagePreferences_5(
            this,
            Invocation.method(#getDefaultWebpagePreferences, []),
          ),
        ),
      ) as _i3.Future<_i2.WKWebpagePreferences>);

  @override
  _i2.WKWebViewConfiguration pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeWKWebViewConfiguration_6(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.WKWebViewConfiguration);

  @override
  _i3.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#addObserver, [observer, keyPath, options]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeObserver(_i2.NSObject? observer, String? keyPath) =>
      (super.noSuchMethod(
        Invocation.method(#removeObserver, [observer, keyPath]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [UIScrollViewDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockUIScrollViewDelegate extends _i1.Mock
    implements _i2.UIScrollViewDelegate {
  MockUIScrollViewDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.UIScrollViewDelegate pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeUIScrollViewDelegate_7(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.UIScrollViewDelegate);

  @override
  _i3.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#addObserver, [observer, keyPath, options]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removeObserver(_i2.NSObject? observer, String? keyPath) =>
      (super.noSuchMethod(
        Invocation.method(#removeObserver, [observer, keyPath]),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
