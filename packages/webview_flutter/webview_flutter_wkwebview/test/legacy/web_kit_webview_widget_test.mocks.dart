// Mocks generated by Mockito 5.4.4 from annotations
// in webview_flutter_wkwebview/test/legacy/web_kit_webview_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:typed_data' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:webview_flutter_platform_interface/src/legacy/types/javascript_channel.dart'
    as _i7;
import 'package:webview_flutter_platform_interface/src/legacy/types/types.dart'
    as _i8;
import 'package:webview_flutter_platform_interface/src/webview_flutter_platform_interface_legacy.dart'
    as _i6;
import 'package:webview_flutter_wkwebview/src/common/platform_webview.dart'
    as _i3;
import 'package:webview_flutter_wkwebview/src/common/web_kit.g.dart' as _i2;
import 'package:webview_flutter_wkwebview/src/legacy/web_kit_webview_widget.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePigeonInstanceManager_0 extends _i1.SmartFake
    implements _i2.PigeonInstanceManager {
  _FakePigeonInstanceManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUIScrollView_1 extends _i1.SmartFake implements _i2.UIScrollView {
  _FakeUIScrollView_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeURLRequest_2 extends _i1.SmartFake implements _i2.URLRequest {
  _FakeURLRequest_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWKNavigationDelegate_3 extends _i1.SmartFake
    implements _i2.WKNavigationDelegate {
  _FakeWKNavigationDelegate_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWKPreferences_4 extends _i1.SmartFake implements _i2.WKPreferences {
  _FakeWKPreferences_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWKScriptMessageHandler_5 extends _i1.SmartFake
    implements _i2.WKScriptMessageHandler {
  _FakeWKScriptMessageHandler_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWKWebView_6 extends _i1.SmartFake implements _i2.WKWebView {
  _FakeWKWebView_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWKWebViewConfiguration_7 extends _i1.SmartFake
    implements _i2.WKWebViewConfiguration {
  _FakeWKWebViewConfiguration_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUIViewWKWebView_8 extends _i1.SmartFake
    implements _i2.UIViewWKWebView {
  _FakeUIViewWKWebView_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWKUserContentController_9 extends _i1.SmartFake
    implements _i2.WKUserContentController {
  _FakeWKUserContentController_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWKWebsiteDataStore_10 extends _i1.SmartFake
    implements _i2.WKWebsiteDataStore {
  _FakeWKWebsiteDataStore_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWKHTTPCookieStore_11 extends _i1.SmartFake
    implements _i2.WKHTTPCookieStore {
  _FakeWKHTTPCookieStore_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWKUIDelegate_12 extends _i1.SmartFake implements _i2.WKUIDelegate {
  _FakeWKUIDelegate_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlatformWebView_13 extends _i1.SmartFake
    implements _i3.PlatformWebView {
  _FakePlatformWebView_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UIScrollView].
///
/// See the documentation for Mockito's code generation for more information.
class MockUIScrollView extends _i1.Mock implements _i2.UIScrollView {
  MockUIScrollView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i4.Future<List<double>> getContentOffset() => (super.noSuchMethod(
        Invocation.method(
          #getContentOffset,
          [],
        ),
        returnValue: _i4.Future<List<double>>.value(<double>[]),
      ) as _i4.Future<List<double>>);

  @override
  _i4.Future<void> scrollBy(
    double? x,
    double? y,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #scrollBy,
          [
            x,
            y,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setContentOffset(
    double? x,
    double? y,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setContentOffset,
          [
            x,
            y,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setDelegate(_i2.UIScrollViewDelegate? delegate) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDelegate,
          [delegate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i2.UIScrollView pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeUIScrollView_1(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.UIScrollView);

  @override
  _i4.Future<void> setBackgroundColor(int? value) => (super.noSuchMethod(
        Invocation.method(
          #setBackgroundColor,
          [value],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setOpaque(bool? opaque) => (super.noSuchMethod(
        Invocation.method(
          #setOpaque,
          [opaque],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [URLRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockURLRequest extends _i1.Mock implements _i2.URLRequest {
  MockURLRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i4.Future<String?> getUrl() => (super.noSuchMethod(
        Invocation.method(
          #getUrl,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> setHttpMethod(String? method) => (super.noSuchMethod(
        Invocation.method(
          #setHttpMethod,
          [method],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getHttpMethod() => (super.noSuchMethod(
        Invocation.method(
          #getHttpMethod,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> setHttpBody(_i5.Uint8List? body) => (super.noSuchMethod(
        Invocation.method(
          #setHttpBody,
          [body],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.Uint8List?> getHttpBody() => (super.noSuchMethod(
        Invocation.method(
          #getHttpBody,
          [],
        ),
        returnValue: _i4.Future<_i5.Uint8List?>.value(),
      ) as _i4.Future<_i5.Uint8List?>);

  @override
  _i4.Future<void> setAllHttpHeaderFields(Map<String, String>? fields) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAllHttpHeaderFields,
          [fields],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Map<String, String>?> getAllHttpHeaderFields() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllHttpHeaderFields,
          [],
        ),
        returnValue: _i4.Future<Map<String, String>?>.value(),
      ) as _i4.Future<Map<String, String>?>);

  @override
  _i2.URLRequest pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeURLRequest_2(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.URLRequest);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WKNavigationDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKNavigationDelegate extends _i1.Mock
    implements _i2.WKNavigationDelegate {
  MockWKNavigationDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.WKNavigationDelegate pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeWKNavigationDelegate_3(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.WKNavigationDelegate);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WKPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKPreferences extends _i1.Mock implements _i2.WKPreferences {
  MockWKPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i4.Future<void> setJavaScriptEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setJavaScriptEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i2.WKPreferences pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeWKPreferences_4(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.WKPreferences);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WKScriptMessageHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKScriptMessageHandler extends _i1.Mock
    implements _i2.WKScriptMessageHandler {
  MockWKScriptMessageHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void Function(
    _i2.WKScriptMessageHandler,
    _i2.WKUserContentController,
    _i2.WKScriptMessage,
  ) get didReceiveScriptMessage => (super.noSuchMethod(
        Invocation.getter(#didReceiveScriptMessage),
        returnValue: (
          _i2.WKScriptMessageHandler pigeon_instance,
          _i2.WKUserContentController controller,
          _i2.WKScriptMessage message,
        ) {},
      ) as void Function(
        _i2.WKScriptMessageHandler,
        _i2.WKUserContentController,
        _i2.WKScriptMessage,
      ));

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.WKScriptMessageHandler pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeWKScriptMessageHandler_5(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.WKScriptMessageHandler);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WKWebView].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKWebView extends _i1.Mock implements _i2.WKWebView {
  MockWKWebView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.WKWebView pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeWKWebView_6(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.WKWebView);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [UIViewWKWebView].
///
/// See the documentation for Mockito's code generation for more information.
class MockUIViewWKWebView extends _i1.Mock implements _i2.UIViewWKWebView {
  MockUIViewWKWebView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WKWebViewConfiguration get configuration => (super.noSuchMethod(
        Invocation.getter(#configuration),
        returnValue: _FakeWKWebViewConfiguration_7(
          this,
          Invocation.getter(#configuration),
        ),
      ) as _i2.WKWebViewConfiguration);

  @override
  _i2.UIScrollView get scrollView => (super.noSuchMethod(
        Invocation.getter(#scrollView),
        returnValue: _FakeUIScrollView_1(
          this,
          Invocation.getter(#scrollView),
        ),
      ) as _i2.UIScrollView);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.WKWebViewConfiguration pigeonVar_configuration() => (super.noSuchMethod(
        Invocation.method(
          #pigeonVar_configuration,
          [],
        ),
        returnValue: _FakeWKWebViewConfiguration_7(
          this,
          Invocation.method(
            #pigeonVar_configuration,
            [],
          ),
        ),
      ) as _i2.WKWebViewConfiguration);

  @override
  _i2.UIScrollView pigeonVar_scrollView() => (super.noSuchMethod(
        Invocation.method(
          #pigeonVar_scrollView,
          [],
        ),
        returnValue: _FakeUIScrollView_1(
          this,
          Invocation.method(
            #pigeonVar_scrollView,
            [],
          ),
        ),
      ) as _i2.UIScrollView);

  @override
  _i4.Future<void> setUIDelegate(_i2.WKUIDelegate? delegate) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUIDelegate,
          [delegate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setNavigationDelegate(_i2.WKNavigationDelegate? delegate) =>
      (super.noSuchMethod(
        Invocation.method(
          #setNavigationDelegate,
          [delegate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getUrl() => (super.noSuchMethod(
        Invocation.method(
          #getUrl,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<double> getEstimatedProgress() => (super.noSuchMethod(
        Invocation.method(
          #getEstimatedProgress,
          [],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);

  @override
  _i4.Future<void> load(_i2.URLRequest? request) => (super.noSuchMethod(
        Invocation.method(
          #load,
          [request],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadHtmlString(
    String? string,
    String? baseUrl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadHtmlString,
          [
            string,
            baseUrl,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadFileUrl(
    String? url,
    String? readAccessUrl,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadFileUrl,
          [
            url,
            readAccessUrl,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> loadFlutterAsset(String? key) => (super.noSuchMethod(
        Invocation.method(
          #loadFlutterAsset,
          [key],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> canGoBack() => (super.noSuchMethod(
        Invocation.method(
          #canGoBack,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> canGoForward() => (super.noSuchMethod(
        Invocation.method(
          #canGoForward,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> goBack() => (super.noSuchMethod(
        Invocation.method(
          #goBack,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> goForward() => (super.noSuchMethod(
        Invocation.method(
          #goForward,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getTitle() => (super.noSuchMethod(
        Invocation.method(
          #getTitle,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> setAllowsBackForwardNavigationGestures(bool? allow) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAllowsBackForwardNavigationGestures,
          [allow],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setCustomUserAgent(String? userAgent) => (super.noSuchMethod(
        Invocation.method(
          #setCustomUserAgent,
          [userAgent],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<Object?> evaluateJavaScript(String? javaScriptString) =>
      (super.noSuchMethod(
        Invocation.method(
          #evaluateJavaScript,
          [javaScriptString],
        ),
        returnValue: _i4.Future<Object?>.value(),
      ) as _i4.Future<Object?>);

  @override
  _i4.Future<void> setInspectable(bool? inspectable) => (super.noSuchMethod(
        Invocation.method(
          #setInspectable,
          [inspectable],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getCustomUserAgent() => (super.noSuchMethod(
        Invocation.method(
          #getCustomUserAgent,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i2.UIViewWKWebView pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeUIViewWKWebView_8(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.UIViewWKWebView);

  @override
  _i4.Future<void> setBackgroundColor(int? value) => (super.noSuchMethod(
        Invocation.method(
          #setBackgroundColor,
          [value],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setOpaque(bool? opaque) => (super.noSuchMethod(
        Invocation.method(
          #setOpaque,
          [opaque],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WKWebViewConfiguration].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKWebViewConfiguration extends _i1.Mock
    implements _i2.WKWebViewConfiguration {
  MockWKWebViewConfiguration() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i4.Future<void> setUserContentController(
          _i2.WKUserContentController? controller) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserContentController,
          [controller],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.WKUserContentController> getUserContentController() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserContentController,
          [],
        ),
        returnValue: _i4.Future<_i2.WKUserContentController>.value(
            _FakeWKUserContentController_9(
          this,
          Invocation.method(
            #getUserContentController,
            [],
          ),
        )),
      ) as _i4.Future<_i2.WKUserContentController>);

  @override
  _i4.Future<void> setWebsiteDataStore(_i2.WKWebsiteDataStore? dataStore) =>
      (super.noSuchMethod(
        Invocation.method(
          #setWebsiteDataStore,
          [dataStore],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.WKWebsiteDataStore> getWebsiteDataStore() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWebsiteDataStore,
          [],
        ),
        returnValue:
            _i4.Future<_i2.WKWebsiteDataStore>.value(_FakeWKWebsiteDataStore_10(
          this,
          Invocation.method(
            #getWebsiteDataStore,
            [],
          ),
        )),
      ) as _i4.Future<_i2.WKWebsiteDataStore>);

  @override
  _i4.Future<void> setPreferences(_i2.WKPreferences? preferences) =>
      (super.noSuchMethod(
        Invocation.method(
          #setPreferences,
          [preferences],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.WKPreferences> getPreferences() => (super.noSuchMethod(
        Invocation.method(
          #getPreferences,
          [],
        ),
        returnValue: _i4.Future<_i2.WKPreferences>.value(_FakeWKPreferences_4(
          this,
          Invocation.method(
            #getPreferences,
            [],
          ),
        )),
      ) as _i4.Future<_i2.WKPreferences>);

  @override
  _i4.Future<void> setAllowsInlineMediaPlayback(bool? allow) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAllowsInlineMediaPlayback,
          [allow],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setLimitsNavigationsToAppBoundDomains(bool? limit) =>
      (super.noSuchMethod(
        Invocation.method(
          #setLimitsNavigationsToAppBoundDomains,
          [limit],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> setMediaTypesRequiringUserActionForPlayback(
          _i2.AudiovisualMediaType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #setMediaTypesRequiringUserActionForPlayback,
          [type],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i2.WKWebViewConfiguration pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeWKWebViewConfiguration_7(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.WKWebViewConfiguration);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WKWebsiteDataStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKWebsiteDataStore extends _i1.Mock
    implements _i2.WKWebsiteDataStore {
  MockWKWebsiteDataStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WKHTTPCookieStore get httpCookieStore => (super.noSuchMethod(
        Invocation.getter(#httpCookieStore),
        returnValue: _FakeWKHTTPCookieStore_11(
          this,
          Invocation.getter(#httpCookieStore),
        ),
      ) as _i2.WKHTTPCookieStore);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.WKHTTPCookieStore pigeonVar_httpCookieStore() => (super.noSuchMethod(
        Invocation.method(
          #pigeonVar_httpCookieStore,
          [],
        ),
        returnValue: _FakeWKHTTPCookieStore_11(
          this,
          Invocation.method(
            #pigeonVar_httpCookieStore,
            [],
          ),
        ),
      ) as _i2.WKHTTPCookieStore);

  @override
  _i4.Future<bool> removeDataOfTypes(
    List<_i2.WebsiteDataType>? dataTypes,
    double? modificationTimeInSecondsSinceEpoch,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeDataOfTypes,
          [
            dataTypes,
            modificationTimeInSecondsSinceEpoch,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i2.WKWebsiteDataStore pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeWKWebsiteDataStore_10(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.WKWebsiteDataStore);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WKUIDelegate].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKUIDelegate extends _i1.Mock implements _i2.WKUIDelegate {
  MockWKUIDelegate() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.WKUIDelegate pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeWKUIDelegate_12(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.WKUIDelegate);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [WKUserContentController].
///
/// See the documentation for Mockito's code generation for more information.
class MockWKUserContentController extends _i1.Mock
    implements _i2.WKUserContentController {
  MockWKUserContentController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i4.Future<void> addScriptMessageHandler(
    _i2.WKScriptMessageHandler? handler,
    String? name,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addScriptMessageHandler,
          [
            handler,
            name,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeScriptMessageHandler(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeScriptMessageHandler,
          [name],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeAllScriptMessageHandlers() => (super.noSuchMethod(
        Invocation.method(
          #removeAllScriptMessageHandlers,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addUserScript(_i2.WKUserScript? userScript) =>
      (super.noSuchMethod(
        Invocation.method(
          #addUserScript,
          [userScript],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeAllUserScripts() => (super.noSuchMethod(
        Invocation.method(
          #removeAllUserScripts,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i2.WKUserContentController pigeon_copy() => (super.noSuchMethod(
        Invocation.method(
          #pigeon_copy,
          [],
        ),
        returnValue: _FakeWKUserContentController_9(
          this,
          Invocation.method(
            #pigeon_copy,
            [],
          ),
        ),
      ) as _i2.WKUserContentController);

  @override
  _i4.Future<void> addObserver(
    _i2.NSObject? observer,
    String? keyPath,
    List<_i2.KeyValueObservingOptions>? options,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addObserver,
          [
            observer,
            keyPath,
            options,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> removeObserver(
    _i2.NSObject? observer,
    String? keyPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeObserver,
          [
            observer,
            keyPath,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [JavascriptChannelRegistry].
///
/// See the documentation for Mockito's code generation for more information.
class MockJavascriptChannelRegistry extends _i1.Mock
    implements _i6.JavascriptChannelRegistry {
  MockJavascriptChannelRegistry() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i7.JavascriptChannel> get channels => (super.noSuchMethod(
        Invocation.getter(#channels),
        returnValue: <String, _i7.JavascriptChannel>{},
      ) as Map<String, _i7.JavascriptChannel>);

  @override
  void onJavascriptChannelMessage(
    String? channel,
    String? message,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onJavascriptChannelMessage,
          [
            channel,
            message,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void updateJavascriptChannelsFromSet(Set<_i7.JavascriptChannel>? channels) =>
      super.noSuchMethod(
        Invocation.method(
          #updateJavascriptChannelsFromSet,
          [channels],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WebViewPlatformCallbacksHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebViewPlatformCallbacksHandler extends _i1.Mock
    implements _i6.WebViewPlatformCallbacksHandler {
  MockWebViewPlatformCallbacksHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FutureOr<bool> onNavigationRequest({
    required String? url,
    required bool? isForMainFrame,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #onNavigationRequest,
          [],
          {
            #url: url,
            #isForMainFrame: isForMainFrame,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.FutureOr<bool>);

  @override
  void onPageStarted(String? url) => super.noSuchMethod(
        Invocation.method(
          #onPageStarted,
          [url],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPageFinished(String? url) => super.noSuchMethod(
        Invocation.method(
          #onPageFinished,
          [url],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onProgress(int? progress) => super.noSuchMethod(
        Invocation.method(
          #onProgress,
          [progress],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onWebResourceError(_i8.WebResourceError? error) => super.noSuchMethod(
        Invocation.method(
          #onWebResourceError,
          [error],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WebViewWidgetProxy].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebViewWidgetProxy extends _i1.Mock
    implements _i9.WebViewWidgetProxy {
  MockWebViewWidgetProxy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PlatformWebView createWebView(
    _i2.WKWebViewConfiguration? configuration, {
    void Function(
      String,
      _i2.NSObject,
      Map<_i2.KeyValueChangeKey, Object?>,
    )? observeValue,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createWebView,
          [configuration],
          {#observeValue: observeValue},
        ),
        returnValue: _FakePlatformWebView_13(
          this,
          Invocation.method(
            #createWebView,
            [configuration],
            {#observeValue: observeValue},
          ),
        ),
      ) as _i3.PlatformWebView);

  @override
  _i2.URLRequest createRequest({required String? url}) => (super.noSuchMethod(
        Invocation.method(
          #createRequest,
          [],
          {#url: url},
        ),
        returnValue: _FakeURLRequest_2(
          this,
          Invocation.method(
            #createRequest,
            [],
            {#url: url},
          ),
        ),
      ) as _i2.URLRequest);

  @override
  _i2.WKScriptMessageHandler createScriptMessageHandler(
          {required void Function(
            _i2.WKScriptMessageHandler,
            _i2.WKUserContentController,
            _i2.WKScriptMessage,
          )? didReceiveScriptMessage}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createScriptMessageHandler,
          [],
          {#didReceiveScriptMessage: didReceiveScriptMessage},
        ),
        returnValue: _FakeWKScriptMessageHandler_5(
          this,
          Invocation.method(
            #createScriptMessageHandler,
            [],
            {#didReceiveScriptMessage: didReceiveScriptMessage},
          ),
        ),
      ) as _i2.WKScriptMessageHandler);

  @override
  _i2.WKUIDelegate createUIDelgate(
          {void Function(
            _i2.WKUIDelegate,
            _i2.WKWebView,
            _i2.WKWebViewConfiguration,
            _i2.WKNavigationAction,
          )? onCreateWebView}) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUIDelgate,
          [],
          {#onCreateWebView: onCreateWebView},
        ),
        returnValue: _FakeWKUIDelegate_12(
          this,
          Invocation.method(
            #createUIDelgate,
            [],
            {#onCreateWebView: onCreateWebView},
          ),
        ),
      ) as _i2.WKUIDelegate);

  @override
  _i2.WKNavigationDelegate createNavigationDelegate({
    void Function(
      _i2.WKNavigationDelegate,
      _i2.WKWebView,
      String?,
    )? didFinishNavigation,
    void Function(
      _i2.WKNavigationDelegate,
      _i2.WKWebView,
      String?,
    )? didStartProvisionalNavigation,
    required _i4.Future<_i2.NavigationActionPolicy> Function(
      _i2.WKNavigationDelegate,
      _i2.WKWebView,
      _i2.WKNavigationAction,
    )? decidePolicyForNavigationAction,
    void Function(
      _i2.WKNavigationDelegate,
      _i2.WKWebView,
      _i2.NSError,
    )? didFailNavigation,
    void Function(
      _i2.WKNavigationDelegate,
      _i2.WKWebView,
      _i2.NSError,
    )? didFailProvisionalNavigation,
    void Function(
      _i2.WKNavigationDelegate,
      _i2.WKWebView,
    )? webViewWebContentProcessDidTerminate,
    required _i4.Future<_i2.NavigationResponsePolicy> Function(
      _i2.WKNavigationDelegate,
      _i2.WKWebView,
      _i2.WKNavigationResponse,
    )? decidePolicyForNavigationResponse,
    required _i4.Future<_i2.AuthenticationChallengeResponse> Function(
      _i2.WKNavigationDelegate,
      _i2.WKWebView,
      _i2.URLAuthenticationChallenge,
    )? didReceiveAuthenticationChallenge,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createNavigationDelegate,
          [],
          {
            #didFinishNavigation: didFinishNavigation,
            #didStartProvisionalNavigation: didStartProvisionalNavigation,
            #decidePolicyForNavigationAction: decidePolicyForNavigationAction,
            #didFailNavigation: didFailNavigation,
            #didFailProvisionalNavigation: didFailProvisionalNavigation,
            #webViewWebContentProcessDidTerminate:
                webViewWebContentProcessDidTerminate,
            #decidePolicyForNavigationResponse:
                decidePolicyForNavigationResponse,
            #didReceiveAuthenticationChallenge:
                didReceiveAuthenticationChallenge,
          },
        ),
        returnValue: _FakeWKNavigationDelegate_3(
          this,
          Invocation.method(
            #createNavigationDelegate,
            [],
            {
              #didFinishNavigation: didFinishNavigation,
              #didStartProvisionalNavigation: didStartProvisionalNavigation,
              #decidePolicyForNavigationAction: decidePolicyForNavigationAction,
              #didFailNavigation: didFailNavigation,
              #didFailProvisionalNavigation: didFailProvisionalNavigation,
              #webViewWebContentProcessDidTerminate:
                  webViewWebContentProcessDidTerminate,
              #decidePolicyForNavigationResponse:
                  decidePolicyForNavigationResponse,
              #didReceiveAuthenticationChallenge:
                  didReceiveAuthenticationChallenge,
            },
          ),
        ),
      ) as _i2.WKNavigationDelegate);
}
