// Mocks generated by Mockito 5.4.4 from annotations
// in camera_android_camerax/test/android_camera_camerax_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i17;
import 'dart:typed_data' as _i34;
import 'dart:ui' as _i14;

import 'package:camera_android_camerax/src/analyzer.dart' as _i16;
import 'package:camera_android_camerax/src/aspect_ratio_strategy.dart' as _i19;
import 'package:camera_android_camerax/src/camera.dart' as _i12;
import 'package:camera_android_camerax/src/camera2_camera_control.dart' as _i24;
import 'package:camera_android_camerax/src/camera2_camera_info.dart' as _i26;
import 'package:camera_android_camerax/src/camera_control.dart' as _i6;
import 'package:camera_android_camerax/src/camera_info.dart' as _i5;
import 'package:camera_android_camerax/src/camera_selector.dart' as _i28;
import 'package:camera_android_camerax/src/camera_state.dart' as _i20;
import 'package:camera_android_camerax/src/camerax_library.g.dart' as _i10;
import 'package:camera_android_camerax/src/capture_request_options.dart'
    as _i25;
import 'package:camera_android_camerax/src/exposure_state.dart' as _i8;
import 'package:camera_android_camerax/src/fallback_strategy.dart' as _i29;
import 'package:camera_android_camerax/src/focus_metering_action.dart' as _i23;
import 'package:camera_android_camerax/src/focus_metering_result.dart' as _i22;
import 'package:camera_android_camerax/src/image_analysis.dart' as _i30;
import 'package:camera_android_camerax/src/image_capture.dart' as _i31;
import 'package:camera_android_camerax/src/image_proxy.dart' as _i18;
import 'package:camera_android_camerax/src/live_data.dart' as _i7;
import 'package:camera_android_camerax/src/observer.dart' as _i33;
import 'package:camera_android_camerax/src/pending_recording.dart' as _i13;
import 'package:camera_android_camerax/src/plane_proxy.dart' as _i32;
import 'package:camera_android_camerax/src/preview.dart' as _i35;
import 'package:camera_android_camerax/src/process_camera_provider.dart'
    as _i36;
import 'package:camera_android_camerax/src/quality_selector.dart' as _i38;
import 'package:camera_android_camerax/src/recorder.dart' as _i15;
import 'package:camera_android_camerax/src/recording.dart' as _i11;
import 'package:camera_android_camerax/src/resolution_filter.dart' as _i39;
import 'package:camera_android_camerax/src/resolution_selector.dart' as _i40;
import 'package:camera_android_camerax/src/resolution_strategy.dart' as _i41;
import 'package:camera_android_camerax/src/use_case.dart' as _i37;
import 'package:camera_android_camerax/src/video_capture.dart' as _i43;
import 'package:camera_android_camerax/src/zoom_state.dart' as _i21;
import 'package:camera_platform_interface/camera_platform_interface.dart'
    as _i9;
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter/services.dart' as _i3;
import 'package:flutter/widgets.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i27;

import 'test_camerax_library.g.dart' as _i42;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_1 extends _i1.SmartFake
    implements _i2.InheritedWidget {
  _FakeInheritedWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i1.SmartFake
    implements _i4.DiagnosticsNode {
  _FakeDiagnosticsNode_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i4.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeCameraInfo_3 extends _i1.SmartFake implements _i5.CameraInfo {
  _FakeCameraInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCameraControl_4 extends _i1.SmartFake implements _i6.CameraControl {
  _FakeCameraControl_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLiveData_5<T extends Object> extends _i1.SmartFake
    implements _i7.LiveData<T> {
  _FakeLiveData_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExposureState_6 extends _i1.SmartFake implements _i8.ExposureState {
  _FakeExposureState_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCameraImageFormat_7 extends _i1.SmartFake
    implements _i9.CameraImageFormat {
  _FakeCameraImageFormat_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeExposureCompensationRange_8 extends _i1.SmartFake
    implements _i10.ExposureCompensationRange {
  _FakeExposureCompensationRange_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecording_9 extends _i1.SmartFake implements _i11.Recording {
  _FakeRecording_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResolutionInfo_10 extends _i1.SmartFake
    implements _i10.ResolutionInfo {
  _FakeResolutionInfo_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCamera_11 extends _i1.SmartFake implements _i12.Camera {
  _FakeCamera_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePendingRecording_12 extends _i1.SmartFake
    implements _i13.PendingRecording {
  _FakePendingRecording_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSize_13 extends _i1.SmartFake implements _i14.Size {
  _FakeSize_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRecorder_14 extends _i1.SmartFake implements _i15.Recorder {
  _FakeRecorder_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Analyzer].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockAnalyzer extends _i1.Mock implements _i16.Analyzer {
  @override
  _i17.Future<void> Function(_i18.ImageProxy) get analyze =>
      (super.noSuchMethod(
        Invocation.getter(#analyze),
        returnValue: (_i18.ImageProxy imageProxy) => _i17.Future<void>.value(),
        returnValueForMissingStub: (_i18.ImageProxy imageProxy) =>
            _i17.Future<void>.value(),
      ) as _i17.Future<void> Function(_i18.ImageProxy));
}

/// A class which mocks [AspectRatioStrategy].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockAspectRatioStrategy extends _i1.Mock
    implements _i19.AspectRatioStrategy {
  @override
  int get preferredAspectRatio => (super.noSuchMethod(
        Invocation.getter(#preferredAspectRatio),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get fallbackRule => (super.noSuchMethod(
        Invocation.getter(#fallbackRule),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i2.BuildContext {
  @override
  _i2.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_0(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_0(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i2.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.InheritedWidget dependOnInheritedElement(
    _i2.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_1(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_1(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i2.InheritedWidget);

  @override
  void visitAncestorElements(_i2.ConditionalElementVisitor? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i2.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i2.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.DiagnosticsNode describeElement(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  _i4.DiagnosticsNode describeWidget(
    String? name, {
    _i4.DiagnosticsTreeStyle? style = _i4.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i4.DiagnosticsNode);

  @override
  List<_i4.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i4.DiagnosticsNode>[],
        returnValueForMissingStub: <_i4.DiagnosticsNode>[],
      ) as List<_i4.DiagnosticsNode>);

  @override
  _i4.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i4.DiagnosticsNode);
}

/// A class which mocks [Camera].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCamera extends _i1.Mock implements _i12.Camera {
  @override
  _i17.Future<_i5.CameraInfo> getCameraInfo() => (super.noSuchMethod(
        Invocation.method(
          #getCameraInfo,
          [],
        ),
        returnValue: _i17.Future<_i5.CameraInfo>.value(_FakeCameraInfo_3(
          this,
          Invocation.method(
            #getCameraInfo,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i5.CameraInfo>.value(_FakeCameraInfo_3(
          this,
          Invocation.method(
            #getCameraInfo,
            [],
          ),
        )),
      ) as _i17.Future<_i5.CameraInfo>);

  @override
  _i17.Future<_i6.CameraControl> getCameraControl() => (super.noSuchMethod(
        Invocation.method(
          #getCameraControl,
          [],
        ),
        returnValue: _i17.Future<_i6.CameraControl>.value(_FakeCameraControl_4(
          this,
          Invocation.method(
            #getCameraControl,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i6.CameraControl>.value(_FakeCameraControl_4(
          this,
          Invocation.method(
            #getCameraControl,
            [],
          ),
        )),
      ) as _i17.Future<_i6.CameraControl>);
}

/// A class which mocks [CameraInfo].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCameraInfo extends _i1.Mock implements _i5.CameraInfo {
  @override
  _i17.Future<int> getSensorRotationDegrees() => (super.noSuchMethod(
        Invocation.method(
          #getSensorRotationDegrees,
          [],
        ),
        returnValue: _i17.Future<int>.value(0),
        returnValueForMissingStub: _i17.Future<int>.value(0),
      ) as _i17.Future<int>);

  @override
  _i17.Future<_i7.LiveData<_i20.CameraState>> getCameraState() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCameraState,
          [],
        ),
        returnValue: _i17.Future<_i7.LiveData<_i20.CameraState>>.value(
            _FakeLiveData_5<_i20.CameraState>(
          this,
          Invocation.method(
            #getCameraState,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i7.LiveData<_i20.CameraState>>.value(
                _FakeLiveData_5<_i20.CameraState>(
          this,
          Invocation.method(
            #getCameraState,
            [],
          ),
        )),
      ) as _i17.Future<_i7.LiveData<_i20.CameraState>>);

  @override
  _i17.Future<_i8.ExposureState> getExposureState() => (super.noSuchMethod(
        Invocation.method(
          #getExposureState,
          [],
        ),
        returnValue: _i17.Future<_i8.ExposureState>.value(_FakeExposureState_6(
          this,
          Invocation.method(
            #getExposureState,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i8.ExposureState>.value(_FakeExposureState_6(
          this,
          Invocation.method(
            #getExposureState,
            [],
          ),
        )),
      ) as _i17.Future<_i8.ExposureState>);

  @override
  _i17.Future<_i7.LiveData<_i21.ZoomState>> getZoomState() =>
      (super.noSuchMethod(
        Invocation.method(
          #getZoomState,
          [],
        ),
        returnValue: _i17.Future<_i7.LiveData<_i21.ZoomState>>.value(
            _FakeLiveData_5<_i21.ZoomState>(
          this,
          Invocation.method(
            #getZoomState,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i7.LiveData<_i21.ZoomState>>.value(
                _FakeLiveData_5<_i21.ZoomState>(
          this,
          Invocation.method(
            #getZoomState,
            [],
          ),
        )),
      ) as _i17.Future<_i7.LiveData<_i21.ZoomState>>);
}

/// A class which mocks [CameraControl].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCameraControl extends _i1.Mock implements _i6.CameraControl {
  @override
  _i17.Future<void> enableTorch(bool? torch) => (super.noSuchMethod(
        Invocation.method(
          #enableTorch,
          [torch],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> setZoomRatio(double? ratio) => (super.noSuchMethod(
        Invocation.method(
          #setZoomRatio,
          [ratio],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<_i22.FocusMeteringResult?> startFocusAndMetering(
          _i23.FocusMeteringAction? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #startFocusAndMetering,
          [action],
        ),
        returnValue: _i17.Future<_i22.FocusMeteringResult?>.value(),
        returnValueForMissingStub:
            _i17.Future<_i22.FocusMeteringResult?>.value(),
      ) as _i17.Future<_i22.FocusMeteringResult?>);

  @override
  _i17.Future<void> cancelFocusAndMetering() => (super.noSuchMethod(
        Invocation.method(
          #cancelFocusAndMetering,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<int?> setExposureCompensationIndex(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #setExposureCompensationIndex,
          [index],
        ),
        returnValue: _i17.Future<int?>.value(),
        returnValueForMissingStub: _i17.Future<int?>.value(),
      ) as _i17.Future<int?>);
}

/// A class which mocks [Camera2CameraControl].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCamera2CameraControl extends _i1.Mock
    implements _i24.Camera2CameraControl {
  @override
  _i6.CameraControl get cameraControl => (super.noSuchMethod(
        Invocation.getter(#cameraControl),
        returnValue: _FakeCameraControl_4(
          this,
          Invocation.getter(#cameraControl),
        ),
        returnValueForMissingStub: _FakeCameraControl_4(
          this,
          Invocation.getter(#cameraControl),
        ),
      ) as _i6.CameraControl);

  @override
  _i17.Future<void> addCaptureRequestOptions(
          _i25.CaptureRequestOptions? captureRequestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCaptureRequestOptions,
          [captureRequestOptions],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [Camera2CameraInfo].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCamera2CameraInfo extends _i1.Mock implements _i26.Camera2CameraInfo {
  @override
  _i17.Future<int> getSupportedHardwareLevel() => (super.noSuchMethod(
        Invocation.method(
          #getSupportedHardwareLevel,
          [],
        ),
        returnValue: _i17.Future<int>.value(0),
        returnValueForMissingStub: _i17.Future<int>.value(0),
      ) as _i17.Future<int>);

  @override
  _i17.Future<String> getCameraId() => (super.noSuchMethod(
        Invocation.method(
          #getCameraId,
          [],
        ),
        returnValue: _i17.Future<String>.value(_i27.dummyValue<String>(
          this,
          Invocation.method(
            #getCameraId,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<String>.value(_i27.dummyValue<String>(
          this,
          Invocation.method(
            #getCameraId,
            [],
          ),
        )),
      ) as _i17.Future<String>);

  @override
  _i17.Future<int> getSensorOrientation() => (super.noSuchMethod(
        Invocation.method(
          #getSensorOrientation,
          [],
        ),
        returnValue: _i17.Future<int>.value(0),
        returnValueForMissingStub: _i17.Future<int>.value(0),
      ) as _i17.Future<int>);
}

/// A class which mocks [CameraImageData].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCameraImageData extends _i1.Mock implements _i9.CameraImageData {
  @override
  _i9.CameraImageFormat get format => (super.noSuchMethod(
        Invocation.getter(#format),
        returnValue: _FakeCameraImageFormat_7(
          this,
          Invocation.getter(#format),
        ),
        returnValueForMissingStub: _FakeCameraImageFormat_7(
          this,
          Invocation.getter(#format),
        ),
      ) as _i9.CameraImageFormat);

  @override
  int get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  List<_i9.CameraImagePlane> get planes => (super.noSuchMethod(
        Invocation.getter(#planes),
        returnValue: <_i9.CameraImagePlane>[],
        returnValueForMissingStub: <_i9.CameraImagePlane>[],
      ) as List<_i9.CameraImagePlane>);
}

/// A class which mocks [CameraSelector].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCameraSelector extends _i1.Mock implements _i28.CameraSelector {
  @override
  _i17.Future<List<_i5.CameraInfo>> filter(List<_i5.CameraInfo>? cameraInfos) =>
      (super.noSuchMethod(
        Invocation.method(
          #filter,
          [cameraInfos],
        ),
        returnValue:
            _i17.Future<List<_i5.CameraInfo>>.value(<_i5.CameraInfo>[]),
        returnValueForMissingStub:
            _i17.Future<List<_i5.CameraInfo>>.value(<_i5.CameraInfo>[]),
      ) as _i17.Future<List<_i5.CameraInfo>>);
}

/// A class which mocks [ExposureState].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockExposureState extends _i1.Mock implements _i8.ExposureState {
  @override
  _i10.ExposureCompensationRange get exposureCompensationRange =>
      (super.noSuchMethod(
        Invocation.getter(#exposureCompensationRange),
        returnValue: _FakeExposureCompensationRange_8(
          this,
          Invocation.getter(#exposureCompensationRange),
        ),
        returnValueForMissingStub: _FakeExposureCompensationRange_8(
          this,
          Invocation.getter(#exposureCompensationRange),
        ),
      ) as _i10.ExposureCompensationRange);

  @override
  double get exposureCompensationStep => (super.noSuchMethod(
        Invocation.getter(#exposureCompensationStep),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}

/// A class which mocks [FallbackStrategy].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockFallbackStrategy extends _i1.Mock implements _i29.FallbackStrategy {
  @override
  _i10.VideoQuality get quality => (super.noSuchMethod(
        Invocation.getter(#quality),
        returnValue: _i10.VideoQuality.SD,
        returnValueForMissingStub: _i10.VideoQuality.SD,
      ) as _i10.VideoQuality);

  @override
  _i10.VideoResolutionFallbackRule get fallbackRule => (super.noSuchMethod(
        Invocation.getter(#fallbackRule),
        returnValue: _i10.VideoResolutionFallbackRule.higherQualityOrLowerThan,
        returnValueForMissingStub:
            _i10.VideoResolutionFallbackRule.higherQualityOrLowerThan,
      ) as _i10.VideoResolutionFallbackRule);
}

/// A class which mocks [FocusMeteringResult].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockFocusMeteringResult extends _i1.Mock
    implements _i22.FocusMeteringResult {
  @override
  _i17.Future<bool> isFocusSuccessful() => (super.noSuchMethod(
        Invocation.method(
          #isFocusSuccessful,
          [],
        ),
        returnValue: _i17.Future<bool>.value(false),
        returnValueForMissingStub: _i17.Future<bool>.value(false),
      ) as _i17.Future<bool>);
}

/// A class which mocks [ImageAnalysis].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockImageAnalysis extends _i1.Mock implements _i30.ImageAnalysis {
  @override
  _i17.Future<void> setTargetRotation(int? rotation) => (super.noSuchMethod(
        Invocation.method(
          #setTargetRotation,
          [rotation],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> setAnalyzer(_i16.Analyzer? analyzer) => (super.noSuchMethod(
        Invocation.method(
          #setAnalyzer,
          [analyzer],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> clearAnalyzer() => (super.noSuchMethod(
        Invocation.method(
          #clearAnalyzer,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [ImageCapture].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockImageCapture extends _i1.Mock implements _i31.ImageCapture {
  @override
  _i17.Future<void> setTargetRotation(int? rotation) => (super.noSuchMethod(
        Invocation.method(
          #setTargetRotation,
          [rotation],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> setFlashMode(int? newFlashMode) => (super.noSuchMethod(
        Invocation.method(
          #setFlashMode,
          [newFlashMode],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<String> takePicture() => (super.noSuchMethod(
        Invocation.method(
          #takePicture,
          [],
        ),
        returnValue: _i17.Future<String>.value(_i27.dummyValue<String>(
          this,
          Invocation.method(
            #takePicture,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<String>.value(_i27.dummyValue<String>(
          this,
          Invocation.method(
            #takePicture,
            [],
          ),
        )),
      ) as _i17.Future<String>);
}

/// A class which mocks [ImageProxy].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockImageProxy extends _i1.Mock implements _i18.ImageProxy {
  @override
  int get format => (super.noSuchMethod(
        Invocation.getter(#format),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i17.Future<List<_i32.PlaneProxy>> getPlanes() => (super.noSuchMethod(
        Invocation.method(
          #getPlanes,
          [],
        ),
        returnValue:
            _i17.Future<List<_i32.PlaneProxy>>.value(<_i32.PlaneProxy>[]),
        returnValueForMissingStub:
            _i17.Future<List<_i32.PlaneProxy>>.value(<_i32.PlaneProxy>[]),
      ) as _i17.Future<List<_i32.PlaneProxy>>);

  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [Observer].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockObserver extends _i1.Mock implements _i33.Observer<_i20.CameraState> {
  @override
  void Function(Object) get onChanged => (super.noSuchMethod(
        Invocation.getter(#onChanged),
        returnValue: (Object value) {},
        returnValueForMissingStub: (Object value) {},
      ) as void Function(Object));

  @override
  set onChanged(void Function(Object)? _onChanged) => super.noSuchMethod(
        Invocation.setter(
          #onChanged,
          _onChanged,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PendingRecording].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockPendingRecording extends _i1.Mock implements _i13.PendingRecording {
  @override
  _i17.Future<_i11.Recording> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _i17.Future<_i11.Recording>.value(_FakeRecording_9(
          this,
          Invocation.method(
            #start,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i11.Recording>.value(_FakeRecording_9(
          this,
          Invocation.method(
            #start,
            [],
          ),
        )),
      ) as _i17.Future<_i11.Recording>);
}

/// A class which mocks [PlaneProxy].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockPlaneProxy extends _i1.Mock implements _i32.PlaneProxy {
  @override
  _i34.Uint8List get buffer => (super.noSuchMethod(
        Invocation.getter(#buffer),
        returnValue: _i34.Uint8List(0),
        returnValueForMissingStub: _i34.Uint8List(0),
      ) as _i34.Uint8List);

  @override
  int get pixelStride => (super.noSuchMethod(
        Invocation.getter(#pixelStride),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get rowStride => (super.noSuchMethod(
        Invocation.getter(#rowStride),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
}

/// A class which mocks [Preview].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockPreview extends _i1.Mock implements _i35.Preview {
  @override
  _i17.Future<void> setTargetRotation(int? rotation) => (super.noSuchMethod(
        Invocation.method(
          #setTargetRotation,
          [rotation],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<int> setSurfaceProvider() => (super.noSuchMethod(
        Invocation.method(
          #setSurfaceProvider,
          [],
        ),
        returnValue: _i17.Future<int>.value(0),
        returnValueForMissingStub: _i17.Future<int>.value(0),
      ) as _i17.Future<int>);

  @override
  void releaseFlutterSurfaceTexture() => super.noSuchMethod(
        Invocation.method(
          #releaseFlutterSurfaceTexture,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i17.Future<_i10.ResolutionInfo> getResolutionInfo() => (super.noSuchMethod(
        Invocation.method(
          #getResolutionInfo,
          [],
        ),
        returnValue:
            _i17.Future<_i10.ResolutionInfo>.value(_FakeResolutionInfo_10(
          this,
          Invocation.method(
            #getResolutionInfo,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i10.ResolutionInfo>.value(_FakeResolutionInfo_10(
          this,
          Invocation.method(
            #getResolutionInfo,
            [],
          ),
        )),
      ) as _i17.Future<_i10.ResolutionInfo>);
}

/// A class which mocks [ProcessCameraProvider].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockProcessCameraProvider extends _i1.Mock
    implements _i36.ProcessCameraProvider {
  @override
  _i17.Future<List<_i5.CameraInfo>> getAvailableCameraInfos() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableCameraInfos,
          [],
        ),
        returnValue:
            _i17.Future<List<_i5.CameraInfo>>.value(<_i5.CameraInfo>[]),
        returnValueForMissingStub:
            _i17.Future<List<_i5.CameraInfo>>.value(<_i5.CameraInfo>[]),
      ) as _i17.Future<List<_i5.CameraInfo>>);

  @override
  _i17.Future<_i12.Camera> bindToLifecycle(
    _i28.CameraSelector? cameraSelector,
    List<_i37.UseCase>? useCases,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #bindToLifecycle,
          [
            cameraSelector,
            useCases,
          ],
        ),
        returnValue: _i17.Future<_i12.Camera>.value(_FakeCamera_11(
          this,
          Invocation.method(
            #bindToLifecycle,
            [
              cameraSelector,
              useCases,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i12.Camera>.value(_FakeCamera_11(
          this,
          Invocation.method(
            #bindToLifecycle,
            [
              cameraSelector,
              useCases,
            ],
          ),
        )),
      ) as _i17.Future<_i12.Camera>);

  @override
  _i17.Future<bool> isBound(_i37.UseCase? useCase) => (super.noSuchMethod(
        Invocation.method(
          #isBound,
          [useCase],
        ),
        returnValue: _i17.Future<bool>.value(false),
        returnValueForMissingStub: _i17.Future<bool>.value(false),
      ) as _i17.Future<bool>);

  @override
  void unbind(List<_i37.UseCase>? useCases) => super.noSuchMethod(
        Invocation.method(
          #unbind,
          [useCases],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void unbindAll() => super.noSuchMethod(
        Invocation.method(
          #unbindAll,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [QualitySelector].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockQualitySelector extends _i1.Mock implements _i38.QualitySelector {
  @override
  List<_i10.VideoQualityData> get qualityList => (super.noSuchMethod(
        Invocation.getter(#qualityList),
        returnValue: <_i10.VideoQualityData>[],
        returnValueForMissingStub: <_i10.VideoQualityData>[],
      ) as List<_i10.VideoQualityData>);
}

/// A class which mocks [Recorder].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockRecorder extends _i1.Mock implements _i15.Recorder {
  @override
  _i17.Future<_i13.PendingRecording> prepareRecording(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareRecording,
          [path],
        ),
        returnValue:
            _i17.Future<_i13.PendingRecording>.value(_FakePendingRecording_12(
          this,
          Invocation.method(
            #prepareRecording,
            [path],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i13.PendingRecording>.value(_FakePendingRecording_12(
          this,
          Invocation.method(
            #prepareRecording,
            [path],
          ),
        )),
      ) as _i17.Future<_i13.PendingRecording>);
}

/// A class which mocks [ResolutionFilter].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockResolutionFilter extends _i1.Mock implements _i39.ResolutionFilter {
  @override
  _i14.Size get preferredResolution => (super.noSuchMethod(
        Invocation.getter(#preferredResolution),
        returnValue: _FakeSize_13(
          this,
          Invocation.getter(#preferredResolution),
        ),
        returnValueForMissingStub: _FakeSize_13(
          this,
          Invocation.getter(#preferredResolution),
        ),
      ) as _i14.Size);
}

/// A class which mocks [ResolutionSelector].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockResolutionSelector extends _i1.Mock
    implements _i40.ResolutionSelector {}

/// A class which mocks [ResolutionStrategy].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockResolutionStrategy extends _i1.Mock
    implements _i41.ResolutionStrategy {}

/// A class which mocks [Recording].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockRecording extends _i1.Mock implements _i11.Recording {
  @override
  _i17.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [TestInstanceManagerHostApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestInstanceManagerHostApi extends _i1.Mock
    implements _i42.TestInstanceManagerHostApi {
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TestSystemServicesHostApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestSystemServicesHostApi extends _i1.Mock
    implements _i42.TestSystemServicesHostApi {
  @override
  _i17.Future<_i10.CameraPermissionsErrorData?> requestCameraPermissions(
          bool? enableAudio) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestCameraPermissions,
          [enableAudio],
        ),
        returnValue: _i17.Future<_i10.CameraPermissionsErrorData?>.value(),
        returnValueForMissingStub:
            _i17.Future<_i10.CameraPermissionsErrorData?>.value(),
      ) as _i17.Future<_i10.CameraPermissionsErrorData?>);

  @override
  String getTempFilePath(
    String? prefix,
    String? suffix,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTempFilePath,
          [
            prefix,
            suffix,
          ],
        ),
        returnValue: _i27.dummyValue<String>(
          this,
          Invocation.method(
            #getTempFilePath,
            [
              prefix,
              suffix,
            ],
          ),
        ),
        returnValueForMissingStub: _i27.dummyValue<String>(
          this,
          Invocation.method(
            #getTempFilePath,
            [
              prefix,
              suffix,
            ],
          ),
        ),
      ) as String);

  @override
  bool isPreviewPreTransformed() => (super.noSuchMethod(
        Invocation.method(
          #isPreviewPreTransformed,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [VideoCapture].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockVideoCapture extends _i1.Mock implements _i43.VideoCapture {
  @override
  _i17.Future<void> setTargetRotation(int? rotation) => (super.noSuchMethod(
        Invocation.method(
          #setTargetRotation,
          [rotation],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<_i15.Recorder> getOutput() => (super.noSuchMethod(
        Invocation.method(
          #getOutput,
          [],
        ),
        returnValue: _i17.Future<_i15.Recorder>.value(_FakeRecorder_14(
          this,
          Invocation.method(
            #getOutput,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i17.Future<_i15.Recorder>.value(_FakeRecorder_14(
          this,
          Invocation.method(
            #getOutput,
            [],
          ),
        )),
      ) as _i17.Future<_i15.Recorder>);
}

/// A class which mocks [ZoomState].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockZoomState extends _i1.Mock implements _i21.ZoomState {
  @override
  double get minZoomRatio => (super.noSuchMethod(
        Invocation.getter(#minZoomRatio),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get maxZoomRatio => (super.noSuchMethod(
        Invocation.getter(#maxZoomRatio),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);
}

/// A class which mocks [LiveData].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockLiveCameraState extends _i1.Mock
    implements _i7.LiveData<_i20.CameraState> {
  MockLiveCameraState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<void> observe(_i33.Observer<_i20.CameraState>? observer) =>
      (super.noSuchMethod(
        Invocation.method(
          #observe,
          [observer],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> removeObservers() => (super.noSuchMethod(
        Invocation.method(
          #removeObservers,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}

/// A class which mocks [LiveData].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockLiveZoomState extends _i1.Mock
    implements _i7.LiveData<_i21.ZoomState> {
  MockLiveZoomState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.Future<void> observe(_i33.Observer<_i21.ZoomState>? observer) =>
      (super.noSuchMethod(
        Invocation.method(
          #observe,
          [observer],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);

  @override
  _i17.Future<void> removeObservers() => (super.noSuchMethod(
        Invocation.method(
          #removeObservers,
          [],
        ),
        returnValue: _i17.Future<void>.value(),
        returnValueForMissingStub: _i17.Future<void>.value(),
      ) as _i17.Future<void>);
}
