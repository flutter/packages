// Mocks generated by Mockito 5.4.5 from annotations
// in camera_android_camerax/test/android_camera_camerax_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:typed_data' as _i9;

import 'package:camera_android_camerax/src/camerax_library.dart' as _i3;
import 'package:camera_android_camerax/src/camerax_library.g.dart' as _i2;
import 'package:camera_android_camerax/src/camerax_proxy.dart' as _i7;
import 'package:camera_platform_interface/camera_platform_interface.dart'
    as _i4;
import 'package:flutter/services.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePigeonInstanceManager_0 extends _i1.SmartFake
    implements _i2.PigeonInstanceManager {
  _FakePigeonInstanceManager_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAnalyzer_1 extends _i1.SmartFake implements _i2.Analyzer {
  _FakeAnalyzer_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAspectRatioStrategy_2 extends _i1.SmartFake
    implements _i2.AspectRatioStrategy {
  _FakeAspectRatioStrategy_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCameraControl_3 extends _i1.SmartFake implements _i2.CameraControl {
  _FakeCameraControl_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCameraInfo_4 extends _i1.SmartFake implements _i2.CameraInfo {
  _FakeCameraInfo_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCamera_5 extends _i1.SmartFake implements _i2.Camera {
  _FakeCamera_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeExposureState_6 extends _i1.SmartFake implements _i2.ExposureState {
  _FakeExposureState_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLiveData_7<T> extends _i1.SmartFake implements _i3.LiveData<T> {
  _FakeLiveData_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCameraInfo_8 extends _i1.SmartFake implements _i3.CameraInfo {
  _FakeCameraInfo_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCameraCharacteristicsKey_9 extends _i1.SmartFake
    implements _i2.CameraCharacteristicsKey {
  _FakeCameraCharacteristicsKey_9(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCameraSize_10 extends _i1.SmartFake implements _i2.CameraSize {
  _FakeCameraSize_10(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCamera2CameraControl_11 extends _i1.SmartFake
    implements _i2.Camera2CameraControl {
  _FakeCamera2CameraControl_11(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCamera2CameraInfo_12 extends _i1.SmartFake
    implements _i2.Camera2CameraInfo {
  _FakeCamera2CameraInfo_12(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCameraImageFormat_13 extends _i1.SmartFake
    implements _i4.CameraImageFormat {
  _FakeCameraImageFormat_13(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCameraSelector_14 extends _i1.SmartFake
    implements _i2.CameraSelector {
  _FakeCameraSelector_14(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCameraIntegerRange_15 extends _i1.SmartFake
    implements _i2.CameraIntegerRange {
  _FakeCameraIntegerRange_15(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeObserver_16<T1> extends _i1.SmartFake implements _i3.Observer<T1> {
  _FakeObserver_16(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSystemServicesManager_17 extends _i1.SmartFake
    implements _i2.SystemServicesManager {
  _FakeSystemServicesManager_17(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDeviceOrientationManager_18 extends _i1.SmartFake
    implements _i2.DeviceOrientationManager {
  _FakeDeviceOrientationManager_18(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePreview_19 extends _i1.SmartFake implements _i2.Preview {
  _FakePreview_19(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeVideoCapture_20 extends _i1.SmartFake implements _i2.VideoCapture {
  _FakeVideoCapture_20(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRecorder_21 extends _i1.SmartFake implements _i2.Recorder {
  _FakeRecorder_21(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeVideoRecordEventListener_22 extends _i1.SmartFake
    implements _i2.VideoRecordEventListener {
  _FakeVideoRecordEventListener_22(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeImageCapture_23 extends _i1.SmartFake implements _i2.ImageCapture {
  _FakeImageCapture_23(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeResolutionStrategy_24 extends _i1.SmartFake
    implements _i2.ResolutionStrategy {
  _FakeResolutionStrategy_24(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeResolutionSelector_25 extends _i1.SmartFake
    implements _i2.ResolutionSelector {
  _FakeResolutionSelector_25(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeImageAnalysis_26 extends _i1.SmartFake implements _i2.ImageAnalysis {
  _FakeImageAnalysis_26(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQualitySelector_27 extends _i1.SmartFake
    implements _i2.QualitySelector {
  _FakeQualitySelector_27(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFallbackStrategy_28 extends _i1.SmartFake
    implements _i2.FallbackStrategy {
  _FakeFallbackStrategy_28(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFocusMeteringActionBuilder_29 extends _i1.SmartFake
    implements _i2.FocusMeteringActionBuilder {
  _FakeFocusMeteringActionBuilder_29(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCaptureRequestOptions_30 extends _i1.SmartFake
    implements _i2.CaptureRequestOptions {
  _FakeCaptureRequestOptions_30(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeResolutionFilter_31 extends _i1.SmartFake
    implements _i2.ResolutionFilter {
  _FakeResolutionFilter_31(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDisplayOrientedMeteringPointFactory_32 extends _i1.SmartFake
    implements _i2.DisplayOrientedMeteringPointFactory {
  _FakeDisplayOrientedMeteringPointFactory_32(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeProcessCameraProvider_33 extends _i1.SmartFake
    implements _i2.ProcessCameraProvider {
  _FakeProcessCameraProvider_33(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCaptureRequestKey_34 extends _i1.SmartFake
    implements _i2.CaptureRequestKey {
  _FakeCaptureRequestKey_34(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeMeteringPoint_35 extends _i1.SmartFake implements _i2.MeteringPoint {
  _FakeMeteringPoint_35(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFocusMeteringAction_36 extends _i1.SmartFake
    implements _i2.FocusMeteringAction {
  _FakeFocusMeteringAction_36(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFocusMeteringResult_37 extends _i1.SmartFake
    implements _i2.FocusMeteringResult {
  _FakeFocusMeteringResult_37(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeImageProxy_38 extends _i1.SmartFake implements _i2.ImageProxy {
  _FakeImageProxy_38(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeRecording_39 extends _i1.SmartFake implements _i2.Recording {
  _FakeRecording_39(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePendingRecording_40 extends _i1.SmartFake
    implements _i2.PendingRecording {
  _FakePendingRecording_40(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePlaneProxy_41 extends _i1.SmartFake implements _i2.PlaneProxy {
  _FakePlaneProxy_41(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeVideoOutput_42 extends _i1.SmartFake implements _i2.VideoOutput {
  _FakeVideoOutput_42(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeZoomState_43 extends _i1.SmartFake implements _i2.ZoomState {
  _FakeZoomState_43(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [Analyzer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyzer extends _i1.Mock implements _i2.Analyzer {
  @override
  void Function(_i2.Analyzer, _i2.ImageProxy) get analyze =>
      (super.noSuchMethod(
        Invocation.getter(#analyze),
        returnValue: (_i2.Analyzer pigeon_instance, _i2.ImageProxy image) {},
        returnValueForMissingStub:
            (_i2.Analyzer pigeon_instance, _i2.ImageProxy image) {},
      ) as void Function(_i2.Analyzer, _i2.ImageProxy));

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.Analyzer pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeAnalyzer_1(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeAnalyzer_1(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.Analyzer);
}

/// A class which mocks [AspectRatioStrategy].
///
/// See the documentation for Mockito's code generation for more information.
class MockAspectRatioStrategy extends _i1.Mock
    implements _i2.AspectRatioStrategy {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<_i2.AspectRatioStrategyFallbackRule> getFallbackRule() =>
      (super.noSuchMethod(
        Invocation.method(#getFallbackRule, []),
        returnValue: _i5.Future<_i2.AspectRatioStrategyFallbackRule>.value(
          _i2.AspectRatioStrategyFallbackRule.auto,
        ),
        returnValueForMissingStub:
            _i5.Future<_i2.AspectRatioStrategyFallbackRule>.value(
          _i2.AspectRatioStrategyFallbackRule.auto,
        ),
      ) as _i5.Future<_i2.AspectRatioStrategyFallbackRule>);

  @override
  _i5.Future<_i2.AspectRatio> getPreferredAspectRatio() => (super.noSuchMethod(
        Invocation.method(#getPreferredAspectRatio, []),
        returnValue: _i5.Future<_i2.AspectRatio>.value(
          _i2.AspectRatio.ratio16To9,
        ),
        returnValueForMissingStub: _i5.Future<_i2.AspectRatio>.value(
          _i2.AspectRatio.ratio16To9,
        ),
      ) as _i5.Future<_i2.AspectRatio>);

  @override
  _i2.AspectRatioStrategy pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeAspectRatioStrategy_2(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeAspectRatioStrategy_2(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.AspectRatioStrategy);
}

/// A class which mocks [Camera].
///
/// See the documentation for Mockito's code generation for more information.
class MockCamera extends _i1.Mock implements _i2.Camera {
  @override
  _i2.CameraControl get cameraControl => (super.noSuchMethod(
        Invocation.getter(#cameraControl),
        returnValue: _FakeCameraControl_3(
          this,
          Invocation.getter(#cameraControl),
        ),
        returnValueForMissingStub: _FakeCameraControl_3(
          this,
          Invocation.getter(#cameraControl),
        ),
      ) as _i2.CameraControl);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<_i2.CameraInfo> getCameraInfo() => (super.noSuchMethod(
        Invocation.method(#getCameraInfo, []),
        returnValue: _i5.Future<_i2.CameraInfo>.value(
          _FakeCameraInfo_4(this, Invocation.method(#getCameraInfo, [])),
        ),
        returnValueForMissingStub: _i5.Future<_i2.CameraInfo>.value(
          _FakeCameraInfo_4(this, Invocation.method(#getCameraInfo, [])),
        ),
      ) as _i5.Future<_i2.CameraInfo>);

  @override
  _i2.Camera pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeCamera_5(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeCamera_5(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.Camera);
}

/// A class which mocks [CameraInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraInfo extends _i1.Mock implements _i3.CameraInfo {
  @override
  int get sensorRotationDegrees => (super.noSuchMethod(
        Invocation.getter(#sensorRotationDegrees),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.ExposureState get exposureState => (super.noSuchMethod(
        Invocation.getter(#exposureState),
        returnValue: _FakeExposureState_6(
          this,
          Invocation.getter(#exposureState),
        ),
        returnValueForMissingStub: _FakeExposureState_6(
          this,
          Invocation.getter(#exposureState),
        ),
      ) as _i2.ExposureState);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<_i3.LiveData<_i2.CameraState>> getCameraState() =>
      (super.noSuchMethod(
        Invocation.method(#getCameraState, []),
        returnValue: _i5.Future<_i3.LiveData<_i2.CameraState>>.value(
          _FakeLiveData_7<_i2.CameraState>(
            this,
            Invocation.method(#getCameraState, []),
          ),
        ),
        returnValueForMissingStub:
            _i5.Future<_i3.LiveData<_i2.CameraState>>.value(
          _FakeLiveData_7<_i2.CameraState>(
            this,
            Invocation.method(#getCameraState, []),
          ),
        ),
      ) as _i5.Future<_i3.LiveData<_i2.CameraState>>);

  @override
  _i5.Future<_i3.LiveData<_i2.ZoomState>> getZoomState() => (super.noSuchMethod(
        Invocation.method(#getZoomState, []),
        returnValue: _i5.Future<_i3.LiveData<_i2.ZoomState>>.value(
          _FakeLiveData_7<_i2.ZoomState>(
            this,
            Invocation.method(#getZoomState, []),
          ),
        ),
        returnValueForMissingStub:
            _i5.Future<_i3.LiveData<_i2.ZoomState>>.value(
          _FakeLiveData_7<_i2.ZoomState>(
            this,
            Invocation.method(#getZoomState, []),
          ),
        ),
      ) as _i5.Future<_i3.LiveData<_i2.ZoomState>>);

  @override
  _i3.CameraInfo pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeCameraInfo_8(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeCameraInfo_8(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i3.CameraInfo);
}

/// A class which mocks [CameraCharacteristicsKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraCharacteristicsKey extends _i1.Mock
    implements _i2.CameraCharacteristicsKey {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.CameraCharacteristicsKey pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeCameraCharacteristicsKey_9(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeCameraCharacteristicsKey_9(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.CameraCharacteristicsKey);
}

/// A class which mocks [CameraControl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraControl extends _i1.Mock implements _i2.CameraControl {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<void> enableTorch(bool? torch) => (super.noSuchMethod(
        Invocation.method(#enableTorch, [torch]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setZoomRatio(double? ratio) => (super.noSuchMethod(
        Invocation.method(#setZoomRatio, [ratio]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.FocusMeteringResult?> startFocusAndMetering(
    _i2.FocusMeteringAction? action,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#startFocusAndMetering, [action]),
        returnValue: _i5.Future<_i2.FocusMeteringResult?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.FocusMeteringResult?>.value(),
      ) as _i5.Future<_i2.FocusMeteringResult?>);

  @override
  _i5.Future<void> cancelFocusAndMetering() => (super.noSuchMethod(
        Invocation.method(#cancelFocusAndMetering, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int?> setExposureCompensationIndex(int? index) =>
      (super.noSuchMethod(
        Invocation.method(#setExposureCompensationIndex, [index]),
        returnValue: _i5.Future<int?>.value(),
        returnValueForMissingStub: _i5.Future<int?>.value(),
      ) as _i5.Future<int?>);

  @override
  _i2.CameraControl pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeCameraControl_3(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeCameraControl_3(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.CameraControl);
}

/// A class which mocks [CameraSize].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraSize extends _i1.Mock implements _i2.CameraSize {
  @override
  int get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.CameraSize pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeCameraSize_10(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeCameraSize_10(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.CameraSize);
}

/// A class which mocks [Camera2CameraControl].
///
/// See the documentation for Mockito's code generation for more information.
class MockCamera2CameraControl extends _i1.Mock
    implements _i2.Camera2CameraControl {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<void> addCaptureRequestOptions(
    _i2.CaptureRequestOptions? bundle,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#addCaptureRequestOptions, [bundle]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.Camera2CameraControl pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeCamera2CameraControl_11(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeCamera2CameraControl_11(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.Camera2CameraControl);
}

/// A class which mocks [Camera2CameraInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockCamera2CameraInfo extends _i1.Mock implements _i2.Camera2CameraInfo {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<String> getCameraId() => (super.noSuchMethod(
        Invocation.method(#getCameraId, []),
        returnValue: _i5.Future<String>.value(
          _i6.dummyValue<String>(this, Invocation.method(#getCameraId, [])),
        ),
        returnValueForMissingStub: _i5.Future<String>.value(
          _i6.dummyValue<String>(this, Invocation.method(#getCameraId, [])),
        ),
      ) as _i5.Future<String>);

  @override
  _i5.Future<Object?> getCameraCharacteristic(
    _i2.CameraCharacteristicsKey? key,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#getCameraCharacteristic, [key]),
        returnValue: _i5.Future<Object?>.value(),
        returnValueForMissingStub: _i5.Future<Object?>.value(),
      ) as _i5.Future<Object?>);

  @override
  _i2.Camera2CameraInfo pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeCamera2CameraInfo_12(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeCamera2CameraInfo_12(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.Camera2CameraInfo);
}

/// A class which mocks [CameraImageData].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCameraImageData extends _i1.Mock implements _i4.CameraImageData {
  @override
  _i4.CameraImageFormat get format => (super.noSuchMethod(
        Invocation.getter(#format),
        returnValue: _FakeCameraImageFormat_13(
          this,
          Invocation.getter(#format),
        ),
        returnValueForMissingStub: _FakeCameraImageFormat_13(
          this,
          Invocation.getter(#format),
        ),
      ) as _i4.CameraImageFormat);

  @override
  int get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  List<_i4.CameraImagePlane> get planes => (super.noSuchMethod(
        Invocation.getter(#planes),
        returnValue: <_i4.CameraImagePlane>[],
        returnValueForMissingStub: <_i4.CameraImagePlane>[],
      ) as List<_i4.CameraImagePlane>);
}

/// A class which mocks [CameraSelector].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraSelector extends _i1.Mock implements _i2.CameraSelector {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<List<_i2.CameraInfo>> filter(List<_i2.CameraInfo>? cameraInfos) =>
      (super.noSuchMethod(
        Invocation.method(#filter, [cameraInfos]),
        returnValue: _i5.Future<List<_i2.CameraInfo>>.value(
          <_i2.CameraInfo>[],
        ),
        returnValueForMissingStub: _i5.Future<List<_i2.CameraInfo>>.value(
          <_i2.CameraInfo>[],
        ),
      ) as _i5.Future<List<_i2.CameraInfo>>);

  @override
  _i2.CameraSelector pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeCameraSelector_14(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeCameraSelector_14(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.CameraSelector);
}

/// A class which mocks [CameraXProxy].
///
/// See the documentation for Mockito's code generation for more information.
class MockCameraXProxy extends _i1.Mock implements _i7.CameraXProxy {
  @override
  void Function({
    _i8.BinaryMessenger? pigeonBinaryMessenger,
    _i2.PigeonInstanceManager? pigeonInstanceManager,
  }) get setUpGenericsProxy => (super.noSuchMethod(
        Invocation.getter(#setUpGenericsProxy),
        returnValue: ({
          _i8.BinaryMessenger? pigeonBinaryMessenger,
          _i2.PigeonInstanceManager? pigeonInstanceManager,
        }) {},
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeonBinaryMessenger,
          _i2.PigeonInstanceManager? pigeonInstanceManager,
        }) {},
      ) as void Function({
        _i8.BinaryMessenger? pigeonBinaryMessenger,
        _i2.PigeonInstanceManager? pigeonInstanceManager,
      }));

  @override
  _i2.CameraSize Function({
    required int height,
    required int width,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newCameraSize => (super.noSuchMethod(
        Invocation.getter(#newCameraSize),
        returnValue: ({
          required int height,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required int width,
        }) =>
            _FakeCameraSize_10(this, Invocation.getter(#newCameraSize)),
        returnValueForMissingStub: ({
          required int height,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required int width,
        }) =>
            _FakeCameraSize_10(this, Invocation.getter(#newCameraSize)),
      ) as _i2.CameraSize Function({
        required int height,
        required int width,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.CameraIntegerRange Function({
    required int lower,
    required int upper,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newCameraIntegerRange => (super.noSuchMethod(
        Invocation.getter(#newCameraIntegerRange),
        returnValue: ({
          required int lower,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required int upper,
        }) =>
            _FakeCameraIntegerRange_15(
          this,
          Invocation.getter(#newCameraIntegerRange),
        ),
        returnValueForMissingStub: ({
          required int lower,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required int upper,
        }) =>
            _FakeCameraIntegerRange_15(
          this,
          Invocation.getter(#newCameraIntegerRange),
        ),
      ) as _i2.CameraIntegerRange Function({
        required int lower,
        required int upper,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i3.Observer<T> Function<T>({
    required void Function(_i3.Observer<T>, T) onChanged,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newObserver => (super.noSuchMethod(
        Invocation.getter(#newObserver),
        returnValue: <T>({
          required void Function(_i3.Observer<T>, T) onChanged,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeObserver_16<T>(this, Invocation.getter(#newObserver)),
        returnValueForMissingStub: <T>({
          required void Function(_i3.Observer<T>, T) onChanged,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeObserver_16<T>(this, Invocation.getter(#newObserver)),
      ) as _i3.Observer<T> Function<T>({
        required void Function(_i3.Observer<T>, T) onChanged,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.CameraSelector Function({
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
    _i2.LensFacing? requireLensFacing,
  }) get newCameraSelector => (super.noSuchMethod(
        Invocation.getter(#newCameraSelector),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.LensFacing? requireLensFacing,
        }) =>
            _FakeCameraSelector_14(
          this,
          Invocation.getter(#newCameraSelector),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.LensFacing? requireLensFacing,
        }) =>
            _FakeCameraSelector_14(
          this,
          Invocation.getter(#newCameraSelector),
        ),
      ) as _i2.CameraSelector Function({
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
        _i2.LensFacing? requireLensFacing,
      }));

  @override
  _i2.SystemServicesManager Function({
    required void Function(_i2.SystemServicesManager, String) onCameraError,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newSystemServicesManager => (super.noSuchMethod(
        Invocation.getter(#newSystemServicesManager),
        returnValue: ({
          required void Function(_i2.SystemServicesManager, String)
              onCameraError,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeSystemServicesManager_17(
          this,
          Invocation.getter(#newSystemServicesManager),
        ),
        returnValueForMissingStub: ({
          required void Function(_i2.SystemServicesManager, String)
              onCameraError,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeSystemServicesManager_17(
          this,
          Invocation.getter(#newSystemServicesManager),
        ),
      ) as _i2.SystemServicesManager Function({
        required void Function(_i2.SystemServicesManager, String) onCameraError,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.DeviceOrientationManager Function({
    required void Function(_i2.DeviceOrientationManager, String)
        onDeviceOrientationChanged,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newDeviceOrientationManager => (super.noSuchMethod(
        Invocation.getter(#newDeviceOrientationManager),
        returnValue: ({
          required void Function(_i2.DeviceOrientationManager, String)
              onDeviceOrientationChanged,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeDeviceOrientationManager_18(
          this,
          Invocation.getter(#newDeviceOrientationManager),
        ),
        returnValueForMissingStub: ({
          required void Function(_i2.DeviceOrientationManager, String)
              onDeviceOrientationChanged,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeDeviceOrientationManager_18(
          this,
          Invocation.getter(#newDeviceOrientationManager),
        ),
      ) as _i2.DeviceOrientationManager Function({
        required void Function(_i2.DeviceOrientationManager, String)
            onDeviceOrientationChanged,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.Preview Function({
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
    _i2.ResolutionSelector? resolutionSelector,
    int? targetRotation,
  }) get newPreview => (super.noSuchMethod(
        Invocation.getter(#newPreview),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.ResolutionSelector? resolutionSelector,
          int? targetRotation,
        }) =>
            _FakePreview_19(this, Invocation.getter(#newPreview)),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.ResolutionSelector? resolutionSelector,
          int? targetRotation,
        }) =>
            _FakePreview_19(this, Invocation.getter(#newPreview)),
      ) as _i2.Preview Function({
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
        _i2.ResolutionSelector? resolutionSelector,
        int? targetRotation,
      }));

  @override
  _i2.VideoCapture Function({
    required _i2.VideoOutput videoOutput,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get withOutputVideoCapture => (super.noSuchMethod(
        Invocation.getter(#withOutputVideoCapture),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoOutput videoOutput,
        }) =>
            _FakeVideoCapture_20(
          this,
          Invocation.getter(#withOutputVideoCapture),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoOutput videoOutput,
        }) =>
            _FakeVideoCapture_20(
          this,
          Invocation.getter(#withOutputVideoCapture),
        ),
      ) as _i2.VideoCapture Function({
        required _i2.VideoOutput videoOutput,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.Recorder Function({
    int? aspectRatio,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
    _i2.QualitySelector? qualitySelector,
    int? targetVideoEncodingBitRate,
  }) get newRecorder => (super.noSuchMethod(
        Invocation.getter(#newRecorder),
        returnValue: ({
          int? aspectRatio,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.QualitySelector? qualitySelector,
          int? targetVideoEncodingBitRate,
        }) =>
            _FakeRecorder_21(this, Invocation.getter(#newRecorder)),
        returnValueForMissingStub: ({
          int? aspectRatio,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.QualitySelector? qualitySelector,
          int? targetVideoEncodingBitRate,
        }) =>
            _FakeRecorder_21(this, Invocation.getter(#newRecorder)),
      ) as _i2.Recorder Function({
        int? aspectRatio,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
        _i2.QualitySelector? qualitySelector,
        int? targetVideoEncodingBitRate,
      }));

  @override
  _i2.VideoRecordEventListener Function({
    required void Function(_i2.VideoRecordEventListener, _i2.VideoRecordEvent)
        onEvent,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newVideoRecordEventListener => (super.noSuchMethod(
        Invocation.getter(#newVideoRecordEventListener),
        returnValue: ({
          required void Function(
            _i2.VideoRecordEventListener,
            _i2.VideoRecordEvent,
          ) onEvent,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeVideoRecordEventListener_22(
          this,
          Invocation.getter(#newVideoRecordEventListener),
        ),
        returnValueForMissingStub: ({
          required void Function(
            _i2.VideoRecordEventListener,
            _i2.VideoRecordEvent,
          ) onEvent,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeVideoRecordEventListener_22(
          this,
          Invocation.getter(#newVideoRecordEventListener),
        ),
      ) as _i2.VideoRecordEventListener Function({
        required void Function(
          _i2.VideoRecordEventListener,
          _i2.VideoRecordEvent,
        ) onEvent,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.ImageCapture Function({
    _i2.CameraXFlashMode? flashMode,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
    _i2.ResolutionSelector? resolutionSelector,
    int? targetRotation,
  }) get newImageCapture => (super.noSuchMethod(
        Invocation.getter(#newImageCapture),
        returnValue: ({
          _i2.CameraXFlashMode? flashMode,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.ResolutionSelector? resolutionSelector,
          int? targetRotation,
        }) =>
            _FakeImageCapture_23(
          this,
          Invocation.getter(#newImageCapture),
        ),
        returnValueForMissingStub: ({
          _i2.CameraXFlashMode? flashMode,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.ResolutionSelector? resolutionSelector,
          int? targetRotation,
        }) =>
            _FakeImageCapture_23(
          this,
          Invocation.getter(#newImageCapture),
        ),
      ) as _i2.ImageCapture Function({
        _i2.CameraXFlashMode? flashMode,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
        _i2.ResolutionSelector? resolutionSelector,
        int? targetRotation,
      }));

  @override
  _i2.ResolutionStrategy Function({
    required _i2.CameraSize boundSize,
    required _i2.ResolutionStrategyFallbackRule fallbackRule,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newResolutionStrategy => (super.noSuchMethod(
        Invocation.getter(#newResolutionStrategy),
        returnValue: ({
          required _i2.CameraSize boundSize,
          required _i2.ResolutionStrategyFallbackRule fallbackRule,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeResolutionStrategy_24(
          this,
          Invocation.getter(#newResolutionStrategy),
        ),
        returnValueForMissingStub: ({
          required _i2.CameraSize boundSize,
          required _i2.ResolutionStrategyFallbackRule fallbackRule,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeResolutionStrategy_24(
          this,
          Invocation.getter(#newResolutionStrategy),
        ),
      ) as _i2.ResolutionStrategy Function({
        required _i2.CameraSize boundSize,
        required _i2.ResolutionStrategyFallbackRule fallbackRule,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.ResolutionSelector Function({
    _i2.AspectRatioStrategy? aspectRatioStrategy,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
    _i2.ResolutionFilter? resolutionFilter,
    _i2.ResolutionStrategy? resolutionStrategy,
  }) get newResolutionSelector => (super.noSuchMethod(
        Invocation.getter(#newResolutionSelector),
        returnValue: ({
          _i2.AspectRatioStrategy? aspectRatioStrategy,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.ResolutionFilter? resolutionFilter,
          _i2.ResolutionStrategy? resolutionStrategy,
        }) =>
            _FakeResolutionSelector_25(
          this,
          Invocation.getter(#newResolutionSelector),
        ),
        returnValueForMissingStub: ({
          _i2.AspectRatioStrategy? aspectRatioStrategy,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.ResolutionFilter? resolutionFilter,
          _i2.ResolutionStrategy? resolutionStrategy,
        }) =>
            _FakeResolutionSelector_25(
          this,
          Invocation.getter(#newResolutionSelector),
        ),
      ) as _i2.ResolutionSelector Function({
        _i2.AspectRatioStrategy? aspectRatioStrategy,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
        _i2.ResolutionFilter? resolutionFilter,
        _i2.ResolutionStrategy? resolutionStrategy,
      }));

  @override
  _i2.AspectRatioStrategy Function({
    required _i2.AspectRatioStrategyFallbackRule fallbackRule,
    required _i2.AspectRatio preferredAspectRatio,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newAspectRatioStrategy => (super.noSuchMethod(
        Invocation.getter(#newAspectRatioStrategy),
        returnValue: ({
          required _i2.AspectRatioStrategyFallbackRule fallbackRule,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.AspectRatio preferredAspectRatio,
        }) =>
            _FakeAspectRatioStrategy_2(
          this,
          Invocation.getter(#newAspectRatioStrategy),
        ),
        returnValueForMissingStub: ({
          required _i2.AspectRatioStrategyFallbackRule fallbackRule,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.AspectRatio preferredAspectRatio,
        }) =>
            _FakeAspectRatioStrategy_2(
          this,
          Invocation.getter(#newAspectRatioStrategy),
        ),
      ) as _i2.AspectRatioStrategy Function({
        required _i2.AspectRatioStrategyFallbackRule fallbackRule,
        required _i2.AspectRatio preferredAspectRatio,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.ImageAnalysis Function({
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
    _i2.ResolutionSelector? resolutionSelector,
    int? targetRotation,
  }) get newImageAnalysis => (super.noSuchMethod(
        Invocation.getter(#newImageAnalysis),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.ResolutionSelector? resolutionSelector,
          int? targetRotation,
        }) =>
            _FakeImageAnalysis_26(
          this,
          Invocation.getter(#newImageAnalysis),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          _i2.ResolutionSelector? resolutionSelector,
          int? targetRotation,
        }) =>
            _FakeImageAnalysis_26(
          this,
          Invocation.getter(#newImageAnalysis),
        ),
      ) as _i2.ImageAnalysis Function({
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
        _i2.ResolutionSelector? resolutionSelector,
        int? targetRotation,
      }));

  @override
  _i2.Analyzer Function({
    required void Function(_i2.Analyzer, _i2.ImageProxy) analyze,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newAnalyzer => (super.noSuchMethod(
        Invocation.getter(#newAnalyzer),
        returnValue: ({
          required void Function(_i2.Analyzer, _i2.ImageProxy) analyze,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeAnalyzer_1(this, Invocation.getter(#newAnalyzer)),
        returnValueForMissingStub: ({
          required void Function(_i2.Analyzer, _i2.ImageProxy) analyze,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeAnalyzer_1(this, Invocation.getter(#newAnalyzer)),
      ) as _i2.Analyzer Function({
        required void Function(_i2.Analyzer, _i2.ImageProxy) analyze,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.QualitySelector Function({
    required _i2.VideoQuality quality,
    _i2.FallbackStrategy? fallbackStrategy,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get fromQualitySelector => (super.noSuchMethod(
        Invocation.getter(#fromQualitySelector),
        returnValue: ({
          _i2.FallbackStrategy? fallbackStrategy,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeQualitySelector_27(
          this,
          Invocation.getter(#fromQualitySelector),
        ),
        returnValueForMissingStub: ({
          _i2.FallbackStrategy? fallbackStrategy,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeQualitySelector_27(
          this,
          Invocation.getter(#fromQualitySelector),
        ),
      ) as _i2.QualitySelector Function({
        required _i2.VideoQuality quality,
        _i2.FallbackStrategy? fallbackStrategy,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.QualitySelector Function({
    required List<_i2.VideoQuality> qualities,
    _i2.FallbackStrategy? fallbackStrategy,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get fromOrderedListQualitySelector => (super.noSuchMethod(
        Invocation.getter(#fromOrderedListQualitySelector),
        returnValue: ({
          _i2.FallbackStrategy? fallbackStrategy,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required List<_i2.VideoQuality> qualities,
        }) =>
            _FakeQualitySelector_27(
          this,
          Invocation.getter(#fromOrderedListQualitySelector),
        ),
        returnValueForMissingStub: ({
          _i2.FallbackStrategy? fallbackStrategy,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required List<_i2.VideoQuality> qualities,
        }) =>
            _FakeQualitySelector_27(
          this,
          Invocation.getter(#fromOrderedListQualitySelector),
        ),
      ) as _i2.QualitySelector Function({
        required List<_i2.VideoQuality> qualities,
        _i2.FallbackStrategy? fallbackStrategy,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.FallbackStrategy Function({
    required _i2.VideoQuality quality,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get higherQualityOrLowerThanFallbackStrategy => (super.noSuchMethod(
        Invocation.getter(#higherQualityOrLowerThanFallbackStrategy),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeFallbackStrategy_28(
          this,
          Invocation.getter(#higherQualityOrLowerThanFallbackStrategy),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeFallbackStrategy_28(
          this,
          Invocation.getter(#higherQualityOrLowerThanFallbackStrategy),
        ),
      ) as _i2.FallbackStrategy Function({
        required _i2.VideoQuality quality,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.FallbackStrategy Function({
    required _i2.VideoQuality quality,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get higherQualityThanFallbackStrategy => (super.noSuchMethod(
        Invocation.getter(#higherQualityThanFallbackStrategy),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeFallbackStrategy_28(
          this,
          Invocation.getter(#higherQualityThanFallbackStrategy),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeFallbackStrategy_28(
          this,
          Invocation.getter(#higherQualityThanFallbackStrategy),
        ),
      ) as _i2.FallbackStrategy Function({
        required _i2.VideoQuality quality,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.FallbackStrategy Function({
    required _i2.VideoQuality quality,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get lowerQualityOrHigherThanFallbackStrategy => (super.noSuchMethod(
        Invocation.getter(#lowerQualityOrHigherThanFallbackStrategy),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeFallbackStrategy_28(
          this,
          Invocation.getter(#lowerQualityOrHigherThanFallbackStrategy),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeFallbackStrategy_28(
          this,
          Invocation.getter(#lowerQualityOrHigherThanFallbackStrategy),
        ),
      ) as _i2.FallbackStrategy Function({
        required _i2.VideoQuality quality,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.FallbackStrategy Function({
    required _i2.VideoQuality quality,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get lowerQualityThanFallbackStrategy => (super.noSuchMethod(
        Invocation.getter(#lowerQualityThanFallbackStrategy),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeFallbackStrategy_28(
          this,
          Invocation.getter(#lowerQualityThanFallbackStrategy),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.VideoQuality quality,
        }) =>
            _FakeFallbackStrategy_28(
          this,
          Invocation.getter(#lowerQualityThanFallbackStrategy),
        ),
      ) as _i2.FallbackStrategy Function({
        required _i2.VideoQuality quality,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.FocusMeteringActionBuilder Function({
    required _i2.MeteringPoint point,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newFocusMeteringActionBuilder => (super.noSuchMethod(
        Invocation.getter(#newFocusMeteringActionBuilder),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.MeteringPoint point,
        }) =>
            _FakeFocusMeteringActionBuilder_29(
          this,
          Invocation.getter(#newFocusMeteringActionBuilder),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.MeteringPoint point,
        }) =>
            _FakeFocusMeteringActionBuilder_29(
          this,
          Invocation.getter(#newFocusMeteringActionBuilder),
        ),
      ) as _i2.FocusMeteringActionBuilder Function({
        required _i2.MeteringPoint point,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.FocusMeteringActionBuilder Function({
    required _i2.MeteringMode mode,
    required _i2.MeteringPoint point,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get withModeFocusMeteringActionBuilder => (super.noSuchMethod(
        Invocation.getter(#withModeFocusMeteringActionBuilder),
        returnValue: ({
          required _i2.MeteringMode mode,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.MeteringPoint point,
        }) =>
            _FakeFocusMeteringActionBuilder_29(
          this,
          Invocation.getter(#withModeFocusMeteringActionBuilder),
        ),
        returnValueForMissingStub: ({
          required _i2.MeteringMode mode,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.MeteringPoint point,
        }) =>
            _FakeFocusMeteringActionBuilder_29(
          this,
          Invocation.getter(#withModeFocusMeteringActionBuilder),
        ),
      ) as _i2.FocusMeteringActionBuilder Function({
        required _i2.MeteringMode mode,
        required _i2.MeteringPoint point,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  set withModeFocusMeteringActionBuilder(
    _i2.FocusMeteringActionBuilder Function({
      required _i2.MeteringMode mode,
      required _i2.MeteringPoint point,
      _i8.BinaryMessenger? pigeon_binaryMessenger,
      _i2.PigeonInstanceManager? pigeon_instanceManager,
    })? _withModeFocusMeteringActionBuilder,
  ) =>
      super.noSuchMethod(
        Invocation.setter(
          #withModeFocusMeteringActionBuilder,
          _withModeFocusMeteringActionBuilder,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.CaptureRequestOptions Function({
    required Map<_i2.CaptureRequestKey, Object?> options,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newCaptureRequestOptions => (super.noSuchMethod(
        Invocation.getter(#newCaptureRequestOptions),
        returnValue: ({
          required Map<_i2.CaptureRequestKey, Object?> options,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeCaptureRequestOptions_30(
          this,
          Invocation.getter(#newCaptureRequestOptions),
        ),
        returnValueForMissingStub: ({
          required Map<_i2.CaptureRequestKey, Object?> options,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeCaptureRequestOptions_30(
          this,
          Invocation.getter(#newCaptureRequestOptions),
        ),
      ) as _i2.CaptureRequestOptions Function({
        required Map<_i2.CaptureRequestKey, Object?> options,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  set newCaptureRequestOptions(
    _i2.CaptureRequestOptions Function({
      required Map<_i2.CaptureRequestKey, Object?> options,
      _i8.BinaryMessenger? pigeon_binaryMessenger,
      _i2.PigeonInstanceManager? pigeon_instanceManager,
    })? _newCaptureRequestOptions,
  ) =>
      super.noSuchMethod(
        Invocation.setter(#newCaptureRequestOptions, _newCaptureRequestOptions),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Camera2CameraControl Function({
    required _i2.CameraControl cameraControl,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get fromCamera2CameraControl => (super.noSuchMethod(
        Invocation.getter(#fromCamera2CameraControl),
        returnValue: ({
          required _i2.CameraControl cameraControl,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeCamera2CameraControl_11(
          this,
          Invocation.getter(#fromCamera2CameraControl),
        ),
        returnValueForMissingStub: ({
          required _i2.CameraControl cameraControl,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeCamera2CameraControl_11(
          this,
          Invocation.getter(#fromCamera2CameraControl),
        ),
      ) as _i2.Camera2CameraControl Function({
        required _i2.CameraControl cameraControl,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  set fromCamera2CameraControl(
    _i2.Camera2CameraControl Function({
      required _i2.CameraControl cameraControl,
      _i8.BinaryMessenger? pigeon_binaryMessenger,
      _i2.PigeonInstanceManager? pigeon_instanceManager,
    })? _fromCamera2CameraControl,
  ) =>
      super.noSuchMethod(
        Invocation.setter(#fromCamera2CameraControl, _fromCamera2CameraControl),
        returnValueForMissingStub: null,
      );

  @override
  _i2.ResolutionFilter Function({
    required _i2.CameraSize preferredSize,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get createWithOnePreferredSizeResolutionFilter => (super.noSuchMethod(
        Invocation.getter(#createWithOnePreferredSizeResolutionFilter),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.CameraSize preferredSize,
        }) =>
            _FakeResolutionFilter_31(
          this,
          Invocation.getter(
            #createWithOnePreferredSizeResolutionFilter,
          ),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required _i2.CameraSize preferredSize,
        }) =>
            _FakeResolutionFilter_31(
          this,
          Invocation.getter(
            #createWithOnePreferredSizeResolutionFilter,
          ),
        ),
      ) as _i2.ResolutionFilter Function({
        required _i2.CameraSize preferredSize,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.Camera2CameraInfo Function({
    required _i3.CameraInfo cameraInfo,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get fromCamera2CameraInfo => (super.noSuchMethod(
        Invocation.getter(#fromCamera2CameraInfo),
        returnValue: ({
          required _i3.CameraInfo cameraInfo,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeCamera2CameraInfo_12(
          this,
          Invocation.getter(#fromCamera2CameraInfo),
        ),
        returnValueForMissingStub: ({
          required _i3.CameraInfo cameraInfo,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _FakeCamera2CameraInfo_12(
          this,
          Invocation.getter(#fromCamera2CameraInfo),
        ),
      ) as _i2.Camera2CameraInfo Function({
        required _i3.CameraInfo cameraInfo,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.DisplayOrientedMeteringPointFactory Function({
    required _i3.CameraInfo cameraInfo,
    required double height,
    required double width,
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get newDisplayOrientedMeteringPointFactory => (super.noSuchMethod(
        Invocation.getter(#newDisplayOrientedMeteringPointFactory),
        returnValue: ({
          required _i3.CameraInfo cameraInfo,
          required double height,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required double width,
        }) =>
            _FakeDisplayOrientedMeteringPointFactory_32(
          this,
          Invocation.getter(#newDisplayOrientedMeteringPointFactory),
        ),
        returnValueForMissingStub: ({
          required _i3.CameraInfo cameraInfo,
          required double height,
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
          required double width,
        }) =>
            _FakeDisplayOrientedMeteringPointFactory_32(
          this,
          Invocation.getter(#newDisplayOrientedMeteringPointFactory),
        ),
      ) as _i2.DisplayOrientedMeteringPointFactory Function({
        required _i3.CameraInfo cameraInfo,
        required double height,
        required double width,
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  set newDisplayOrientedMeteringPointFactory(
    _i2.DisplayOrientedMeteringPointFactory Function({
      required _i3.CameraInfo cameraInfo,
      required double height,
      required double width,
      _i8.BinaryMessenger? pigeon_binaryMessenger,
      _i2.PigeonInstanceManager? pigeon_instanceManager,
    })? _newDisplayOrientedMeteringPointFactory,
  ) =>
      super.noSuchMethod(
        Invocation.setter(
          #newDisplayOrientedMeteringPointFactory,
          _newDisplayOrientedMeteringPointFactory,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i2.ProcessCameraProvider> Function({
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get getInstanceProcessCameraProvider => (super.noSuchMethod(
        Invocation.getter(#getInstanceProcessCameraProvider),
        returnValue: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _i5.Future<_i2.ProcessCameraProvider>.value(
          _FakeProcessCameraProvider_33(
            this,
            Invocation.getter(#getInstanceProcessCameraProvider),
          ),
        ),
        returnValueForMissingStub: ({
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _i5.Future<_i2.ProcessCameraProvider>.value(
          _FakeProcessCameraProvider_33(
            this,
            Invocation.getter(#getInstanceProcessCameraProvider),
          ),
        ),
      ) as _i5.Future<_i2.ProcessCameraProvider> Function({
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i5.Future<_i2.CameraSize?> Function(
    _i3.CameraInfo,
    _i2.VideoQuality, {
    _i8.BinaryMessenger? pigeon_binaryMessenger,
    _i2.PigeonInstanceManager? pigeon_instanceManager,
  }) get getResolutionQualitySelector => (super.noSuchMethod(
        Invocation.getter(#getResolutionQualitySelector),
        returnValue: (
          _i3.CameraInfo __p0,
          _i2.VideoQuality __p1, {
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _i5.Future<_i2.CameraSize?>.value(),
        returnValueForMissingStub: (
          _i3.CameraInfo __p0,
          _i2.VideoQuality __p1, {
          _i8.BinaryMessenger? pigeon_binaryMessenger,
          _i2.PigeonInstanceManager? pigeon_instanceManager,
        }) =>
            _i5.Future<_i2.CameraSize?>.value(),
      ) as _i5.Future<_i2.CameraSize?> Function(
        _i3.CameraInfo,
        _i2.VideoQuality, {
        _i8.BinaryMessenger? pigeon_binaryMessenger,
        _i2.PigeonInstanceManager? pigeon_instanceManager,
      }));

  @override
  _i2.CameraSelector Function() get defaultBackCameraCameraSelector =>
      (super.noSuchMethod(
        Invocation.getter(#defaultBackCameraCameraSelector),
        returnValue: () => _FakeCameraSelector_14(
          this,
          Invocation.getter(#defaultBackCameraCameraSelector),
        ),
        returnValueForMissingStub: () => _FakeCameraSelector_14(
          this,
          Invocation.getter(#defaultBackCameraCameraSelector),
        ),
      ) as _i2.CameraSelector Function());

  @override
  _i2.CameraSelector Function() get defaultFrontCameraCameraSelector =>
      (super.noSuchMethod(
        Invocation.getter(#defaultFrontCameraCameraSelector),
        returnValue: () => _FakeCameraSelector_14(
          this,
          Invocation.getter(#defaultFrontCameraCameraSelector),
        ),
        returnValueForMissingStub: () => _FakeCameraSelector_14(
          this,
          Invocation.getter(#defaultFrontCameraCameraSelector),
        ),
      ) as _i2.CameraSelector Function());

  @override
  _i2.ResolutionStrategy Function()
      get highestAvailableStrategyResolutionStrategy => (super.noSuchMethod(
            Invocation.getter(#highestAvailableStrategyResolutionStrategy),
            returnValue: () => _FakeResolutionStrategy_24(
              this,
              Invocation.getter(
                #highestAvailableStrategyResolutionStrategy,
              ),
            ),
            returnValueForMissingStub: () => _FakeResolutionStrategy_24(
              this,
              Invocation.getter(
                #highestAvailableStrategyResolutionStrategy,
              ),
            ),
          ) as _i2.ResolutionStrategy Function());

  @override
  _i2.AspectRatioStrategy Function()
      get ratio_16_9FallbackAutoStrategyAspectRatioStrategy =>
          (super.noSuchMethod(
            Invocation.getter(
              #ratio_16_9FallbackAutoStrategyAspectRatioStrategy,
            ),
            returnValue: () => _FakeAspectRatioStrategy_2(
              this,
              Invocation.getter(
                #ratio_16_9FallbackAutoStrategyAspectRatioStrategy,
              ),
            ),
            returnValueForMissingStub: () => _FakeAspectRatioStrategy_2(
              this,
              Invocation.getter(
                #ratio_16_9FallbackAutoStrategyAspectRatioStrategy,
              ),
            ),
          ) as _i2.AspectRatioStrategy Function());

  @override
  _i2.AspectRatioStrategy Function()
      get ratio_4_3FallbackAutoStrategyAspectRatioStrategy =>
          (super.noSuchMethod(
            Invocation.getter(
              #ratio_4_3FallbackAutoStrategyAspectRatioStrategy,
            ),
            returnValue: () => _FakeAspectRatioStrategy_2(
              this,
              Invocation.getter(
                #ratio_4_3FallbackAutoStrategyAspectRatioStrategy,
              ),
            ),
            returnValueForMissingStub: () => _FakeAspectRatioStrategy_2(
              this,
              Invocation.getter(
                #ratio_4_3FallbackAutoStrategyAspectRatioStrategy,
              ),
            ),
          ) as _i2.AspectRatioStrategy Function());

  @override
  _i2.CaptureRequestKey Function() get controlAELockCaptureRequest =>
      (super.noSuchMethod(
        Invocation.getter(#controlAELockCaptureRequest),
        returnValue: () => _FakeCaptureRequestKey_34(
          this,
          Invocation.getter(#controlAELockCaptureRequest),
        ),
        returnValueForMissingStub: () => _FakeCaptureRequestKey_34(
          this,
          Invocation.getter(#controlAELockCaptureRequest),
        ),
      ) as _i2.CaptureRequestKey Function());

  @override
  set controlAELockCaptureRequest(
    _i2.CaptureRequestKey Function()? _controlAELockCaptureRequest,
  ) =>
      super.noSuchMethod(
        Invocation.setter(
          #controlAELockCaptureRequest,
          _controlAELockCaptureRequest,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.CameraCharacteristicsKey Function()
      get infoSupportedHardwareLevelCameraCharacteristics =>
          (super.noSuchMethod(
            Invocation.getter(#infoSupportedHardwareLevelCameraCharacteristics),
            returnValue: () => _FakeCameraCharacteristicsKey_9(
              this,
              Invocation.getter(
                #infoSupportedHardwareLevelCameraCharacteristics,
              ),
            ),
            returnValueForMissingStub: () => _FakeCameraCharacteristicsKey_9(
              this,
              Invocation.getter(
                #infoSupportedHardwareLevelCameraCharacteristics,
              ),
            ),
          ) as _i2.CameraCharacteristicsKey Function());

  @override
  _i2.CameraCharacteristicsKey Function()
      get sensorOrientationCameraCharacteristics => (super.noSuchMethod(
            Invocation.getter(#sensorOrientationCameraCharacteristics),
            returnValue: () => _FakeCameraCharacteristicsKey_9(
              this,
              Invocation.getter(#sensorOrientationCameraCharacteristics),
            ),
            returnValueForMissingStub: () => _FakeCameraCharacteristicsKey_9(
              this,
              Invocation.getter(#sensorOrientationCameraCharacteristics),
            ),
          ) as _i2.CameraCharacteristicsKey Function());
}

/// A class which mocks [CaptureRequestOptions].
///
/// See the documentation for Mockito's code generation for more information.
class MockCaptureRequestOptions extends _i1.Mock
    implements _i2.CaptureRequestOptions {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<Object?> getCaptureRequestOption(_i2.CaptureRequestKey? key) =>
      (super.noSuchMethod(
        Invocation.method(#getCaptureRequestOption, [key]),
        returnValue: _i5.Future<Object?>.value(),
        returnValueForMissingStub: _i5.Future<Object?>.value(),
      ) as _i5.Future<Object?>);

  @override
  _i2.CaptureRequestOptions pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeCaptureRequestOptions_30(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeCaptureRequestOptions_30(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.CaptureRequestOptions);
}

/// A class which mocks [DeviceOrientationManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceOrientationManager extends _i1.Mock
    implements _i2.DeviceOrientationManager {
  @override
  void Function(_i2.DeviceOrientationManager, String)
      get onDeviceOrientationChanged => (super.noSuchMethod(
            Invocation.getter(#onDeviceOrientationChanged),
            returnValue: (
              _i2.DeviceOrientationManager pigeon_instance,
              String orientation,
            ) {},
            returnValueForMissingStub: (
              _i2.DeviceOrientationManager pigeon_instance,
              String orientation,
            ) {},
          ) as void Function(_i2.DeviceOrientationManager, String));

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<void> startListeningForDeviceOrientationChange(
    bool? isFrontFacing,
    int? sensorOrientation,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#startListeningForDeviceOrientationChange, [
          isFrontFacing,
          sensorOrientation,
        ]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> stopListeningForDeviceOrientationChange() =>
      (super.noSuchMethod(
        Invocation.method(#stopListeningForDeviceOrientationChange, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<int> getDefaultDisplayRotation() => (super.noSuchMethod(
        Invocation.method(#getDefaultDisplayRotation, []),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<String> getUiOrientation() => (super.noSuchMethod(
        Invocation.method(#getUiOrientation, []),
        returnValue: _i5.Future<String>.value(
          _i6.dummyValue<String>(
            this,
            Invocation.method(#getUiOrientation, []),
          ),
        ),
        returnValueForMissingStub: _i5.Future<String>.value(
          _i6.dummyValue<String>(
            this,
            Invocation.method(#getUiOrientation, []),
          ),
        ),
      ) as _i5.Future<String>);

  @override
  _i2.DeviceOrientationManager pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeDeviceOrientationManager_18(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeDeviceOrientationManager_18(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.DeviceOrientationManager);
}

/// A class which mocks [DisplayOrientedMeteringPointFactory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDisplayOrientedMeteringPointFactory extends _i1.Mock
    implements _i2.DisplayOrientedMeteringPointFactory {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.DisplayOrientedMeteringPointFactory pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeDisplayOrientedMeteringPointFactory_32(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeDisplayOrientedMeteringPointFactory_32(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.DisplayOrientedMeteringPointFactory);

  @override
  _i5.Future<_i2.MeteringPoint> createPoint(double? x, double? y) =>
      (super.noSuchMethod(
        Invocation.method(#createPoint, [x, y]),
        returnValue: _i5.Future<_i2.MeteringPoint>.value(
          _FakeMeteringPoint_35(
            this,
            Invocation.method(#createPoint, [x, y]),
          ),
        ),
        returnValueForMissingStub: _i5.Future<_i2.MeteringPoint>.value(
          _FakeMeteringPoint_35(
            this,
            Invocation.method(#createPoint, [x, y]),
          ),
        ),
      ) as _i5.Future<_i2.MeteringPoint>);

  @override
  _i5.Future<_i2.MeteringPoint> createPointWithSize(
    double? x,
    double? y,
    double? size,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#createPointWithSize, [x, y, size]),
        returnValue: _i5.Future<_i2.MeteringPoint>.value(
          _FakeMeteringPoint_35(
            this,
            Invocation.method(#createPointWithSize, [x, y, size]),
          ),
        ),
        returnValueForMissingStub: _i5.Future<_i2.MeteringPoint>.value(
          _FakeMeteringPoint_35(
            this,
            Invocation.method(#createPointWithSize, [x, y, size]),
          ),
        ),
      ) as _i5.Future<_i2.MeteringPoint>);
}

/// A class which mocks [ExposureState].
///
/// See the documentation for Mockito's code generation for more information.
class MockExposureState extends _i1.Mock implements _i2.ExposureState {
  @override
  _i2.CameraIntegerRange get exposureCompensationRange => (super.noSuchMethod(
        Invocation.getter(#exposureCompensationRange),
        returnValue: _FakeCameraIntegerRange_15(
          this,
          Invocation.getter(#exposureCompensationRange),
        ),
        returnValueForMissingStub: _FakeCameraIntegerRange_15(
          this,
          Invocation.getter(#exposureCompensationRange),
        ),
      ) as _i2.CameraIntegerRange);

  @override
  double get exposureCompensationStep => (super.noSuchMethod(
        Invocation.getter(#exposureCompensationStep),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.ExposureState pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeExposureState_6(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeExposureState_6(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.ExposureState);
}

/// A class which mocks [FallbackStrategy].
///
/// See the documentation for Mockito's code generation for more information.
class MockFallbackStrategy extends _i1.Mock implements _i2.FallbackStrategy {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.FallbackStrategy pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeFallbackStrategy_28(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeFallbackStrategy_28(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.FallbackStrategy);
}

/// A class which mocks [FocusMeteringActionBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockFocusMeteringActionBuilder extends _i1.Mock
    implements _i2.FocusMeteringActionBuilder {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<void> addPoint(_i2.MeteringPoint? point) => (super.noSuchMethod(
        Invocation.method(#addPoint, [point]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> addPointWithMode(
    _i2.MeteringPoint? point,
    _i2.MeteringMode? mode,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#addPointWithMode, [point, mode]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> disableAutoCancel() => (super.noSuchMethod(
        Invocation.method(#disableAutoCancel, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.FocusMeteringAction> build() => (super.noSuchMethod(
        Invocation.method(#build, []),
        returnValue: _i5.Future<_i2.FocusMeteringAction>.value(
          _FakeFocusMeteringAction_36(this, Invocation.method(#build, [])),
        ),
        returnValueForMissingStub: _i5.Future<_i2.FocusMeteringAction>.value(
          _FakeFocusMeteringAction_36(
            this,
            Invocation.method(#build, []),
          ),
        ),
      ) as _i5.Future<_i2.FocusMeteringAction>);

  @override
  _i2.FocusMeteringActionBuilder pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeFocusMeteringActionBuilder_29(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeFocusMeteringActionBuilder_29(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.FocusMeteringActionBuilder);
}

/// A class which mocks [FocusMeteringResult].
///
/// See the documentation for Mockito's code generation for more information.
class MockFocusMeteringResult extends _i1.Mock
    implements _i2.FocusMeteringResult {
  @override
  bool get isFocusSuccessful => (super.noSuchMethod(
        Invocation.getter(#isFocusSuccessful),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.FocusMeteringResult pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeFocusMeteringResult_37(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeFocusMeteringResult_37(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.FocusMeteringResult);
}

/// A class which mocks [ImageAnalysis].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageAnalysis extends _i1.Mock implements _i2.ImageAnalysis {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<void> setAnalyzer(_i2.Analyzer? analyzer) => (super.noSuchMethod(
        Invocation.method(#setAnalyzer, [analyzer]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearAnalyzer() => (super.noSuchMethod(
        Invocation.method(#clearAnalyzer, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> setTargetRotation(int? rotation) => (super.noSuchMethod(
        Invocation.method(#setTargetRotation, [rotation]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.ImageAnalysis pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeImageAnalysis_26(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeImageAnalysis_26(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.ImageAnalysis);
}

/// A class which mocks [ImageCapture].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageCapture extends _i1.Mock implements _i2.ImageCapture {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<void> setFlashMode(_i2.CameraXFlashMode? flashMode) =>
      (super.noSuchMethod(
        Invocation.method(#setFlashMode, [flashMode]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String> takePicture() => (super.noSuchMethod(
        Invocation.method(#takePicture, []),
        returnValue: _i5.Future<String>.value(
          _i6.dummyValue<String>(this, Invocation.method(#takePicture, [])),
        ),
        returnValueForMissingStub: _i5.Future<String>.value(
          _i6.dummyValue<String>(this, Invocation.method(#takePicture, [])),
        ),
      ) as _i5.Future<String>);

  @override
  _i5.Future<void> setTargetRotation(int? rotation) => (super.noSuchMethod(
        Invocation.method(#setTargetRotation, [rotation]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.ImageCapture pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeImageCapture_23(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeImageCapture_23(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.ImageCapture);
}

/// A class which mocks [ImageProxy].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageProxy extends _i1.Mock implements _i2.ImageProxy {
  @override
  int get format => (super.noSuchMethod(
        Invocation.getter(#format),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get width => (super.noSuchMethod(
        Invocation.getter(#width),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get height => (super.noSuchMethod(
        Invocation.getter(#height),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<List<_i2.PlaneProxy>> getPlanes() => (super.noSuchMethod(
        Invocation.method(#getPlanes, []),
        returnValue: _i5.Future<List<_i2.PlaneProxy>>.value(
          <_i2.PlaneProxy>[],
        ),
        returnValueForMissingStub: _i5.Future<List<_i2.PlaneProxy>>.value(
          <_i2.PlaneProxy>[],
        ),
      ) as _i5.Future<List<_i2.PlaneProxy>>);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.ImageProxy pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeImageProxy_38(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeImageProxy_38(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.ImageProxy);
}

/// A class which mocks [Observer].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserver extends _i1.Mock implements _i3.Observer<_i2.CameraState> {
  @override
  void Function(_i2.Observer, Object) get onChanged => (super.noSuchMethod(
        Invocation.getter(#onChanged),
        returnValue: (_i2.Observer pigeon_instance, Object value) {},
        returnValueForMissingStub:
            (_i2.Observer pigeon_instance, Object value) {},
      ) as void Function(_i2.Observer, Object));

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i3.Observer<_i2.CameraState> pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeObserver_16<_i2.CameraState>(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeObserver_16<_i2.CameraState>(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i3.Observer<_i2.CameraState>);
}

/// A class which mocks [PendingRecording].
///
/// See the documentation for Mockito's code generation for more information.
class MockPendingRecording extends _i1.Mock implements _i2.PendingRecording {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<_i2.Recording> start(_i2.VideoRecordEventListener? listener) =>
      (super.noSuchMethod(
        Invocation.method(#start, [listener]),
        returnValue: _i5.Future<_i2.Recording>.value(
          _FakeRecording_39(this, Invocation.method(#start, [listener])),
        ),
        returnValueForMissingStub: _i5.Future<_i2.Recording>.value(
          _FakeRecording_39(this, Invocation.method(#start, [listener])),
        ),
      ) as _i5.Future<_i2.Recording>);

  @override
  _i2.PendingRecording pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakePendingRecording_40(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakePendingRecording_40(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.PendingRecording);
}

/// A class which mocks [PlaneProxy].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaneProxy extends _i1.Mock implements _i2.PlaneProxy {
  @override
  _i9.Uint8List get buffer => (super.noSuchMethod(
        Invocation.getter(#buffer),
        returnValue: _i9.Uint8List(0),
        returnValueForMissingStub: _i9.Uint8List(0),
      ) as _i9.Uint8List);

  @override
  int get pixelStride => (super.noSuchMethod(
        Invocation.getter(#pixelStride),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get rowStride => (super.noSuchMethod(
        Invocation.getter(#rowStride),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.PlaneProxy pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakePlaneProxy_41(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakePlaneProxy_41(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.PlaneProxy);
}

/// A class which mocks [Preview].
///
/// See the documentation for Mockito's code generation for more information.
class MockPreview extends _i1.Mock implements _i2.Preview {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<int> setSurfaceProvider(
    _i2.SystemServicesManager? systemServicesManager,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#setSurfaceProvider, [systemServicesManager]),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<void> releaseSurfaceProvider() => (super.noSuchMethod(
        Invocation.method(#releaseSurfaceProvider, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.ResolutionInfo?> getResolutionInfo() => (super.noSuchMethod(
        Invocation.method(#getResolutionInfo, []),
        returnValue: _i5.Future<_i2.ResolutionInfo?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.ResolutionInfo?>.value(),
      ) as _i5.Future<_i2.ResolutionInfo?>);

  @override
  _i5.Future<void> setTargetRotation(int? rotation) => (super.noSuchMethod(
        Invocation.method(#setTargetRotation, [rotation]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.Preview pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakePreview_19(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakePreview_19(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.Preview);
}

/// A class which mocks [ProcessCameraProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockProcessCameraProvider extends _i1.Mock
    implements _i2.ProcessCameraProvider {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<List<_i2.CameraInfo>> getAvailableCameraInfos() =>
      (super.noSuchMethod(
        Invocation.method(#getAvailableCameraInfos, []),
        returnValue: _i5.Future<List<_i2.CameraInfo>>.value(
          <_i2.CameraInfo>[],
        ),
        returnValueForMissingStub: _i5.Future<List<_i2.CameraInfo>>.value(
          <_i2.CameraInfo>[],
        ),
      ) as _i5.Future<List<_i2.CameraInfo>>);

  @override
  _i5.Future<_i2.Camera> bindToLifecycle(
    _i2.CameraSelector? cameraSelector,
    List<_i2.UseCase>? useCases,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#bindToLifecycle, [cameraSelector, useCases]),
        returnValue: _i5.Future<_i2.Camera>.value(
          _FakeCamera_5(
            this,
            Invocation.method(#bindToLifecycle, [cameraSelector, useCases]),
          ),
        ),
        returnValueForMissingStub: _i5.Future<_i2.Camera>.value(
          _FakeCamera_5(
            this,
            Invocation.method(#bindToLifecycle, [cameraSelector, useCases]),
          ),
        ),
      ) as _i5.Future<_i2.Camera>);

  @override
  _i5.Future<bool> isBound(_i2.UseCase? useCase) => (super.noSuchMethod(
        Invocation.method(#isBound, [useCase]),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> unbind(List<_i2.UseCase>? useCases) => (super.noSuchMethod(
        Invocation.method(#unbind, [useCases]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> unbindAll() => (super.noSuchMethod(
        Invocation.method(#unbindAll, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.ProcessCameraProvider pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeProcessCameraProvider_33(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeProcessCameraProvider_33(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.ProcessCameraProvider);
}

/// A class which mocks [QualitySelector].
///
/// See the documentation for Mockito's code generation for more information.
class MockQualitySelector extends _i1.Mock implements _i2.QualitySelector {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.QualitySelector pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeQualitySelector_27(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeQualitySelector_27(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.QualitySelector);
}

/// A class which mocks [Recorder].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecorder extends _i1.Mock implements _i2.Recorder {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<int> getAspectRatio() => (super.noSuchMethod(
        Invocation.method(#getAspectRatio, []),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<int> getTargetVideoEncodingBitRate() => (super.noSuchMethod(
        Invocation.method(#getTargetVideoEncodingBitRate, []),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);

  @override
  _i5.Future<_i2.QualitySelector> getQualitySelector() => (super.noSuchMethod(
        Invocation.method(#getQualitySelector, []),
        returnValue: _i5.Future<_i2.QualitySelector>.value(
          _FakeQualitySelector_27(
            this,
            Invocation.method(#getQualitySelector, []),
          ),
        ),
        returnValueForMissingStub: _i5.Future<_i2.QualitySelector>.value(
          _FakeQualitySelector_27(
            this,
            Invocation.method(#getQualitySelector, []),
          ),
        ),
      ) as _i5.Future<_i2.QualitySelector>);

  @override
  _i5.Future<_i2.PendingRecording> prepareRecording(String? path) =>
      (super.noSuchMethod(
        Invocation.method(#prepareRecording, [path]),
        returnValue: _i5.Future<_i2.PendingRecording>.value(
          _FakePendingRecording_40(
            this,
            Invocation.method(#prepareRecording, [path]),
          ),
        ),
        returnValueForMissingStub: _i5.Future<_i2.PendingRecording>.value(
          _FakePendingRecording_40(
            this,
            Invocation.method(#prepareRecording, [path]),
          ),
        ),
      ) as _i5.Future<_i2.PendingRecording>);

  @override
  _i2.Recorder pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeRecorder_21(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeRecorder_21(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.Recorder);
}

/// A class which mocks [ResolutionFilter].
///
/// See the documentation for Mockito's code generation for more information.
class MockResolutionFilter extends _i1.Mock implements _i2.ResolutionFilter {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.ResolutionFilter pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeResolutionFilter_31(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeResolutionFilter_31(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.ResolutionFilter);
}

/// A class which mocks [ResolutionSelector].
///
/// See the documentation for Mockito's code generation for more information.
class MockResolutionSelector extends _i1.Mock
    implements _i2.ResolutionSelector {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<_i2.AspectRatioStrategy> getAspectRatioStrategy() =>
      (super.noSuchMethod(
        Invocation.method(#getAspectRatioStrategy, []),
        returnValue: _i5.Future<_i2.AspectRatioStrategy>.value(
          _FakeAspectRatioStrategy_2(
            this,
            Invocation.method(#getAspectRatioStrategy, []),
          ),
        ),
        returnValueForMissingStub: _i5.Future<_i2.AspectRatioStrategy>.value(
          _FakeAspectRatioStrategy_2(
            this,
            Invocation.method(#getAspectRatioStrategy, []),
          ),
        ),
      ) as _i5.Future<_i2.AspectRatioStrategy>);

  @override
  _i2.ResolutionSelector pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeResolutionSelector_25(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeResolutionSelector_25(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.ResolutionSelector);
}

/// A class which mocks [ResolutionStrategy].
///
/// See the documentation for Mockito's code generation for more information.
class MockResolutionStrategy extends _i1.Mock
    implements _i2.ResolutionStrategy {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<_i2.CameraSize?> getBoundSize() => (super.noSuchMethod(
        Invocation.method(#getBoundSize, []),
        returnValue: _i5.Future<_i2.CameraSize?>.value(),
        returnValueForMissingStub: _i5.Future<_i2.CameraSize?>.value(),
      ) as _i5.Future<_i2.CameraSize?>);

  @override
  _i5.Future<_i2.ResolutionStrategyFallbackRule> getFallbackRule() =>
      (super.noSuchMethod(
        Invocation.method(#getFallbackRule, []),
        returnValue: _i5.Future<_i2.ResolutionStrategyFallbackRule>.value(
          _i2.ResolutionStrategyFallbackRule.closestHigher,
        ),
        returnValueForMissingStub:
            _i5.Future<_i2.ResolutionStrategyFallbackRule>.value(
          _i2.ResolutionStrategyFallbackRule.closestHigher,
        ),
      ) as _i5.Future<_i2.ResolutionStrategyFallbackRule>);

  @override
  _i2.ResolutionStrategy pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeResolutionStrategy_24(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeResolutionStrategy_24(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.ResolutionStrategy);
}

/// A class which mocks [Recording].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecording extends _i1.Mock implements _i2.Recording {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(#close, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(#pause, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(#resume, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(#stop, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.Recording pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeRecording_39(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeRecording_39(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.Recording);
}

/// A class which mocks [SystemServicesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockSystemServicesManager extends _i1.Mock
    implements _i2.SystemServicesManager {
  @override
  void Function(_i2.SystemServicesManager, String) get onCameraError =>
      (super.noSuchMethod(
        Invocation.getter(#onCameraError),
        returnValue: (
          _i2.SystemServicesManager pigeon_instance,
          String errorDescription,
        ) {},
        returnValueForMissingStub: (
          _i2.SystemServicesManager pigeon_instance,
          String errorDescription,
        ) {},
      ) as void Function(_i2.SystemServicesManager, String));

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<_i2.CameraPermissionsError?> requestCameraPermissions(
    bool? enableAudio,
  ) =>
      (super.noSuchMethod(
        Invocation.method(#requestCameraPermissions, [enableAudio]),
        returnValue: _i5.Future<_i2.CameraPermissionsError?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i2.CameraPermissionsError?>.value(),
      ) as _i5.Future<_i2.CameraPermissionsError?>);

  @override
  _i5.Future<String> getTempFilePath(String? prefix, String? suffix) =>
      (super.noSuchMethod(
        Invocation.method(#getTempFilePath, [prefix, suffix]),
        returnValue: _i5.Future<String>.value(
          _i6.dummyValue<String>(
            this,
            Invocation.method(#getTempFilePath, [prefix, suffix]),
          ),
        ),
        returnValueForMissingStub: _i5.Future<String>.value(
          _i6.dummyValue<String>(
            this,
            Invocation.method(#getTempFilePath, [prefix, suffix]),
          ),
        ),
      ) as _i5.Future<String>);

  @override
  _i5.Future<bool> isPreviewPreTransformed() => (super.noSuchMethod(
        Invocation.method(#isPreviewPreTransformed, []),
        returnValue: _i5.Future<bool>.value(false),
        returnValueForMissingStub: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i2.SystemServicesManager pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeSystemServicesManager_17(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeSystemServicesManager_17(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.SystemServicesManager);
}

/// A class which mocks [VideoCapture].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoCapture extends _i1.Mock implements _i2.VideoCapture {
  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<_i2.VideoOutput> getOutput() => (super.noSuchMethod(
        Invocation.method(#getOutput, []),
        returnValue: _i5.Future<_i2.VideoOutput>.value(
          _FakeVideoOutput_42(this, Invocation.method(#getOutput, [])),
        ),
        returnValueForMissingStub: _i5.Future<_i2.VideoOutput>.value(
          _FakeVideoOutput_42(this, Invocation.method(#getOutput, [])),
        ),
      ) as _i5.Future<_i2.VideoOutput>);

  @override
  _i5.Future<void> setTargetRotation(int? rotation) => (super.noSuchMethod(
        Invocation.method(#setTargetRotation, [rotation]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i2.VideoCapture pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeVideoCapture_20(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeVideoCapture_20(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.VideoCapture);
}

/// A class which mocks [ZoomState].
///
/// See the documentation for Mockito's code generation for more information.
class MockZoomState extends _i1.Mock implements _i2.ZoomState {
  @override
  double get minZoomRatio => (super.noSuchMethod(
        Invocation.getter(#minZoomRatio),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  double get maxZoomRatio => (super.noSuchMethod(
        Invocation.getter(#maxZoomRatio),
        returnValue: 0.0,
        returnValueForMissingStub: 0.0,
      ) as double);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
        returnValueForMissingStub: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i2.ZoomState pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeZoomState_43(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
        returnValueForMissingStub: _FakeZoomState_43(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i2.ZoomState);
}

/// A class which mocks [LiveData].
///
/// See the documentation for Mockito's code generation for more information.
class MockLiveCameraState extends _i1.Mock
    implements _i3.LiveData<_i2.CameraState> {
  MockLiveCameraState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LiveDataSupportedType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.LiveDataSupportedType.cameraState,
      ) as _i2.LiveDataSupportedType);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<void> observe(_i2.Observer? observer) => (super.noSuchMethod(
        Invocation.method(#observe, [observer]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.CameraState?> getValue() => (super.noSuchMethod(
        Invocation.method(#getValue, []),
        returnValue: _i5.Future<_i2.CameraState?>.value(),
      ) as _i5.Future<_i2.CameraState?>);

  @override
  _i3.LiveData<_i2.CameraState> pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeLiveData_7<_i2.CameraState>(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i3.LiveData<_i2.CameraState>);

  @override
  _i5.Future<void> removeObservers() => (super.noSuchMethod(
        Invocation.method(#removeObservers, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [LiveData].
///
/// See the documentation for Mockito's code generation for more information.
class MockLiveZoomState extends _i1.Mock
    implements _i3.LiveData<_i2.ZoomState> {
  MockLiveZoomState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.LiveDataSupportedType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i2.LiveDataSupportedType.cameraState,
      ) as _i2.LiveDataSupportedType);

  @override
  _i2.PigeonInstanceManager get pigeon_instanceManager => (super.noSuchMethod(
        Invocation.getter(#pigeon_instanceManager),
        returnValue: _FakePigeonInstanceManager_0(
          this,
          Invocation.getter(#pigeon_instanceManager),
        ),
      ) as _i2.PigeonInstanceManager);

  @override
  _i5.Future<void> observe(_i2.Observer? observer) => (super.noSuchMethod(
        Invocation.method(#observe, [observer]),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.ZoomState?> getValue() => (super.noSuchMethod(
        Invocation.method(#getValue, []),
        returnValue: _i5.Future<_i2.ZoomState?>.value(),
      ) as _i5.Future<_i2.ZoomState?>);

  @override
  _i3.LiveData<_i2.ZoomState> pigeon_copy() => (super.noSuchMethod(
        Invocation.method(#pigeon_copy, []),
        returnValue: _FakeLiveData_7<_i2.ZoomState>(
          this,
          Invocation.method(#pigeon_copy, []),
        ),
      ) as _i3.LiveData<_i2.ZoomState>);

  @override
  _i5.Future<void> removeObservers() => (super.noSuchMethod(
        Invocation.method(#removeObservers, []),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
